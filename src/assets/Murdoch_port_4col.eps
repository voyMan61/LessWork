%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: Murdoch_port_4col.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Murdoch University%%CreationDate: 16/3/07%%BoundingBox: 0 0 559 455%%HiResBoundingBox: 0 0 558.7833 454.6377%%CropBox: 0 0 558.7833 454.6377%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Murdoch_port_4col</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-03-16T09:49:27+09:00</xap:CreateDate>
         <xap:ModifyDate>2007-03-16T09:49:27+09:00</xap:ModifyDate>
         <xap:MetadataDate>2007-03-16T09:49:27+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>208</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXkP/OT3/KA2H/bVh/6hrjKM/0vV+x/+NS/4Wf91F8xZiPpDsVdiqO0jTm1G6ayhRnu5kb6&#xA;miCpaVRyCUG5LqpVQP2iMBaM+Xw48R+kc/d+z7rXaFpd5qGuWen29u01xNPHF6HGpqXCkMD0HjXE&#xA;7jZGpzRx4pTJoAHdf5j0u907zDf6fdRMlzDcyxlCNyQ5AI8Qe1MRsKRpM0cmGM4nYxH3KWr6bJpt&#xA;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&#xA;Kv8A/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:5EDD5F69D47B11DBB5D8BB6FE0C6F764</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5EDD5F6AD47B11DBB5D8BB6FE0C6F764</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:04BFDA56BF6911DB862F851D2C39D73D</stRef:instanceID>
            <stRef:documentID>uuid:6F430B9EBF3911DB862F851D2C39D73D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -454.638 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 454.638 li558.783 454.638 li558.783 0 licpclp[1 0 0 1 0 0 ] concat15.0791 304.717 mo15.0791 382.014 li15.0791 383.111 14.1743 384.052 13.1191 384.052 cv1.96045 384.052 li0.904785 384.052 0 383.111 0 382.014 cv0 281.513 li0 280.415 0.904785 279.474 1.96045 279.474 cv21.1108 279.474 li25.0313 279.474 26.0869 280.258 27.2935 284.021 cv54.5864 367.433 li80.5225 285.746 li82.332 280.258 82.9351 279.474 86.2524 279.474 cv106.609 279.474 li107.665 279.474 108.57 280.415 108.57 281.513 cv108.57 382.014 li108.57 383.111 107.665 384.052 106.609 384.052 cv90.9272 384.052 li89.8716 384.052 88.9668 383.111 88.9668 382.014 cv88.9668 304.717 li64.3877 377.623 li62.4277 383.582 61.8247 384.052 57.9038 384.052 cv45.6899 384.052 li42.8247 384.052 42.0708 383.268 40.4121 378.564 cv15.0791 304.717 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykf56.1665 419.747 mo61.4873 419.747 li61.8452 419.747 62.1523 420.054 62.1523 420.412 cv62.1523 441.233 li62.1523 445.02 62.5615 446.299 64.3008 447.731 cv65.7847 448.959 67.4727 449.521 69.8774 449.521 cv72.2817 449.521 74.021 449.01 75.5049 447.936 cv77.4487 446.503 78.0117 445.02 78.0117 441.388 cv78.0117 420.412 li78.0117 420.054 78.3184 419.747 78.6768 419.747 cv82.5649 419.747 li82.9741 419.747 83.2808 420.054 83.2808 420.412 cv83.2808 443.28 li83.2808 447.015 81.8486 449.982 79.188 452.028 cv76.7837 453.819 73.8677 454.638 69.4683 454.638 cv64.9658 454.638 61.8965 453.819 59.4409 451.926 cv56.4224 449.624 55.5015 447.22 55.5015 441.541 cv55.5015 420.412 li55.5015 420.054 55.8086 419.747 56.1665 419.747 cvcpf115.49 427.626 mo115.49 453.205 li115.49 453.563 115.183 453.87 114.825 453.87 cv111.039 453.87 li110.681 453.87 110.374 453.563 110.374 453.205 cv110.374 420.412 li110.374 420.054 110.681 419.747 111.039 419.747 cv116.667 419.747 li117.536 419.747 117.945 420.003 118.406 420.771 cv133.395 445.02 li133.395 420.412 li133.395 420.054 133.702 419.747 134.06 419.747 cv137.846 419.747 li138.204 419.747 138.511 420.054 138.511 420.412 cv138.511 453.205 li138.511 453.563 138.204 453.87 137.846 453.87 cv132.679 453.87 li131.86 453.87 131.4 453.614 130.939 452.847 cv115.49 427.626 licpf165.747 453.205 mo165.747 420.412 li165.747 420.054 166.054 419.747 166.412 419.747 cv171.733 419.747 li172.091 419.747 172.398 420.054 172.398 420.412 cv172.398 453.205 li172.398 453.563 172.091 453.87 171.733 453.87 cv166.412 453.87 li166.054 453.87 165.747 453.563 165.747 453.205 cvcpf212.25 447.168 mo220.641 420.873 li220.948 419.9 221.152 419.747 222.125 419.747 cv225.296 419.747 li225.961 419.747 226.217 419.9 226.217 420.361 cv226.217 420.515 226.166 420.719 226.115 420.873 cv215.422 452.233 li214.86 454.023 214.553 454.279 213.274 454.279 cv209.59 454.279 li208.26 454.279 208.056 454.126 207.544 452.643 cv196.698 420.975 li196.596 420.771 196.596 420.617 196.596 420.463 cv196.596 419.952 196.852 419.747 197.67 419.747 cv202.019 419.747 li203.093 419.747 203.349 419.952 203.656 420.924 cv212.25 447.168 licpf257.085 424.863 mo257.085 433.406 li267.675 433.406 li268.033 433.406 268.34 433.714 268.34 434.071 cv268.34 437.857 li268.34 438.216 268.033 438.522 267.675 438.522 cv257.085 438.522 li257.085 448.754 li271.256 448.754 li271.615 448.754 271.921 449.062 271.921 449.419 cv271.921 453.205 li271.921 453.563 271.615 453.87 271.256 453.87 cv251.1 453.87 li250.742 453.87 250.435 453.563 250.435 453.205 cv250.435 420.412 li250.435 420.054 250.742 419.747 251.1 419.747 cv270.233 419.747 li270.591 419.747 270.898 420.054 270.898 420.412 cv270.898 424.198 li270.898 424.556 270.591 424.863 270.233 424.863 cv257.085 424.863 licpf303.291 434.379 mo307.691 434.379 li310.607 434.379 312.5 432.332 312.5 429.212 cv312.5 426.091 310.607 424.146 307.639 424.146 cv303.291 424.146 li303.291 434.379 licp303.291 438.113 mo303.291 453.205 li303.291 453.563 302.984 453.87 302.625 453.87 cv297.305 453.87 li296.947 453.87 296.641 453.563 296.641 453.205 cv296.641 420.412 li296.641 420.054 296.947 419.747 297.305 419.747 cv308.561 419.747 li312.551 419.747 314.648 420.361 316.49 422.049 cv318.229 423.635 319.15 425.835 319.15 428.547 cv319.15 433.662 316.695 436.63 311.938 437.295 cv312.141 437.602 li312.449 438.063 313.012 438.829 313.83 439.903 cv315.211 441.797 316.133 443.075 316.797 444.048 cv322.271 452.233 li322.68 452.796 322.73 453 322.73 453.205 cv322.73 453.665 322.322 453.87 321.504 453.87 cv315.672 453.87 li315.416 453.87 315.211 453.768 315.109 453.563 cv305.439 438.829 li305.031 438.216 304.877 438.113 304.211 438.113 cv303.291 438.113 licpf356.664 440.108 mo351.549 436.477 li348.223 434.123 347.047 432.128 347.047 428.854 cv347.047 423.021 351.447 419.235 358.25 419.235 cv363.008 419.235 366.486 420.361 366.486 421.845 cv366.486 425.528 li366.486 425.988 366.283 426.244 365.924 426.244 cv365.719 426.244 365.465 426.193 365.156 426.04 cv362.803 424.812 360.963 424.352 358.66 424.352 cv355.488 424.352 353.697 425.682 353.697 427.983 cv353.697 429.569 354.516 430.644 356.971 432.229 cv362.496 435.913 li366.078 438.317 367.51 440.671 367.51 444.252 cv367.51 450.545 363.111 454.177 355.539 454.177 cv350.219 454.177 346.023 452.796 346.023 451.005 cv346.023 447.526 li346.023 447.066 346.229 446.811 346.637 446.811 cv346.791 446.811 347.098 446.912 347.404 447.066 cv350.117 448.498 352.213 449.112 354.67 449.112 cv358.354 449.112 360.348 447.629 360.348 444.969 cv360.348 443.178 359.58 442.154 356.664 440.108 cvcpf393.139 453.205 mo393.139 420.412 li393.139 420.054 393.447 419.747 393.805 419.747 cv399.125 419.747 li399.482 419.747 399.789 420.054 399.789 420.412 cv399.789 453.205 li399.789 453.563 399.482 453.87 399.125 453.87 cv393.805 453.87 li393.447 453.87 393.139 453.563 393.139 453.205 cvcpf434.221 424.761 mo424.654 424.761 li424.295 424.761 423.988 424.454 423.988 424.096 cv423.988 420.412 li423.988 420.054 424.295 419.747 424.654 419.747 cv450.541 419.747 li450.949 419.747 451.256 420.054 451.256 420.412 cv451.256 424.096 li451.256 424.454 450.949 424.761 450.541 424.761 cv440.871 424.761 li440.871 453.205 li440.871 453.563 440.564 453.87 440.205 453.87 cv434.885 453.87 li434.527 453.87 434.221 453.563 434.221 453.205 cv434.221 424.761 licpf485.951 440.518 mo474.439 421.026 li474.234 420.771 474.184 420.515 474.184 420.361 cv474.184 420.003 474.543 419.747 475.156 419.747 cv480.221 419.747 li481.193 419.747 481.5 419.952 482.012 420.873 cv489.891 434.327 li497.359 420.565 li497.717 419.952 498.023 419.747 498.74 419.747 cv502.322 419.747 li502.885 419.747 503.293 420.003 503.293 420.361 cv503.293 420.515 503.191 420.719 503.088 420.924 cv492.602 440.159 li492.602 453.205 li492.602 453.563 492.295 453.87 491.936 453.87 cv486.615 453.87 li486.258 453.87 485.951 453.563 485.951 453.205 cv485.951 440.518 licpf173.527 380.419 mo173.226 380.419 li170.972 380.419 170.37 380.57 168.266 381.472 cv163.606 383.275 li159.999 384.778 154.888 385.53 149.626 385.53 cv132.641 385.53 123.923 377.112 123.923 360.729 cv123.923 310.824 li123.923 309.771 124.825 308.869 125.877 308.869 cv140.007 308.869 li141.059 308.869 141.96 309.771 141.96 310.824 cv141.96 354.415 li141.96 366.291 146.319 371.551 156.541 371.551 cv166.312 371.551 171.724 367.643 171.724 360.729 cv171.724 310.824 li171.724 309.771 172.475 308.869 173.678 308.869 cv187.657 308.869 li188.859 308.869 189.761 309.771 189.761 310.824 cv189.761 382.074 li189.761 383.126 188.859 384.027 187.657 384.027 cv175.18 384.027 li174.279 384.027 173.527 383.126 173.527 382.074 cv173.527 380.419 licpf221.841 313.379 mo223.644 313.229 223.945 313.229 226.049 312.326 cv231.762 309.771 237.924 308.268 242.885 308.268 cv247.845 308.268 248.897 308.869 248.897 311.425 cv248.897 322.397 li248.897 324.052 248.146 324.803 246.492 324.803 cv246.041 324.803 245.29 324.803 244.538 324.652 cv241.833 324.353 li238.225 323.752 li237.022 323.601 235.82 323.601 234.618 323.601 cv226.5 323.601 223.344 326.757 223.344 334.573 cv223.344 382.074 li223.344 383.126 222.442 384.027 221.39 384.027 cv207.26 384.027 li206.208 384.027 205.306 383.126 205.306 382.074 cv205.306 310.824 li205.306 309.771 206.208 308.869 207.26 308.869 cv219.435 308.869 li220.939 308.869 221.841 309.621 221.841 310.824 cv221.841 313.379 licpf307.797 361.932 mo307.797 331.567 li307.797 323.752 302.688 319.843 292.617 319.843 cv279.088 319.843 271.723 329.162 271.723 345.997 cv271.723 363.283 278.938 372.452 292.467 372.452 cv302.086 372.452 307.797 368.545 307.797 361.932 cvcp309.303 379.818 mo307.947 379.818 307.646 379.969 306.145 380.72 cv300.885 383.576 295.021 384.929 289.16 384.929 cv267.664 384.929 253.685 369.897 253.685 346.899 cv253.685 323.601 268.416 307.367 289.459 307.367 cv295.32 307.367 299.68 308.419 304.039 311.125 cv305.693 312.026 305.994 312.177 307.797 312.177 cv307.797 280.76 li307.797 279.708 308.699 278.807 309.752 278.807 cv323.881 278.807 li324.934 278.807 325.836 279.708 325.836 280.76 cv325.836 382.074 li325.836 383.126 324.934 384.027 323.881 384.027 cv311.705 384.027 li310.504 384.027 309.303 383.126 309.303 382.074 cv309.303 379.818 licpf355.389 346.448 mo355.389 363.584 362.453 373.656 374.178 373.656 cv385.902 373.656 392.967 363.734 392.967 347.2 cv392.967 330.064 385.902 319.843 374.328 319.843 cv362.453 319.843 355.389 329.764 355.389 346.448 cvcp337.35 346.749 mo337.35 321.195 350.277 307.367 374.178 307.367 cv385.451 307.367 392.967 309.771 399.129 315.334 cv406.945 322.397 411.004 332.921 411.004 345.997 cv411.004 372.452 398.379 386.282 374.027 386.282 cv362.453 386.282 355.539 384.027 349.074 378.165 cv341.107 371.25 337.35 361.029 337.35 346.749 cvcpf481.332 369.297 mo481.332 376.962 li481.332 381.773 470.811 385.229 456.832 385.229 cv433.531 385.229 419.703 371.101 419.703 347.05 cv419.703 323.15 434.734 307.367 457.432 307.367 cv470.66 307.367 481.332 310.674 481.332 314.882 cv481.332 322.999 li481.332 324.052 480.58 324.803 479.68 324.803 cv479.078 324.803 478.176 324.503 476.973 323.901 cv472.613 321.495 465.85 319.843 460.439 319.843 cv445.557 319.843 437.742 328.711 437.742 345.696 cv437.742 363.734 444.957 372.452 459.537 372.452 cv465.549 372.452 472.764 370.648 477.426 367.943 cv478.326 367.342 479.229 367.042 479.828 367.042 cv480.73 367.042 481.332 367.943 481.332 369.297 cvcpf510.682 312.326 mo510.984 312.326 li512.787 312.326 513.086 312.326 515.492 311.125 cv520.303 308.568 526.164 307.367 532.629 307.367 cv549.164 307.367 558.783 316.837 558.783 333.07 cv558.783 382.074 li558.783 383.126 557.881 384.027 556.828 384.027 cv542.699 384.027 li541.646 384.027 540.746 383.126 540.746 382.074 cv540.746 339.082 li540.746 326.456 536.387 321.045 526.314 321.045 cv516.545 321.045 510.682 325.104 510.682 331.718 cv510.682 382.074 li510.682 383.126 509.779 384.027 508.727 384.027 cv494.6 384.027 li493.545 384.027 492.645 383.126 492.645 382.074 cv492.645 280.76 li492.645 279.708 493.545 278.807 494.6 278.807 cv508.727 278.807 li509.779 278.807 510.682 279.708 510.682 280.76 cv510.682 312.326 licpf358.429 171.302 mo314.182 171.302 li309.181 171.302 298.242 172.343 290.558 177.001 cv284.241 180.83 279.451 187.642 279.451 187.642 cv279.451 187.642 274.663 180.83 268.327 177.001 cv260.652 172.343 249.714 171.302 244.712 171.302 cv200.561 171.302 li204.53 178.875 209.525 186.167 215.821 192.461 cv250.181 226.822 279.439 237.977 279.439 237.977 cv279.439 237.977 308.249 227.403 343.17 192.483 cv349.474 186.178 354.467 178.879 358.429 171.302 cvcp0 1 0.81 0.04 cmykf388.149 116.478 mo382.294 130.741 li382.294 130.741 375.46 133.696 364.525 133.696 cv353.582 133.696 354.517 132.781 343.344 132.781 cv318.902 132.781 308.213 141.126 308.213 141.126 cv308.213 141.126 313.48 129.596 327.914 123.575 cv334.925 120.638 340.549 120.219 344.68 120.219 cv348.807 120.219 361.114 122.112 368.597 122.112 cv377.056 122.112 388.149 116.478 388.149 116.478 cvcp0.5 0 1 0 cmykf170.892 116.478 mo176.742 130.741 li176.742 130.741 183.571 133.696 194.514 133.696 cv205.455 133.696 204.525 132.781 215.699 132.781 cv240.139 132.781 250.829 141.126 250.829 141.126 cv250.829 141.126 245.555 129.596 231.126 123.575 cv224.116 120.638 218.488 120.219 214.357 120.219 cv210.23 120.219 197.928 122.112 190.44 122.112 cv181.983 122.112 170.892 116.478 170.892 116.478 cvcpf309.278 59.2588 mo309.278 51.7979 306.524 44.9575 302.004 39.6938 cv300.651 138.602 li297.839 35.6968 li295.247 33.6504 292.316 32.0337 289.138 30.9414 cv287.662 146.052 li284.688 29.7998 li282.997 29.5059 281.275 29.3267 279.503 29.3335 cv277.733 29.3408 276.01 29.5332 274.325 29.8359 cv271.344 146.052 li269.869 31 li266.689 32.1006 263.756 33.7168 261.163 35.7583 cv258.351 138.602 li257 39.7373 li252.473 44.9805 249.72 51.793 249.72 59.2588 cv249.72 64.8545 248.703 104.511 248.775 120.998 cv248.851 139.167 262.487 147.493 268.808 149.865 cv278.38 153.461 279.503 162.056 279.503 162.056 cv279.503 162.056 280.624 153.461 290.189 149.865 cv296.509 147.493 309.913 139.167 310.226 120.998 cv310.514 104.518 309.278 64.8545 309.278 59.2588 cvcp0 0.3 1 0 cmykf380.83 149.004 mo380.83 149.004 320.879 149.004 315.853 149.004 cv294.736 149.004 280.179 162.177 279.516 178.687 cv280.129 177.868 286.207 161.302 315.17 161.302 cv321.025 161.302 375.755 161.302 375.755 161.302 cv380.86 149.072 li380.83 149.004 licp0.56 0 1 0.27 cmykf178.211 148.965 mo178.211 148.965 238.163 148.965 243.189 148.965 cv264.305 148.965 278.863 162.138 279.526 178.647 cv278.913 177.829 272.834 161.263 243.872 161.263 cv238.016 161.263 183.287 161.263 183.287 161.263 cv178.181 149.033 li178.211 148.965 licpf185.882 113.583 mo185.882 115.329 186.013 118.152 186.369 121.736 cv187.755 121.965 189.13 122.112 190.44 122.112 cv197.928 122.112 210.23 120.219 214.357 120.219 cv218.488 120.219 224.116 120.638 231.126 123.575 cv232.735 124.247 234.225 124.989 235.612 125.774 cv235.245 123.856 234.928 121.764 234.928 120.213 cv234.928 119.771 234.987 117.292 235.083 113.569 cv230.99 111.328 li220.111 110.868 li220.111 109.678 li230.99 109.206 li235.259 106.876 li235.362 103.013 235.481 98.6128 235.604 94.0786 cv231.419 91.7915 li220.542 91.3296 li220.542 90.1338 li231.419 89.666 li235.791 87.2817 li235.922 82.4844 236.052 77.7729 236.167 73.6191 cv231.97 70.8472 li221.172 69.4658 li221.222 68.8633 li221.276 68.2725 li232.146 68.7246 li236.354 66.8691 li236.483 62.2271 236.567 59.2422 236.567 59.2422 cv236.567 56.9814 236.745 54.7622 237.083 52.5962 cv233.109 48.3438 li222.924 44.4712 li223.109 43.8955 li223.289 43.3374 li233.764 46.3257 li238.87 45.3955 li240.229 41.418 242.157 37.7056 244.559 34.353 cv244.449 34.2588 li242.233 28.6431 li234.201 21.2266 li234.582 20.7661 li234.965 20.3042 li243.592 27.0137 li249.454 28.2266 li249.685 28.4224 li252.325 25.8799 255.287 23.6724 258.509 21.8701 cv258.366 21.5649 li258.721 15.5293 li254.54 5.37207 li255.084 5.12012 li255.614 4.87012 li260.629 14.6211 li265.439 18.2285 li265.654 18.7002 li268.885 17.6074 272.287 16.8911 275.812 16.6011 cv278.46 11.4478 li278.918 0 li185.882 0 li185.882 0 185.882 103.799 185.882 113.583 cvcp280.104 0 mo280.572 11.4478 li283.234 16.625 li286.755 16.9404 290.15 17.6836 293.374 18.7998 cv293.634 18.2285 li298.443 14.6211 li303.458 4.87012 li303.987 5.12012 li304.532 5.37207 li300.352 15.5293 li300.706 21.5649 li300.49 22.0244 li303.674 23.8345 306.602 26.0386 309.208 28.5742 cv309.618 28.2266 li315.479 27.0137 li324.106 20.3042 li324.49 20.7661 li324.871 21.2266 li316.839 28.6431 li314.623 34.2588 li314.305 34.5332 li316.635 37.8203 318.511 41.4482 319.846 45.3306 cv325.308 46.3257 li335.783 43.3374 li335.965 43.8955 li336.148 44.4712 li325.963 48.3438 li321.855 52.7393 li321.688 52.7949 li322.006 54.8979 322.172 57.0508 322.172 59.2422 cv322.172 59.2422 322.252 62.1616 322.376 66.7183 cv326.928 68.7246 li337.795 68.2725 li337.851 68.8633 li337.9 69.4658 li327.103 70.8472 li322.569 73.8408 li322.68 77.8843 322.803 82.4434 322.928 87.0889 cv327.653 89.666 li338.531 90.1338 li338.531 91.3296 li327.653 91.7915 li323.12 94.2686 li323.237 98.6567 323.351 102.915 323.449 106.677 cv328.083 109.206 li338.961 109.678 li338.961 110.868 li328.083 111.328 li323.632 113.766 li323.724 117.407 323.78 119.822 323.78 120.25 cv323.78 121.818 323.466 123.96 323.105 125.907 cv323.191 125.907 li324.645 125.072 326.213 124.284 327.914 123.575 cv334.925 120.638 340.549 120.219 344.68 120.219 cv348.807 120.219 361.114 122.112 368.597 122.112 cv369.9 122.112 371.268 121.967 372.646 121.74 cv372.994 118.154 373.12 115.33 373.12 113.583 cv373.12 103.799 373.12 0 373.12 0 cv280.104 0 licp0 1 0.81 0.04 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 12.0.1%%For: (Murdoch University) ($)%%Title: (Murdoch_port_4col.eps)%%CreationDate: 16/3/07 9:49 AM%AI9_DataStream%Gb!!kl]PA\E@1G`I#%RY#g'][_>U,,,uOB;en%E]=k[jh9Q\Wt9&d@=lsR0eofi<u04+eD*)r&#h%SP/-!"U9i0"'QH-a8$RpUU=%rr(I;hZ)\=+9%m>guOr&DfWrY3Q)_`o/H^4]75/(h6Fe5lG`GDlo(,(D:<@#4cU&iX`lX^YC?H/c1gsNhgbM$`t*+FIeV[!&)Vd0%pt[T@?N''QpG`-IqCgk^YAaF%m5NpMplCnOIIm<[^Fc)UiVRQ.rT;qjYK*jh^Ag1,rl*-kUR1H+I_,@:f,t"bm8r2XrV*eYKWfk#%Rsa77_i5Vmrbn\]4Pk#Ea$?D&)9q0Lfl+V#k54U2I=2"X_aj*3hsT7NT0Bsepg2^bD4<KArH0Y<N5)gG?bcL(CVnumTqR7hfiN\'%m[L\8s5E#:lV@V`%#Zn85CPQR54D!*$hu[LhgG%of5H.'Yk@^*?J9VqL\_bcr.hbR5)oOHY5B.8eNa&V5J.mbqf'k%%&!U_BE.q&%hYuUW0DXFZp]'::U[>jX%/G[fhnBm$kY+29)'SJ#Du]b3qen[?>]+/Sn`-O>hsag!pFQE[j,_?Be%qRR7gEr:^jf[:qZ#4W5F%aK%?/#+DE"d.&&,#hWs-eZKd^lrXPfI-`IdJ3oj(C2G_W!ep^&Reqf:Upj5n5L'NiuZu9qg.eYM+GA&@[)Ph/2mHhn8<(r%LloXg]mY%H;dET5K"rlb_,rhhqu-GO'djproW&6:ER=JX'kbtn(u.:s753J5J6lC`uaDADL:U(IZV>Ee+_b4rV4G-mlnjbrpi!R3r$`+?bcPO%bh[U@qeofi^9:)gs-3fgr;,G\hL;32oZd-;8\_cL:B0t@n*f^Os6&-tF+E.rqtBtQJ+s]'qdiCaVSkTo7(BetTp2$Q#O2\X;/]?7%[TE@%*p@rm4OEj^^E;Y1G9>`@jk]f@kd9VVs7PEaYNM=UiMO`snB>h*o&#K-aqVm2a'F(r;tf1N=8t8WEUNNBs"Hq?]D#[IqJ]6b%0^d$>r+[5IpOa$*oAM@n2uB$C1-Ya;>F@YSrmbpON7MLb7\;>_bC=55rVi;Ta.N@s`t.'Wqj[>0rp\o[I'%=9s8(2O#6B2Krp0$%%I\SUmogZY4d(=N%r`3F9YMXd*o1/]TkDs^grc7VBJ,Q!Xhi-=_1Bl!prp]lu:N&JTd3%4!ah%;ua7$e?lchYDq!a9fn+\9"VLf[X%m=-$ar*Cf?n(nGLY9Rb6o17nJr8^<bXWJTmr:-]?qlA?+I.QbZ+('Npf6;.V")RsS,K\i70\Enq+5bB4q,dLk"ip0un,N'u2t+Jm%T;Q[[r;QB0:[d.foC`^pq;%sXpRgnk]RJmh?I6^=^O&1IO:U5$P;LAHpKuhUhlf7nqcMIW9n.Wdrp+Pkpc_J1I^oED=KS&Wr:T`l%DgApdrqcBEndf)HN5'Z:rq4;NL0L!4I`D1(o^#,3"D44eY6JE?8`.^XO42#qJ'jbUMjp@;nbr@:pM[gT]Ae>>@KRQ+Sk4>N&(jt@%O8mKqqnN(Ws8%5)+91L(rl7aEq8]!)r]f2_f*q[ts"s_KYOD;EdDt)<J\/cpNIPX<n,)Y4^SN+Oc*+[5hpMJ\[dJMbDqJoGZ%qk(%h>6,G9B-6nC<HNfE2-dZd@90i`_Rn#LP*((5E3G7=ZcKEcTDDk']!Vdj$=bC\mKs3\&HC4'C,AEa.(e#EuOL]_G>e?paWf.fEMG\%+?t,;h!J&<)RupK2Y[g^"J;"(i6eb-`;Sto$Gr>&m5!c^\sC,0,CO0f]DouHmRd2$i"48d'<?Eu6Vj9`_;OS#i9&%OjB0bP(qZo*%@/Qg)TA&k"DS<D=*eG"7LVSAh8`tPiF=umTF#`)<o`LfUX'e;E"0V-mU2on<i#..s#]mklbENNm?r$.h-Sr:\iU_,T^pO_pUdG^X%rs7W)EQEM5jOW53:J"*8Rm1.k_`RuaaW/?3makgXhA<@'%Qr-n*uK!=d<*b=?2+oNj(g!V-t;j*7=2o_ge^L>OA/3Z>ip@bH^iRa%:LI4!_;IZs^UJ3t8[cDFL&R,d^<`VjhK-6gp[XMcoq:sKV[G5H]:R/RfBlY1F,G`5-aui3Q32kO4J3P+$8V+?U'dMB-:bfYRP?5i%=H7'$VL7%o3P#$ZbiG@KcQ@9!S&6C_G2EO4rhNcUh";3inQ??QrMl&nW\l.eB\G6+Q/W5aLo#P]Bd^C7#<_%q8VIsC@o3*.*V$d9%q/?W%jR.LQPC!p+Ih2u1[pJmG(dREM:D`;8jTC].n:>sr(VYSu[.#[De&hnF8@^0sMI52^C>k?7;n[gY?i=\M[1n9SiS.qdB0K.)%ErV>kglq7'K.)<+HK>6OlN^hsFJ01G5#;c@r>L`EMb\Dbmq'ot$(S(45+TW6@C:V9UV''^(Hc2("^t.VJ_qK"3P#$ZbiG@KcQC(=%aK8N-E;[JTJ+gd62I-'nO:HX\T@\dTU%?K5N;g'NJI3!tb.bb&RN.Z"9P'irEa8IYb&JlO-KC++QZg"1JNAS`T>7P"K#&PO#O7nA%T6.+=@/b6k#$3ubGMR_M8%qEi3f`eel':7&<XYNpg:=Fk7Tdh7bG3qubnq.E/4VNM;a0f(bO5Be-MJd5rh)X**"G9@q`ZG,r(4B3%\a(C=US<OZI]Z,S7Ai3AQ=\LFqI?g7piIu`(08Vc/F@uNdI2["%#R9X,G(5NTD?:a&H"@3pEY.c:jnuihuauj^&;oD%9G0d*LK)=%=UW\F,YaXArFogE'a3O[%t%D^fdn>PD/rd3rfX+LHBk+'/k\LM7`hQL\n;4DB6!s8R+RVlpd:<s](=r0#BF`I>R833okOfX%l4Ef%U@T@pati!W!A^&nHto+7Kssr2fnY/Hl?+<'L(oa>:@dY>m[<BFG5hOAM*20+n"3AB6+lV%[R<F>4,ecfK20jDKgOQ:FHUK@8Z&70%rMW7Okg9nZ<+t3qid&qDrqXO"$T+Y*RB&.Z8j5AM2J+tNdXKH]LDTep[k8=)^4MRi^o-rbXLs.u/EO+e3T[g(0AB@P#0b&TWZWB)%(lX@0F\_XG5!C[3*jRu;bCco>N0"Qg,4sL_YZUeS)I40V7F[3jhJS6/OglJ9C6QF%HTBGPBN<8-'0oJ4XbsgS@=82N1KtCTi-J3&%)+W;p,qOqHdkQ=D;'tOF0%NG*ILmJnr=fa"[9rfnN9GT/2A%S&(eVes==enQ/(qff-72rldpa9!_+JY\"H$Z9F#jTAp1lc'*#3bR%.f6)gR>p.WG6`iH5u`W<(R<o0K)/F6+L0sJQ,]lF"2V5sb@-\0CHN4L-m%0TbdEL'E:><*FXt9_H);S43iDo*@nCM">cdIknN_%o%b.'"RIZ6jLU[')"Bt4cp"bBRk"2TP_,Tde;<7XV0F_AIRi99i?#nF=km`<,sn**)V^qQ<;c[k"*m/,MW,WMY&W!C"'4\-R4F]tP/%iclZ`=VbeC7m.ERPqjtM[9r6^i95JX$0EiC#L[EQ/9VZOL#??@A$h0t?P`O8S<1$d.q)>;;'+]Cn7t+I-'JT'D,R[H0PG/52Btlg%h'tmq]Hf\(\[7WcHm0B6XO,H-!]$dN6^DkKps&TjGZZ,3S1Z'Y5p5Ro5a'hnOWa1Y_`Ht&T>:O[$T/N#5Xoa(;#K#Wj9W*"D\L4>%ZI"jgT&^0L)UGuk,;Ao[Yg>C9/G+uVr_@j$aEpj5M8%%9.;jNpim2Q6D+L5t\)"E1>6i1/hca>Ka"(lkn(rNF*^r#0*9@0an*WsL%^k54T(S)!cU>)>8"'P8WN;*'g,h&F/j7a4so\5\sV7$$5+4Y-SB/k2t_mLH]q:s44No/1P6$6+KR>u3]'2;Gm!0%tKS_Rd?a5_:9%EB`G*-;0AN&Nl@<Oa$n#XQlT7!;(DX)$sdNiQM*):h>0[qY8eiiuWm&S@YJ.-fFt>\\F.ZSt]%4CpHh/?>)h%Y-)gl_@arl#pJ37%f\6GVLfgb9D%L]ToQ=I&8HE&9QM21(i=m8]HYfJm@=BmXRIK99*bU4f%T1$WPcknTjMC8nED1+11?0Ar0>IT%H'"uYl2`_T(nJ_O%41fWAkBL9f?,>X7e%C4:,>#CpZo^QXCJ<qf^F]gZQQ+9R-P9-dP&of(lbIW,BBP)UJ5d&8h5p3/rTiC2):gjoFO,_6*s\=)[Zr2M%0-CC2Is:\aN.hgkXL*5EM>J;XA5FU3n.YXjORskO'EQg&\O(ZmF'm#s?!W4dMR@Rnf*Pg8Zlst?8K"7?IA<@0N<QH+J.S\#guM(:%Y_)Q)Y"JcJ=k<YbZd'Ed*+1P0_t(!%g7V>.>aDglCE)PoaY"[,f/`@8$8MHHMN+O.%B$?&EYJFh+X?=C"!'DgQkGR)Yrd@$k(@T=%Bl?PmNh@hH=['bu>l+bBSHh>akBgP$R9V>f`Jt!KB`/iVmU459:VW#7':Adt"3]Jn"5b_5gC^08$0o)?I!JiQBl_"ah!1.TEq\7Q%9KbcYeh7MhUSBrTI#=M8-Du6"./@QL\rnf)pj=273$0[@=\$3OjZ;9>X[Di/jR98CHKksI[s;,CEMgpr5TJ@?JVL8l^em,-jJX&[%E^eer+o$"ZmZ(35.&tO9q=_JPM5poQNVu\nm@e4;_)]o2ppU]9mN:X*6`rfFLu+/"!(Z@a`Z?[@R#nNpd(WfTN%kf4:$6PI@F!'*%]48&X[$@S.ad9lqEU`?*p)o^l\Z6$oJ]Ze6J=mo,mFqg'>H7<$/RB6GD\!4<c0n3N+RLcqAJK^r,%N0ZBmDak^50G'rB?dA<T:os%aTi0/7GmL!E#nj;_&\e'%1'?">crl=fRf:rju/DbpNFBt(Wi1>WE.g@.,g1qJl8_o`2$GPmO%f"H!.mE9b)Ed,Z[#GCdHbb\%BbP%q`A<YbCn:7ddJ";['!e,`O=8k0AZIVrk9Rj2uDD\G?a\%%Hd(#kjpMTf7@W%W2IM`S_3>^JU2d-dKh+54ht9"p'CWrgf`9<rB0Lq%Or`\U44tHAHOD=2(foG:5Nsbb',A=BF<b2Ap`I"K^A3g+(RaOe`D.D#=Cuqc(N`Xo4fhXeLV(]Ks!kKin0>(i*q];.r883-qgsSh%=),gpmd]_"<LY'uE;bP.(Wg@(>b;W*2U^P/1?<()66!nk7V;PL_q&GZ!U(A.Mq;H(h[G6IATBjDU1jCY(DeOiI\@:q<-C<kNFq8a%rQAhAb+7U=PtuPu@,mGQf_4d[Qe[pWG]@;empBnAljYV^'0RD&:d1Y^f]Y5:N4n(u6p(`,S5h;N19B#_\;MS^S"_QZa+qhE3&BR[%%JZHpY`gLWP<D+-c.H_nG(RTG*]M^]6DGcT\Hr`qJ:KkNiu-K!ATeE?NCI;'S3J@=Inl$Wau^QQ85ULG_V".R`1Y;g=?8"%#sU6m%*m2L*=('Q(CcJ4"+1:&t+(8A<,OTH&iZ6'q^#oJk<*j9bdkbsuH;FfU[I=Uqb0Sl+C)Hc:i3s@2*tonaa3F%^hApff3r=so"(+M!%cD':rMnOr?Qmh\hDK<pC5/Nj3AG2#H8n`IPICF%Z]B/375)`piOS!I7K@+Z=a:J9hF0*%;?LLs_G-!XcEN">9\*<M.i^V!&b373W%=(`LC1_:hqj7L]nRr5pWbS1i58Trg/+(Smm_O#J9hA4-(iCh6Uo):ZZ^t(6\h_4R$C`W0'hjhcST`s?JlZC,b01529rApEsS4qYp%5&G6\2oq%!m%=1P@dKEjp<*[;H%Z(._>_![VddDGZ!TEAcPu66/,%.-qfRPi]"rjK@)$N^J*uc`Z/7Lmmi1W&%JJN\qrdsMMZ&"C%Ic"PJD6Vp#f^F1RHab4^DF\tqUh<2Ec99lX$I9Y(=0D13"3MPqQ_-q1nqP)J%6<1ZnqP(g-h9),(H40'D<TX_(,nW65!\6#L<>bj%7GGZLL<;Z)"3P3Xb%:bHAcqU9"4$j.Qcd8VR7eK^[Y)O.SNCaTh/#@4Cd?Zi5hTth\\BL*]"B2.AOFsjYe2-$ceX,cfmpfiJ@=-]%[b61PIhu:TGI4Mhkh6N4GI6eNFASmDTli-("(Br7g4n1dkL-rMTlo[g`[bn6D+!Wl'6tLu.iVYn2frmA.iVYn*h[Xm6gN;\`XVq-%Acp?W4djm/%BWh>c'o0`Rgh@OpKUm'2RKW)kh6MI2RMnb!Hk^LFgD*[ZN4XD!U'HR9^CDeeuaS5bm(Q"#+YR;0!-WC>$!Y)D$MR1%>'Jg'UJ,MplONQ!7tYtQkhID;14m@bSV/iqkTm"lJGAtYdj%=3Rutj2Uq@WqDale^LlqOGUqReIm7(i[Oj6,8K4@Z)*]C54,KUPu%TXH,jf.7-$a9EkVX.5FO(OK"as1AAL(u,9_b+5*[j:<mZj67@3+^ZV.P?N/k"$99tWUi+"oV5*f?)P7InTFtW\PBR"VcnS7WHs&b%X2-tIO7qmMci)N73%Mb82r1h&BK`NoH8[^Tcfq.S".Ob(!uj0Hp2_G9:2@;egT5&]LX#OoQWOdckN&J1Q>*8[=HDh[S#m^;\3%0l%'/+NTR7iU-PP`70Hr^NS-b!BBkm$c?otl#ql]6(,bN@l7NhP>Z6[#d1H?+MfCsR^qH?)6jrU)KI42H&&\Nao=G0\7ujF3+lg^2]$%*\So8LX#TFhQ8/,a$)6])qa>l`<2S0UWF$.]^'\2DS!h&m!t]AY7Adn&"E&kGZ`;\@;]X8iLN*@'1WN`_[i6@*Op73oAO%hf6:0M%8Pka;YDgAOPQ%Y1$r:'^UEIEY'e?<h]O-r`OE7RNPm=Z$b7JAD7,3_5YCiYL+S@cdh$d1>K9Y[EF[*q]pbkIs!B3)fD%PhN(^Kbd%c*!l.(2Q6UZRl]%YiB>*dUj/9YdiASLD7.9ZSuU)%m*nKCsI\0aLKur[+U<W/FN5p1),tCRglCLh:R8#AqM.&]9UVFe]h^m?tHZ1%%r%BQAqTA\1Np".fq8S8-tTkRFgDrI=P7Q<ALLfb7H%WrD:L5rU2FA>C>mt*KsiSnUtn"M2c/:gFRJZci0KMjDPXQWWGG$bpNWNT%/+VI2HX$.0n9=:6K0@i4V/H39lHaBr*)@QbhaVW4D=i(me;F1YT9maZgunV;dsghEY@AS\q"AUS+2Nt'#]Q0_ka.#,/8LE:63j)t%3eZ@%rW.oN;Di0=.Q8S7E/=q?pEe]$n[l7O__!l'%DK"nW>rbW&.)$Yrr20do7i#Yk^jZD2#bJ_^rWQf(i)JW?HE8eI/l@p39N2t%W?0[^$HMqK72&&;\^ESFOk=<_n9H5D[^RfJDnb&9*p*NJ$U2&)H.?-Va8Xe4E9T9k_.12_-a/NpD/aPFmP)HHDjMnjnG26#5A*!8%$+-osB3uE)KC@t`ZQ<]LEZ=VVmY_2UXckn+^t1P0pjGTP\]l7r0pfqAo"!"jQA9$6&Vh3AEtX&A#W\Y`"Rl$\FUnJi2Q(XYaQg^]%%PR!'2D74(q#,.E09+t.FQN$;Ir9>!ltuosJ5:R$Tm_"_a\an32q2)FjbBt2cQd-Eb%B\h!":'c:A<NJs),Tj76S,RiJN-On=Q2?%ApR_)'@Ebr4nhpIApZa.f]MI;?!A`H(+6"<R$=1#rUk+R:JGjOIi=gUfZ?@e3DFUJpa>"ir9cfBTfF3uqZV]lnm^E#+bYs0><8kV%grLh>Qni8a`TF^nNVLSlS_IC]]=BUk5U]/1mplr`:r%p8A=!d2$e+R5N,?D?+>rqBAQo/@n`Zh>)g:5r5hQ`sO!f)kj4rcZcgt>c%>g"Bf:Uu\PRB/LYmK!"o)<&0Zj55iE)#(E74aV?i,7KEVn!9PHpgmJF*'T!L3?OY867,lHd3IPP7gh"eR4og%6#">"hdZbXOrTo@%#B=JY%cjmYHZ!nmib9:VA5k1:%s0@-P6YF/?MD6C]$4VKA:uI.NdiuO5nDOI#!'.ihW(<iIJitfIQO>iK/:%Z6ds02;pb2(0.PY?%6,b8U$sS*eI![PN]?^3,`hk%0mE.;V)^s>.aB:_d3D]7ZPiqQ`Q\-]X5Ds_^,NO\BIMO:l:3YYjYg))eV#Llf%Y"_1TI4Qn/Y$!P%R"nH4naEBdD34])B&n7+a8%EkXGHCCb%2tA#9u!*GAL["JDt1])k>ZaI+`CaNdnf;E-!7q_0q8l=cN+(dtdBnFcl?r>QHeqMug5:%hcDE60]NuU*qpYmV2^Lj54H^tj.+kokB^I\'@DX[=.8h&Q=eq_lVhLX=;Hk#6d<.NqVW/;m$YA))e!.$K0/^Tr7be;)oOsn^"JoI%jECmNk)s@4KSpUX4d4GE3*#*I0S32rFhYm#`bO^7gT_g_2IKl548.hqQYE%Wnk9h^H5s[jGAs/Db2Zm5_8BZ:*G3T6cj*>"<bse*%dIA8>p#e6r\aFY!)>qdHd)nBYk;1<.U@cF8Zp&WM(M,AgiCr+[.A,?3pRqh1a,O?X-qEmM%6-:,:\DAjk:o+=8dV(D>!t3-k(W,(%[fRT8AqR/#!*cOpg(__1a(K;-S=EcaSFf1Hs4l`ncOK$/_#Z^n_)\-kPm9(`VQr0Nm_K(/X#r=--c"5l:H>me25Un$ft#@=ZC;6.%WZ'I3pY-LB*U64.&pJSgkr#!n&WEr(--g@D<X\j'Eh;%,gP[-.U&X01:@kg&5P#Um;>2&i^,nG"1+><pk^3'^S_MeE(+/4]:S-;l%XN<i!F)H&hl!24!#i0R,Vk:Sd`lX0)^!QA2+J7Cr15jlP7!q`]<gD3&)g#t=R&/(-R?VQ@[jNVnh1;HFS3X1BU4Au?X#`2F$*>Q"%';[^u=m_@_D:,o=Br\V#"b2g`B_!0kP(#f/pCe99.u@P3qbK+^5@#H0k8+XG%A.(4rrKPjm"m%Xaeq7<&"2)m6IB<7I)sP2"a9B*%cd!%[?p@LKF<h,5W2"_,&VmsNgF!rET<;r-o8Ba$mhl?+kF1EPh5R;[jg!K%A1%?3M>pH>b"l#k4lr\\p?p&rjeli_s86>Ei-^R`%r!/T0+$DSZ^rrM8rOjZW1T1(>1MT*@47EELAnOtgNc"AJlF6F(3uF6SC;52*c0*Jao+]\:348_FrWQ?M0=p[<MHTNg!rc->onpKH%fJfFt8m>W-FnhjQE1^d_q4aF,$?dJ\i;ST5U$)EqZ;NkVfC9"YCU:4j0igJD&[jlGlf_-Q`]i.iod-fsQf-t647Vb3s3-?"dHk;f%csJn*&6\[Tc`rHm8"m?)F9g:31MhS+5ir#7ceXrGkHXhG`!Lh:<;**>Yb%Q2H%J/eU?4IZXQQPTQD\O>rY`_ek:5T.k`u/\e3#Y$%LL0f&Sa%<?_Xng*ecT.J*%TIdQ'U`O[#Y,*;qZ4D$r:"'UR&Li;uE&Iq*8IfVVf/bm>(GNs7l$\Vg%V0o(&W-3T+TL_i*E$97L[H%QX>1=rk#q>*t(5@-j:alr.VcYjbrS7*(#SWJOLPZoWiXAD@8Ul/_+s46DGOF05L0d%NcMVh%@jWf5#$gd`DULfua+-AD&,AU6^W+%As!7mMjN/4d=<C#rl-HQHEL6D3QUgs\8bDW#,dW&#Y9`NFp3WO'pqld9<+-Ol@jaUcY-Nu[18'(2Q#eYA>n@[G*$b<g-NBR]k@Y'%Nb!!2H;J"nj+)'7nEL/tNW8RmO.Un"m`hYR+5Xd3pn'L[(ndKu]'36gq>&9bq89+M!rd63ZX<[rQZ(`.J,`:d5/!hj5JR$O8&P@:%r0M%N:0f++"82&=bDMlbNi#Oe\]?lg=`-$GTdk#ULL7\qg&WQ=(\$($D7_@;%@1"F/LL_A;J-4d[nGI8[T7`l*ke/2n0=[*gpVfE%&ma)+4hu-a0mB&@GRo2R)98D>?YE&h#7<36eWj^kIZOtTRg4BBo]Ys)K-,7-b90B&"I!\NFkGg.CK;G,luB7._oCq@VMuO-i6;Yr%B2&bY]?,Q>=NTT@%H=$t>OOVR0J;$gGbhdN!9YM7ZH4O:WVaq<s48JMHeeDul7btO_<GfS?7MQ]Z`W>G`Fqf@@n*tD^$9?*$KZd-%apL.90aT4/Bf?R;09N\p?8O,UY/%iNVNNm)!E5^ZmK<q=P`rPEdc_?$QQZ/e(@Qm)h^Qj7J;kCF!u=_Y_(Ksr@:KATHQgiYGcYcq%oR:"\<j@0u7u*)&P[,IeEaor695W*m-OUpqrTK17,QbCeU[HE81(2gei2Y'\<_SFPSEojM19E:_Q@b[^P%0[n1bqnm9;A-o45PTD%Ll.plPgf2Ki*l`p:.^0I+<Q8fi4K+Y87$j!BBrrcmfmBG0\8+QcT_3WRl_[`(:+#,=N,[eUu)2JPhAl6j_V]3O2/Qq'`E8(e.["F%rV=_HmkN[Md$,/a>lk&H'U`2`W_emtre9*iKMb"WCLBgE?u>"Id<m#;GLDC-R!?Tg!%4DFp,c<WD<#l5";mkpnc9`Y<YJjdZLph&%:oh8)9raL-;"72bXk&'@El[4-XFm2<Y)NgeK2jD4U;.ak=qn\WWj[iu1Djqoni_u>$XMMQB[j'Aq\-\ne@jpU?I4d42El.DV2F,#%oML,f<WshRS+be"EfZ*#>Y@:'n,]&[b>lXL5T*#DTS#(m/9K7-[LF,'9#5fWF3Cr+^;mW"cn\^'X>XNj-,c9)$@Y,07Z+!cg,BZH%7dm!r/:GT*%DpT56m4;dkFi00/EF6iF,mRC=U<TR'8?dp9a;bi_X7DiJl>:2L[UMre+X=sFo0rUGp":ch[.nY4SAQ!24dd*aU,3$%N4)%Y#H[*a8%0/JP4(nnll2B#aVmF:IE,GB.PTq^ZPn3nYmuMuCZ&6pD+1WsYsQ7?&th2;_;J0GOR4cT6&Thh`WKU)W-2k=,\%%m%J,nOkV0*N[/]q3.%WkUnNL=7'(R+:1(_[;H[=`et\Z5W'a^pRA.'1Pkk$59GOCD$o%1PsI4^/0)Tn=JKfas>0r<c96mm>.gY_!1W%[K.b6%uGJ0qgAH.0S+&]@bDaElLf6++$KhQ:1:(<9_kLG'K/%l@kUHXp3kK_;COnNe^[E7WspOS^dQL+"G[bXTh4mbVtFI0?jsSt%JG633jt5^?p-q.-c=:.sI3m3'jGJI3ddR5P]c,o7E)@^n!NlS>-p:(;bJO[K8<*[scQ8TrCt:nU+Y<RA0S>M.d3N,`FlA:]"%?UW%EoBn5HNBgoo`toKGh*5(8j4?@PMrpJkb"SMX_$(0X@7]A6re[tTn@UE%,3\l<M;,'!3a1;6![V<,TW[88$@PFV5+2Q0W9U=;Ek"M%g\0k$2QN8hA`EOncC<V,!?>/r>m;7<>'#/,<75KeVF>&oR[%ePfk*?>,41.aXtWlg`!HSoN:ijW'"W$l)Aq[ddqtun:1,m2h5VMa%!"_6[D@n%S1qGj3V6'_FcU/5NHr"QMdu,2n!O;t1J-57./b&642S6BQf?5%VoXp^>f"\kBn/Q=AliX/4oUD=V,qr2+$-@C$SX$u)%;&T^LqA>GU4GRpWjZsi55SNZ=':Vu9=M%E/P3!Qmi8E7WF?nT^]J$5c$KJRTbNsn$P<^F)VipI?eht&(5s&`\_F]T:ejNgs<M6H\%%EK;5]?nUOE_2OYNN0U1#CS//#pW$KL5C;%>4@L*VSp\aG@PF\7949f/(S<Q1YN1bN_-i#N:GLU8AN@1,SGdlgGB\jr1^:'leoDl%,/n-PNI)=!P?SOU(`dkKBSmXmjGE0@hMi]KW?/+\0lGI6!`=*V?`1f^,%J&?MDA'F5$4Rs(\H5fNkGoj7snZH3o]UlnN"#8CtF>O%nHR.R6U9'?nen6u)atMa%74NE5.3dH]eNWkO]RVhAW9$[)14dEd*<8+V<6:t8raC//j`)YK\iu8jcLYpT2T]0As)Lt')?^DTI*p=%/i!M2UZ,[o1-stn!gein]udgZ_=Zt8<[W0/JueUd3DlFZBEUs>8>E%$?BW2/RL#Pg88WGMA$R9CA/ef,IHG!H'_oMP`N$V+StKU;%#&M$&:%]Bc9*[..-:N%;UA!lOI\aF=^)Eo4m/*r%.2NL'!_Z7rJ?1#jem]q$SBPTa[$78!dAo%&.q'>]jt&o9,BB$Q^Vsea8.#)i%"HX[(6'>K+X>9QI<Fh'efC)9;g/X?a]Q3Z_>$njBEe&rCUp&MiaL_LV_k&UbBAl>b:qZgQS]^^q\lR/r%H_!3O'FkKEA(#BJ14bM%)!%"h\k7#Ni3<Kr'X(n+BVPY_#^''rMoO'8_&0Ug*MhQbJMq%/Z6hs/<[3iC9uKB`Q/7fc0-4s,5d(^B?p!-1]!aR@UMS;66$",^%PG-2=e-!;"OA*P,+Y/3pQul7i0MqQ=DYK<E[Y.2b6M]hE+#,gt53NEdb#"jMd8N#mC/PX0IlbAB:@%te2-GIflZFf]K^D%4UZ_]j%2OPcNeJsBb%13Ci?l<2*R((kQK9RNu_/pD`jThJ>W5QiPIG1pSbm"ZGA^c>ni&aGB,"`^\r0+RK%NGq&KW4>"N0&(D+2E)f9!`F#%[4nIfk_`-rgFs@^oRtaTgW?EPV`K]n3os^t4B5)h7B6c%ctX1nMbmEh3_<5L)Aem2a[gcO*71^cBm=9fN&R\O$G+(MHT+-L)+@*K%;kYsk4ql>WYqI-Ypb_Y&57Ulr-oUG,HiNcTK)NZCm2Q'Fe$a9YXPr>*E9"GCGle\-G6CiA>k5kGZgY)Zq5N)R[<rA:X8R9pSLB?$%=BFo*b`=G6OM(smj67Em[Q``o%2^m&$sU*3F?;:ic(ZR1TG&P%>?d9m#L1=F;U)`ChMF^b_(Z7C#C`JqP8DV^XMXqu7EOPdnn.Me%)PK7[QgG:lB&X8YZ<;js/;+Cmm=@$_5/7j+`*0c,LLW.IR.N)r\#\XNb%$',%!nX2_j^&)-F5Jp:;q]L:Nr1n$PP[U:I)\;7M)e\%ckAiRY.Y%\+dFmeYB5Ci8.$uLF7mIa!"7#i8]r$WZJKVj*Rpg.@+CDA*S/2gg\-GcR[O.?,)jn1.#d)tJfENafm9C)K!Xub=/!)p%":YG@1J"X;C<!#F'*ba'?@X=k`GZ-gN=Bj0G#5F,.+4@\Q$Nn4nkK;r3,-l#34fqpArqh.el1hG.(Uif]bcZX('TcD^^ua)#cl`r%;mA(o%j7[U/C2Nj`E5u%O9*Y$Sa\r3pG+>%Mk8aVlUm3u2RD^iZZ2fEZl-Y.K2+cDFrKj`&\*1(HkunB!4G_s^-gTu?k!<nIY,Ak%l]/5TFJgX1Z/I7L=;BoB0Q:u$=D`Z.)^qC0\qT)h$3PL-dI`6S1T81dkQ1u4L]aUt`mRgG0A\"m\DEbn)@hNU?G#Pm325^Fa3hYp%&S)^H=b=jN(D%:YX1\#mXk^BkHC_kC7fHOJ+#pf:DUH.LUEZGeqY5=o#$Z5YC^t6+@@BWV/q`/*nE?*6q$u=pQ@(Q=O=nT9:pX70%7n_DN0X*gk5]*&N5"sLOUc)s=,nJpqXVI.C<q_b`+7O[c8U997G;([*ja%+)-<<n(KSn%_2K.0;6&ioSHh?&r#9QI7PC>UT/lOT;%nnPag^*u%,$VRqeWX#.\Gj'I[h&k=[_9e*mW,elBn\u0nLS06Qo0maefqa3H8e\Rb5-ngKg'AZ<Cr;eM&]7d-:0Wu^QO2S@&cWj0%=HRRVMm7OQL_FV1L,,;%#"P@U,eLRb0Wu8_CUY.aLqu[NUA5'%(g#39Nm"GN'1R[`dP3S!35N98mgt3K]eaUY$Q)-0Eh%]0"^8Z)%BYQ0V`KsB4]Z%]X_0'1ti`blpf6,%8(,r*O8K%Uk'L5L>%:G%K<(0C#1:Lg>2hU47-"*n;d_TW%fF1OWFVWJl<%tTo@2s.Ck++W,%G7"NViQOZIeuD&l;@W`u)_TspiH_7?nC?[0G]sJK'nb1OOS_U9YL1Ej&?cZHHQrdCpedrU5^JN9aGXM+J1S&^Y^.^=kkgP8EUi;r%[*4H-0c$73TCE:V:$X:g:?!_[6.<9M=8a1L496ZfM"C*?0`pqJ=;,\`h46X\[@Y;l.4dna5I7NHA9kfqD?,=$2?r?e4a?VW`#O!c%p=1/.'n)(o;t`$-\IM*1Wua;g?->D'EjP.V;P`OkQH2;sMDX0)--g8Z-K.'F<PsAPgl\0uM#.02Gai9p"OgIp%Kr`5"P7qD=#h)l%C@LhAs4AQ+\!asOBmJ1==g:4\krjTHVoF[^k;4.a9bAZal`]"<%RQq/?mX*$8O<IO8Ui<F&$+VEkX>'i(=XfDp'a]:^BRAk?DK_b%#K@dTd<W:">%qsR7+=UaX\%rdZrAc<D#g\@#?C[r#.XM_%\g0I"KWW.:Am<\E,tK6Hl0d_66]PAkWl:&%FuH]k?oKk+tLI6JbiA&%68TK.VTVEq"\%e^K^Bo9p*AWKArpNR]kJZiP''/0o?gNEOTAs13LQk?Y`\3MVNoB'Z8oN/aWuK>AA,OHV>/^E+)Y+>,`3/^_*V$U%$61@-\!a7:65D8j2(?&6`d.WCd#e@Ql8qO%2(u(HLJ$/gQq8$smM&pu+D,R,e21-1(jm/)#.qcr2$a0%g6N`a$)j'^9u`q@:bgVI%oq">`Nf?k#(=bJMa2XpaWr'C.SP'uY9/t.qXom+U]laH9beWn>:6AkO4O8Do6U=*83\R$rY-_GPa4okET$3[d/rcG'o8=Wn(1P'M%?&@A;__6/>p2/O9Wa`3j'I5Jr.!:l*8RI\SFSDS$Ia"XbL@#UB3cC0[i,XcI&^YY(C_%7'T4o/o70#^>3WkZLUk8rHYH"JX,o_>6%Zs!m$2;%TC#ebMJZ`Q9Y(]#Vs<h5\Db%,A$-p%]JDCZtm\[*qG=V_)*1u9$2:d*n4F[69!hBb'+2*F3J'8B`E#^YiX=/-P+'-6/\%FChU9Zq[C_X(<[36do)li^1tb9JD!J$)b8.KDIsk_K7acR4?&:XHFP-gSm.3MAjHL9M_BUBISK`qCMH8cUs&I3f#Jj_C3M"ZK\aK%j$5Yu8;*WE1i'h%=(XAp)"@UG!8Da?L;V1RW_=4)'AL]J:%nX3)"JdgdQ1l=K.1;#JMk7(khpnai#Fe<R':$&oY'7?M$EH1"2+M6%G[srLLV#*gp!!b]JRMYL;tW"22G?SCZQ'DTj#dgY]B[dpGd'BE(JEM[n%Lha-r>0)lO"slQt>H:X.s/1?4[IR%P8>ubDIc8&.1Ze%2V>LY]0CSW(h#71IAI!,F;Q_3dn%HY+\8BDF^>*G5@t`HW(LOahkSfP$Kfc9K?ZHDalS6aX!V1C:oDG!-M8o<Ap((f8q2@a<H*YA%#^iP\/Zbd7/_686l$SsZ_7Qras'DDG:3KL[hk@<f.BM0`q%>Bu_&$kN9=Hn1%B:XrYZR:G*5K%\.J3==oO]YU+?2@_k2fl#+Hl(4%LmLt]!q[u#ALq:Zco3-+#&$+0!@NMdKdC,G;oKtG4@S#1+2B,Q/_Q=.KR=&%'k$B'U#_.LAqZ[JQP<mGD.QEDTSQljGUd*rI[Cgh%]X0dO&MIo-?4S*ILT+2uZ<h\\ha9C\Sr[&@b&Y>!VSY@0>Xc_,SZDkE.jqEWY#Q0@MfOZA'/>!BpOo0_8S_=eIT(:iUl-RN-n7;(%M8#3S\V7Z[D8*e+09t/*S@K`jMpel8CfdjmUOhnRFWC<^m'[%nn3rks">,gOA=Y:?2I9S8!CC:3=D?ptj;.q30+3OR5"j&?VLVU-%oaEd+&BW2;hZ(ci_rKqD4M]EsDV[Ik-)`/W&ZQ7p1LL53J/T\saQ[aj\BF&3`[maS7OK,E\)/uI9;6=dpGrt=^K5BWEYQPMXpV`@%o<!O'OlqP%72!4Zi'U+k8r53Oga-tl'JfeNQoQS/e[_7gTrIf.ChSF9R?KRHACSd:NB(F\@Fo5`g\6l=!MDPpZ+Q5`>TD/Ea%d^?%MQ.!i.-LYCd@a?05P=qA^kc*0eQ!'k_<4M*j#I/]:H.P%Yq!.,&b0uIHI$!CBIOP26bVF",Cf"M2/If!Y7iF"=]H(3C+'-_LnpH9%Bi&ITk[q.92"^)#9B#smEe(Jo'Ts@99FX_Lm!,am.$mW?>D0*)@(ZT2.hAEhr<p"b`KW_QCTmY&c"FLdY`ncI(L*=WZEaQsm>W;G%Rt9[98.=;TnX<fa&T!?(D)4;1a4T.t0p]EFd%$?CZ*P'bbf0B,;Lk5B-M!=!A=ES4"'LEgfDJIt%+H@QXrXa`>M;iW8rYk7S3'JR%gfi;.lEjMONTSM^5d;J6ob5+RS:a-2U$=2]Ff8Fi56VX\I+$L!":\9PDq3i@aXBmjoTlFRD.0`u'&HE^89FsoCoW7EX4B".?o(X]%'5`/bG?1!c4FD`dbN5Zf`7.I"#YE]kOc1'T^hlao7GeJ$/)-F^7-OC]:3Pt*&Tq"bR3(c)$p)7O5jb9HR$.5Y>j4&lDL_7nSXJc?%l&Xoi%H7gSM&m09g4RM;h$B8rrcAdUrUPU2`tqLjoq]*uC?siRL0.=JPt,mhpJlNITFu[)C%u<T;su78*rQ&.+9?gc1UB)_>UH+K%Dfuo+\>jMS'3@L$RjpF^CnKJ1>.`-(/gEC.DKS&K;ii52S40NC1V[m!79'P9$I5BB@4R&On76StEMDgSoW!O@3Z&*+)CtdS!EO8?%PRY,)=Ca`"laoPMou'gj&Hrs&o2pZp[3&/SR97\\@LtC@'__St3$(=Z*OAl;`Q(4s569:_)#-e?-b-4\8UuAD5;1)t!r'dZpiACP%PVMYs_$J[(IBa(5JG827o<NV:CdqAO*;V1%ZK<O.DT.o15a@;!Y^kJfgWiF]8:_a(l5uC6h#hJa1hC>)Y^(`*d1NI93R02tL@i/R%=7+lRbQcQUk;n/q2D]MND!"oQRHZ4t@%e;q=PuabRth'!]WuAd-gKD;0L<Fi<UG)9(-+-`Wr!c]Go.?204jYhTZ.b]Y/$e*b"K3G%?A'f!9sk:,,!lB7'O(nY<>&L],@G8@%,s)C$Jfk-PBK]Pl9om\oJ?UDc=F8-(?t0l_(apd94pRV4VG^HT.j+0RfZrjK-4.#Y^>Ed%I^D2+#$`Rp#`2\Dn'j9&XFsC/&hZGI+k[Q--AaS-if6?B@tYj9rbS?2iR-3dc4a%PO;i@aH@iZeH[lhqaWeO[F9>46O!7)5On"<@%*J,5R0(AC_6ApBZ1_mu.EB=8=>t%RKBaRDX`1o<"Non5\Kh5;7(D!(#^bUpVB_EeLS<#]7)Ca?1qIWufTCY,;Md-6ib.O.F#T,-;%V-0CANi3M4Z$D&l;__Rg"l8p53C)?)=dNr9Zu?[+K`<+Olr9n6i4^:mh/kum"fPLo1_[RKd#>-Y;PTKS4WL`<-3UkS!#SAk9M&kQ%+FSiF7-4'@7;;4bR7(%#LTEi?o>Djh]Z@(hm1C-m::I`H->K"1o]Ch1>;R8=Y+tL'9cF"&hoDBP9X)lQne.5*`:VY^^t(d8T]l;>%@3Z_m0n"9n7'SE1S<UN$73IH#BnthM84gZRaJaa?l6MABr(t5t"\JTFYrRN21j,6H+sR5FrB_D.@*JjKA1j&G"u3cQ[j(`-'5Zn1%G%kP"o",<fHWGaN$rgf0`)61;,YbA?bY[Pdc]jtgJR+8S5)XM9^kAcq1^A/M9u=-.?QZ!T,hqVfq\$O4$C,q)elLo)(4Yo&=,(oJ%gX*CLI6L-Ela#B'=UI7n0gJ%DY2ab#e69\jZ0'CO?oW,YidJH*eZ8X^$Zk66C#TgopAfD90p+-9*Pe\H#_E'X6;&%e$[_8bY.GLn%QY&N.$r/;il\=G(KhdG4Z!:\W?GVV_,F_+meqiu2(ht'!o<"l!T#O/"euT7IVIFFIe$Z:Y&%s#rJ>lEBO9i!DJ^\7NMdT"C"iS2_%:M_P<eAf[4j-6R>G#3'Up_a,o)b^e*FTsAITM%),nHb+`*QtL]+T+oVCVFnpZo+bsU1W*%"<`@37)5doeNKQGY7e3;WJGVLkba1^%r(5X`poUQtKmXlok3N[VIiJi;B_JCgFh$=]mf6CLnSV3,"H5bYG?*2e"O++IeRGejRssIY&($3=_dAh"Efe\q$WRpLf(a5<a:M`N%&KR8)-FMAT,Mjtqe8$l/68bB?B<[nuj/'!_,^tdW<m==@k2*597Y)27_AZmeks)]F,YN<0bU_3fX#ILg2D7B-`5tJj@Yn'<(&87p%bupKd'\+f[!A2hl\+DogNlWOIcW9HV,$W46Ars[W]HYg3p+e;WA.!5jVZk@Me8X%gl5=:ZTNk&ShH:%LogqDs_:Z^t7e>P,WRht!%*BjAsYjW8Hm5*>Z@*PFSQ=j(j5gFt5<15/UH\odR+<(etl252'i9Vl$M7AAGZ;;dqM1A^b:?*/s!?Too?ntIXc<WjR@fjSPX5%_<%I!,M'`Uj2.[&=uaVZ'oCrJ9q<c'>^a5BF<T42W`Ih#lE4;"`)8B$s=.=JuR2Vnc\3c7B*T2V0]A6A%X(:i<?PRD,8f=*D@hk6&aT%R_NK5;bf(Q*&:fu590cOZij(DMFq9aZaHb5$Lm.,1Y(7QHjXk_fqph-LENsG`faG'FBa?5eU`Gf*@:2J]T[:+qk0G0,t3E7T;-gA%/7/!'4rbe<A8LRXiD'c1j!M/1V3ne39S;^$XhYFj9`+T"%&7(P%:Ih5$='qT\M,#J\;Y.s^J7kp8uNL0<5eQ]&$W(C$9UUA[=Ei1%:XDp4SQJ:+I&3IA:/#Q0Z6#\`nH;WmPHkfiXK#W9@FmR0\A?NL*$thTkdga6BQ'W\k^o<nmhK*Hj+>OB%QTuNjWV(;4[u]h.1WE*%8Hh0%('scg$+r$`/"=D_'IlZUM\T^Ci\l>?+h&H^p4Nb\53EAYYT<o7+C(=$?..XSM*n4\1T-or%)ULp[Fl!l?[+8%6;ZESBAp4N%\Mbi'(#1T=h*Ecgi&kWQ;#/>RT_31Y>O/Q?A/uZ1?d/#+]4"Q"i^Shbe=pt%dbjSAC1*leeTgrl6tg;*DI",@P#<)FS#u)^%u0@!%8RZj8/521C`@aHGVD`QLd]7Yk]h3nSothiA<-m(#I#_eCk7SuE1m"f-n1qiE%agpXKI];W,S_9p_$M7$\QQ@+!lf@`fn*otf2Oio%,pglmJ.-a9U/+6"R_5e\5nC,PeI4\O'&ZbgC,$(2+>Kpj5eFokc]*L>Qgu`Dm(aFi^LA6!K*#dl7!:d_de!$cZCE3K"+S[CDZql\%l,J1&q$YE9EODYo:u-uYdmM/JE-PsR-iHM,M5s,3$M/.'<$utcBQdM/js8J0/itsPBS`tsgHt2(##-?G"B*eE#WK5))3Rt=Ahb%Z%>O#<X>rn#p,upPAFuKI^h,c1QbF;A[)cd'bR#ART$-5*BBkX0jA.scO-a_<AMJuJL6T:8Uj`*%7ZC&lHmZF+LnN/DWQ3(-&5Hb9"%V]b/_\VIFI$//grNZlOPJIR(!"+h8$hG%E.;-*?mI&2)\&RfoUbuGb2Q/U0ns.Ni'=N#`eC)t*V/4u'.m8^G'Yk#[T_j*!q/97#d%2,P_:bUc&d289G&2\?RpEHH9laS`UP!tAXon<:+%ka"2qaf-(L:;C2()M%0"`_M&QS;)47r3L$\%(-PISdqZ&S<0E3-(rmB8SiP3%j?U`A!afGp2M\EZX8>1:JVt4Tk%T[BZo`,nJ5nLZ'/[(<qG]$a_J(]Hs6u0O7tAS,L3F#8+D\OaR<sd,ee>&,/oHh.B2M!5%=!"l%5nQ(NN+lHF5@%7pNBr>W-J7B+$8(L-I8^HN6m>`2V'5*(WL/t_5nU%<:W?/FW0\H$s3O68]1JSH`Bg(6FO31@d@pT;7">mVc;[]_%Ci8A\YP/)=jFA4`ON)?G21un&a;s&0r<GMn%L7huGH(\kg^8-BT^$4#@/<oBe7T-5LbsW]QY2i@1<jQOIpqji*T1U&bi$C,.E=<k%:so3Ig$0t^b65NS!#Hk":_@6\XVZ*\E*(BH%#B%$JTl29ZViJ1()kDU?ncW`2;R'sTu\*D%T"TgM`bfA;SFPU^!"op%sDW4r,oJ?%[=>)^p*u4oBR]4d`7%g!Ckhc"Qq&;KN^^8h`7cj"C4^suT22<D16OHVadK&j]E/-g%TYCk1Cj]5I$qZIrK%LO'"_[-O`M1EG7%AF%%FZP%YIR(bB7mb6E]R31"P0fHYcohb2W&6(YLG/(_i)B0J;>]p1Uh2klupn;Aur_ag"^=%k#Q]S6Ut#*^ue<1!$&\Y$95CJ`Ia<,%$;d;f=Bu=!,^$H'ZdYUCFt.Jh_O+^C.4og`nN#6LE[+Q.E47[0Uj"3oS&V'h"#][RBpf2SS7@pu+k>tB3WhC63QoN;aW;m#&E9VT%+JcT'RNNVk1QeDiY4UgN2%>Q<9^]_74g8+FWXg#gSiWB&%d[;48:Erge,!<PWMZNDCheh)at50G?s6ShK.e?nc&tJ-H'G7'LF<hs%X.fb'k=;!@A-aPk$9%FUApN[WK6,;YO%Ud<^q"Ic1-/7n1#7q'3BU=>+J>;CMA4(r'odUh]Fn\=H"VXD%0NW!*9$;h[au?O'f]-W%N1u(DN%?!h.eB(6l)H,4QOH^=[VC>KAg::!,e*iYHM`u]>%YhWns*.Fiaa2?r;g+3^)m_J(<'mL<O6=\p9IW:e!Y<s=o.8i^6Th;%_N`W1+Ni*/A>4ga@PWL&JUiXI#-YmoFGKeN#AB8[F1C/Y6;j.,Un_90#%VM>A/]+f@4;9=I/hH#G6E^m5Z5p<B-o:oVrM->,X00K%9$^\'F*3Y;\<9fn00*sCV<q545,I8JYT$>M/00iM%*9'6RXbuj77)1mC6>f:6BVgLSW`IJ=_JRNA8!s/ckj[6#.c])@cA:D0O8;q%\6+nsc96<J@*O0YK.LN@LXa4/,%fp2,jEa/6)^bb:Z6XF]kRToGuu']qO!49EY_8:)*n@<$;t`'"]!rP-Q0X+Ja41NDE%s`)q@eF%aO4c,7'3^N$&9'Mi?<+Br"H#1olbOk(Pm&;[P_t;WqBFZ_3(-:Wp@<>Wg]ZQT9$/+@RS$T:g4[Q]G]5?UWB`#7sdU:#0Nac,"8"a%FCon97<%lGF1ETT;KQ]aYW@/150a3s0lpbV3Lsb;=!pX77SqhABR59q&*8.<!YS=>mbEuVJQ8PV3UA;AVr6.q?>qA*J>ZknFASd#%"^e;['iN4ugaB9?$qM6W^gi'\[ARk2^1u.>C"Q'8BdH$rgEPW`?%H$d_+]s[,b8Y(3/s$+Y[79C:0E.->nD3V5-C;THrr*2:VO';%=AoZ(,(42[-m5$k$4NVaJr*\m9*e=i]ddP6(o"ks76#FeVXf*Hae<?`.b-:1I).lsOLH,h!2U&0cAON3Cc/FFDa=VCeCI4q(d55X%W+6STl9J>A;FUo\B+--DKOcHuJ6Gc%_)VoW5!"Lgm3%2q])ZJ'+&'J$UGNS_llp0a7[13WC;NnWL*Xa.o"SjB%7srq7B;?K2]lI&%+^,SF4O,\th28:5Wi9Dc7'Z:)/gc)E>`TKZ3_pQ^fr2Ja_'uT%j6[EfiduagFF/U!B]Dk(;[%eUU#=l:a>Ze:@F]TsAPMYpi@L@O%?gs4MVQBmm_3mZf?['>Sg<PV43C=C?!'ND^:m[X8:=XKi_nNg_7"%#Ji>7KNT@m0@bR)u>IoU$`%`H\;jVt([2pBXG.D/O`#rm^-%HQ<GLW0Vg]e(NP+3%)AXWE1U'<Y9r?e`hdFRjk=Zlng*G2Ue<Y<*b_LC2hgZ[l6kZLr2(\=G!QGn&=XjhZmX1XA:MuIL-n`c0h,]%E^7V"$<1Ntb#^1+fhWoSDb.o;gTA<X^+Q?N)5bdo+_P*kS9.SeBpf,?Aos.>4Y+`DN)Dld*@jF;K.CD"M2pkuX(nsb!)@&/Hs^L^%.eU2Y#AZH'n5_-L.8C;enpN5nh+:(4"X[/CC?h.@]rU\Q.Za(^*=*7g5Eu91C9"6nqs%2XTT<^-8Ar5%VG=SGd^`tc@:I>#\p!@(%m9<kDB4\O.'EW#3-Z@Uk8m4$Q&,GlWfXt&$L`EJ'+DI1L5lt"1$<sU/="Bf+S(Jht0ii?f.nKLSZdY4j:7Aq0^hXRjK2TiJht`t_%o$f(\DADuR4/B#E#ShX!>>EIHVLZsIF-afhS1F">:fnJOateK'p[cNSL.q$ti`s8F;e!*jO/HQkXHWbg*PanMM(dJOT(#m?&jau7%2_q[Q+r;C;9(^uGNOh\+1kbscj+<ZKMP<K)\YKqb15Ju3g?DUUUP@3Q8r\W7ZcnsKm)Y8QbsoE!raCTdVnkFZ$_j":(RqM1Q<RDI%^6CTF>[_TEHn/g@),rIafcC[):^G,?i1SG)Kic4Ydk%g4o,HndRNFAVP(U5sbM@9.r.[:X9H0B,hT>hAWtZ>*3l@^?CK<@Q$oCk`%0BM?5bTP\8GsP+h_A0P+eKgp+f\P-Q*i[,J.$=#)=0(!Zdn"G6]4PFS+/(@7iRBV$i?jpD2^7WWJZB?`Q(Gn0@2i!eCLQb:9=4sb%1C\JufH]ttn"k=6(/CQt:JcSNFo`CU,sA(a/Qg^7WXijIR2TZ)X44Tm=K;(C0t3(/aE^[?C:l&q$2>sC:&n/Q%[SHL.>"Q_jI'nW%8fB*RFBK5$Yb+/]9PZ0o`ZSjss2ST:R>;pK<66D;LM_4V$c2Q[F%,^n!n9nT*-%9/'=4Qs.jp@-q]_/Ap!q3K-thUf+:emn6-5"5%j<^CEGqq6M2u5t;cQteu[\k^F^ZQq'mA5Op?j^joTuh'3%P=WV5kUAfZQPC>9Gj;649N't>/Z1C[3<boqgB)-W#_Xd<7huB;s_Ro%ZSkVb>,!^nd5SK[,CUR\g^"`.>)+LeH>G&dFO0ktFQgE7r`=tHLYbqc,<;<up9#E6s&Z1].K/s(?`Tnk0hjjFRD3K'mUs)=bsIis%S/CJIbV\QY+b7"/rD&L:1)Lj]BGq&#D+$h8)/M/7Y!Y/o2ir=*]1(Qr6k.[t;6"fL*BL6+)fEpW*@S%JZT)\5CCgbG=YDo$m&ZF*%9-ZY@-16J>VEK_6A/:>a86G/hjUR</^7V@8d[2Gj/7u@$\`qWZOapKUc'1Xl*97s(/]/F!0d$tMC+f6lZH+$FgTlgYB/YZEM,RU*%*9upQT:ei+'ffKaTPS$IU=iab'-kAl&F?eU5k@UA"0aAGSIpZdcP="&8l,fGO_&lJ,rBm072E$37tILIDJ/V"C?4ruGQ^^K1/k9<%ln8]!oW&L?6>U.h`f#)2_6!MJ4<up^4KKQ"Y7A$HltOCEW&nBlg]iA:5`]S*(M]Ep+pl*[31.VYIOpEkh!ntVG]6"D)$nc4nE0Z4%(PeX@m2ThG;dG]qU]ehTZUP)FmB^n<0V^L(9'ZJ^:20"*K"]fN.2Y>.C6[.oWIlKQU]XYd6,Ctq\^:C%c6KWJ,V[JY;USfQYc=$e%Snb3te16-W_rLW'O!(KP?]&l!MpE`<+*;[fH"Q+dFV*rsBKB9#G/^1&ce!:sO;[g7O=IL]Uk)SV496\*k=e"`(eFWo:s=eo(?KJE%"ehMUSQ'bEAM"Hk6S2;G$BfmBJMZ?"E@A2PQM;HI1BWHgi*j;?W!&p,k)BDn3*gTaTsN:42MGdBR)'+qp;JkF)Q5_r57t=+;B]FT%'AUU+;p.-:[![scTeW'oab*T$k&#+,%t;M$KumeLo2Q+==P$r<4jl'#!J\BN5cCjE6QW*S2-V,ikq!L*'eJp6$,ipNe>m>!8:.O^%-WjJ(PpoYV7?A4GYTH,.#i`1mD3^%KQ6quL@f,4s'!n=#>#ppl-"257N#_R<Q-%7J(qQ!rLeCumkXH\hUcWrQQ-pjo*3_jHpG/>o%R<^2Aj+rnq6_o$P)M*q+\(M=EM,_mfK9.61J-s)A2[7H[OJX*Z6*8]N)`mE:@&Bp23<C+Z[01Z/8tX(`a:r9R$SIEY7U\f#0r(-C%%P1gXFu820%[`2tNg><1!->O$)$M[<9ZEh3A1j;T`o8S$*7m\S7UB[J!ouV7IWTR!i!73>&5:!^K%Q*77"j\k'6[kBp[FU'p>I,c%"QXmP2Fed4P[uNVHF3#T?4NH-82WPhT7uHlV,Gb6(lE*#&m7&2WF8Wr!8[c[A$S_bISK;cbPZ[Eg5fk4U"cQD1$ZQL:^Cg;`ahBs%5nmapJJ\'>U8C>G^QF$r8?kYe.k=,=/fpngUb5V&Y@pVL%BE8CN:9]JK>umVcrg]$E9T*H2In+(<7fV4_kb8-%g@M>7qUNEaD$1S%e21>0n\^haoBP7NAnA$1/QZINAg.8N9Lfd-#Ct@FJJi=<&-^#sBF[chp/CT2Wu1DC`aUraAprTN,n!]-H-$O6:p#Et#CigoQplRj%3s?jeAi-),<oYR&n.#Lfgl15)r?=!]86n^dWk*XNjqH"'QR?Ad*R3S=JpHFrR1=Kc2;NqleUgG%X[a6[^5=tMW72Kf+uB=#%eSaA%pW*c3j=G*[VN2HWjRco##7@c6p6d8LYr+s$^r;^l*+r.>eSgC]s(_7^RE%BidsfMOf<eh_)%&^7%WLW`WJbGo$4\Y%Yhh#2QaVkR%gQ#3QblS6JOqi*^Ok3%Mgt:kMTM+VoVFSNRk&A.]_.tR:b7*s8Jt5BuJf+Z#?SDs*M7,lR\'r2^<C!%M+#>7'4$^#3bN7r3Q4rPL%LHdf2s'B;redr&!EI-]+e\Ppm!]:Fb4K4[*KinO'nWr"5gF`$:/G!:&@)2[;*aY`F'pk+?Q6KEHa5i2/p1l@h2m\DhY/YLod8@+C%$d!V;J_u76/\0t#S!LA@QX_hpn.8\HG.mAJ!7)ihd'7S@EQ:L:We:Ae&gA'sk]^-..nfdu*j96@cieH(=\Y$CU>/NFCLBem`\E6Q%$VFJ*/M$n^6ft\Mp;nM=R,,/Jkg"kJB$TXthb+rA=l<Pk"W)*V5LPdDrDJK+!oQ]P#NM?YPfK`<XELlqT\N=3(nmebGZs5)BJi;N%]]Zk*#pQ.VCI272E$5^[Z*rpr9ntnY/1X`i<Pc$IKJ)q?p*SrMO1Z&=qW+`FHgm[l_<gcXYb2&VGXa`5%XaNn_-?QF?[Y,?quiq?%..GK?iq:X5L`7+A0#6^a4B!T*LB((nkd]YZ\]a%LC:>`1H?$&#DO8J=m[3ip&nV3.`S_o9W+>#CSTqBsqmg:.,32KR*`SqZQCX!F%\9R+4J<"s0V._7(/ZNg%*uYedcTo:>lb.mlW$*<1Z[TmDcT#.jlY&uM!2=X@>hse>_`KbZX]-(UN[#;CLm"Z%aGoh\N*VA[qHHQD%RDH3"]g5On.$2^PR4=YW7Y*-b$1>I5=<i::9Uiko9EN4Ej@i6K.2hRi<qkj3aL?jn)*jDuehV5YM=Wl_pW1lfPuq?6o/d+k+V_NL%(5'a#"ndG@2!(Q3*"p;R\$_L$Rh?$ERAOS%/kItW]ULoAZ:2TUd>,@iI!<iGaaDCi$'EN)f/3FE]Qjj^AAm'@3sn*oUn-l?Cj7Y"%?j\B2*9D0[i]JVSW$8*Cg-[;`$Z^2>)4UtFWXJ@6^qUS%Hj@("FFHq?Z.$k^YWk<Db//F]!]0JnEE;pnJeF7:*gT-b![I%`63n[P%+5""@D6+#mU)c/T\l>d]FYH%oUu?)X$P$m_q.RAXetE[UAS-7_i!"*6j)d^-;&PIuK:''JK+'gNbB8VjQs)q'R8VC*JEat;eLaF5%=A6@IF9>ALN%DrF/?2/I/O@TU>T@;]Yml#VCc[t`9eE6Z'>VZq2hg*fc.X6b)hS.\_@U`2lZ$0`$/Xr18oYRUAiQ\d#.69rOk5D;%A4<Qg7!OhEWbTp*OE?g]Kgh4*lKgc!6@$Bf];FPPUk6bA?81S7Js:eiCfXlc2:P;r9,<`7(l+[#<1C8V-Co?kG4([:0Nop&CNaI\%J<EZC:#@AubR/0j@B!-SZTfA8GW<k!_;UH>E/L^_&1^&16KU1E$Ap5nN"/[Q-CW%24"F8M9r-O?a-M25DP8on&?aV7hA<WR#^DOQ%=MX3Vb_!J3O*ZIU/;Ypa?PIsq^g.G.$/NI7BBJ6B#Fj0<->5cA;3W&ee<.0MERE'7GiA!39V8^T<GoWpG+:(mS-Zta/[.olW\&h.%r"Mh=O/up($^TZ(0+qgH_AGV@eJaq/$EmSih`9B-U+u&`6%V0[]hV35A(=dE$)LJ2GbgRq<_L^XSagNBBUU?r<,55j;2ctY!=7HI%/lf<0h;n;eNeIsF`++bSdM,TJ^r@G@-jTLmk?'fBahq8],RVrK>GC6@cp<qK;k/NQ+=^EEQWQhJZ"%juVp>J<S"\WDYh\K^V>f!H%KGD]a8N8+>Zp:j,OUTX<d.MaN$&Kpp2?`_p!`nMJB'B`HNN[M^)'MDQX50YL::uu=l'n84Neft+)AB=r3bMcVIO.UT.H,e[MFf[c%&[D!#AuZJA4J)'W6Yr0Q*?;V(9`L%VeW:Rc9B5>pe2o@,FY`n9[ed)>[8o0#iA/3[P<IDJH"Q'W_0AM[GRi.f8:2F<LM9-nEs01Q%^j[luPLVNZO:1'3bsn]nV57NL:'[IdJ9\Ho!%TbWJh7=>J7D#GHk`F%ff[s;mOgba8`c`WQ9@$^]<ba4FX+uHN9/?4W!3goCD?iU%("f<dWi!C5/DZT?hZr&7qdQtg3Idu4AP,#2/ZG]FVbdlUifSS\2PV2Q=-0O6<11j).*7#c):!Z-6g-3aAZa9&*H]rhBJ9ZU4?a>p%B7hI;JFSjcOg^Bm"##RB4!UD%nc_WN!A;A3-!m,""3MH]e\9HA]Vu:nRYV%Mg_j?jbL9\\9H0L7/@Si`]B$\*.tA'mGC,s[l"Q?@%?_A<+a%[^R&LoZOP@#<^1T-UmnOT^I;K@Wp@1fmZW['NcDQT/IgeH<Jl/u7L_HYjC9Ko/s?=dX8l2(t(#El[ZBku'D!'-k2@s>7J%gX96m\73fKAI9UcC+GH$'QXe.ZN:kSU@;f;(K&BrC%Wfo0'6//(pLScMc<B6P)L'n0-s5)!R2V;<.Dqk2iOS3h)PMd$67[\WZ&?_%244`P1GLobMe6i0ES?]blDH']-T`0L5R,k%noR$UVU<`GW-;@<60U.J#9cF7cgmXsaEXk-fZU[^MmZRGF6,T$R[6$V,Y2!D$p:l=%qK5FdPET]=?iVeM]aSMU/X,!#VJB]LJ:3h<R;Ch9o9st_1!ha>QLAM`i@UIS4G*+HN5]=u%!;#/G:Zf!gd\LL8/so^%L(M7$SGOd%"9AVKn4XA?5rSE<)J>R]-#sGCJD&=']I.&ok_IkcU?=+4hCMFD7Kd4U7$U0QG_A@lk2p('L^q7s`[1AI8'qUc[l8qBU=EIBW4rg8%^ao@IX*Hf7QhZa8[(2(<s/^("Q4V$P;RV@NcTI4(.WLXGE.GAA,!T$>9gUr,oL`:(;GK!@dom05h)_KR[@4h!,q[-XTN6"aOC\V2%e@nSQX&(tt*PcCBS)KK[l::3[gJP3rTOMF!`b#eO0TqpH*Ho[!q,,fa7_U=L]Od@tC3(04YiTg-Ydgtoh9DI8[*qQ8H_&,[ZS-&l%%L$sc=Pd>427"SQ'M4D-NP-C_JLK`MPNY7?]VB,l50<^7jb]iN0Kd87<RUHsg]:rYVQ(E7)M%Qtk!u=j;"4I_rFjb$@n+Iur*7&p%Q*VDmfEGNaZt,2PVM:,DeeN57o42C<,.a1aYs;;W>Q_9T<<u5kY]2KM1B$9O=XbcaTn#A6$BeFtP`#e!Xfpm%4*.`L.VD4omPBc-%6TbCa6ah^!PTijrr@#(P(&8+g8FP.]duG);)?Fk**bCHcNF"D^Rkn+`$3?;PUpOAWQ)N)uoFun\W"-?MZdp:cVFsO2<3Z(X?HS^^%L9hUSh63]G46M?Kp)2Q5.Ck*P[i%P>B?\\"WR`Y=LJ(54?j(bS+RG0sP$cjlfu=5a)1#4V]S&@2'=&cGKn,FVEIlaP[MK+p"%&@M%RE5)M2&A]IeYG$B=F:[QafOb0.+Cr"QK$u-b"8fcA'P<gSdhW1*g#E4V=&lU,1OjF%CWqVi;%m*O8M.W]%;(!$j;F9T9qJp/5g<>%.2]%@eJ\PZF9]Y,3"-P5@u"-U`8@0%Md#Z'DOId./83b^Z[']uS/'Y7pZ.;,l?&H,dHP8*TACQO3W"'JXf4,8Cg4R=WhuNM/?`\P%LQ]$5nmk5<&4%ul$KE^M@U`uq&nMCqDUH-q^BK'6#Ss>6[N<jSj:'>5$h8V1J"a:h8*H7rLW.D"&_N*l;7-gl),gdI#$HUm8>0-t%H",&sJ;Yc$DDVr@Ets@JE)th+0!o("m*[%)aiq1M/I+0Gc5iEJgUOn0`4C`i3@LW3QYirP?'N_r:-4fJ(XiXLSK2:Lcn%V!KW,&p%U-L?_Jg;=XFhF?SM.):44qIkJMmMI[SU#SBdOFb!`[0P^(+NmV=o2Os3&.X>8^iE'7Pb80fR^*p(hg<_G0ilQgR]Dm.Y4\l=Z1g_%KR)joM/5)*C)V[HMAudH\F*Ek@F!i'O=Y!\?W8t?(?Wd0lQ-fAj.<=#@FV?0'7`@n?T"kgVp,='6P^GJ$l,pH%g?OL876Dq9ZcOp%!`]2]s,\5\3..s#?dZ/af79d-/CcC6CC#MKU:G_NiXh%*"%G;OZ:/)u]M;Up/OlIYHPN<dSM*otCZq67[&t=]UqKrsnYuDX7CT75%N$c2>Xa)">R$l9`$K>5k+k#)rC!!j5?HK2VM28Q/p`ATG>,nRL(4,kGSrDsg#F%q5G1sL^4fh(g"P!u]0M]Vle\%,!RlZ`oCE-*I%/Lk2$E/>`9<Q`CBo<ra;bko]8!4A9'4\cK[R>QJG6!V#^MBiQ[DpJ9UBT#7le%E6:VPQUTF%\>.^OCRAR^WFr=Zg^*Xr]ihIN]CP%b>@!,8YAXk:p9B!MF>Qq.[im,4VAo[(YcbqfjR!LVA7>rXBBG/1+TlBC&2(O^Wfo(f-Id.!X<^=;2^qE21H^=%C7RmBXufkKpX`\%P+fG'9kZg*^IYP?Ht^@GIo-?.47*h"qe1GN1mh;.76..ZOc'Ia;bRVl+@mI^!L('G7MER@2P7K-WA^Q)A0)Z:e,q:l"Zi'i:;(fR%UBSichNBlY--K+M*U"M>Ak!`T_'U=7`%4R2[c#qmd^EW!&CI6@>./\8of>"BV#gId2Oje9\4A@ZZP@!2if[<:'dR0r?!Tc%#\0Km%D#u%PAkm\$orBqO':u1((E^kuTl[>>'eQi0b4fampk3QN,HHlnTCiA%j=gS,H.)F)TUX/(Vn9o,!KP1U>KBVR(.^LUa:haA3o;A'%$Ct]F4F44SZXbuF*mA/\(?r8k5o2DR=bO@b0EasHE:;36_)-ES!Rh[6n'#!m^oAI,_6a=9\pu]:a!KNhHs_1VDjFqbrZ80g6aHWO%4\@IB5ldua4c4?U:rtRc5bhWS]c04;B/V9&MZl)B.@ukMO0gO!6d95qB,o!dc]W5W(iYo`^teYg1e=?>@T:V(]?arSfhr+LAE%a?%CJ2HnS-?a!P^>;)ffXI@RncZ5('OtQO;IrFDFq2?(`mf%W+?-)[\ELQPd3Gt$((+eZ:/)i6)Y/K8ghg*a&oRUgRu/?@h@+`_<]eH%]?/P]IJO;r]#MEc:5un3&F.dQQmHaQ(*HR3fi"X=Aie#GE&511`+'S=^&[,8Q7Y0`\*RA$M_j.O!<e1?GpksQ2bckqcU)j$#[N0[%Kn,9_o2N;]D6sjO<P@3C=L6DsE8nT)?,4aTe`'%-?&b9k`6ugA(bX#MY);&['!W=.9GscEN'+eM$&m<_)0%J9"@nb8=Xq<E-=nN8%!a!?k`pj]J^8P0K!'7d(>88RmK?k,L<8\r^Gc`9G#hGV!\hQj"UO8\-0$MZa&J,k^/?HJa@kMK+[aMuCFH\"8#6BafZs!!HG?6B;%X3@U)"GXId+GC(%&H\^N2VMk8]rDM+8`4>D?au94!+Bn!a=G+m77!?M2$R91412s<&.,.i(:PM*7#`rh1^K',*EDa"G7"PklVp)k%UcAd1[R7JT/Pj@gW<[n&U@*VG,_Sd2s70'm:bu$jgObqparW<7?aM`I&nkK^-8IG4n>UBJA@)>L4Y2e2klcSKCN==]$uC(8,k@<U%9?1etqS\"8ea0#"H)!;3Su*MH&#'-Hd8==Bm9QMJR=Ns'"rN-*=dm)+AA:e=We$jfX&R]:BS#$Z6!#bCNZl(fjl@Ob&[3IsRubpk%&6Q'89jVK6_RA+@*IJ9lR3%\-PF]#Z@:u6>lIAkbh<](P)#1Q-Tla,4(o*s\f,(/+M&BP4pt:I\JQYX+?678u#*G]oo8d^"60nos%c5?m_Q6,.U-*Q%W=7$tNcUgn\QpNTZR]o:<^bmp]FEL@mA8)ls=092S6+et9h-uulVR7R-*5Rk<kjfDo-eqGSm?ToE;=ZW8(T:MA%>L*-$K=5[,l?Ysu9:=/0Z=Z$BZ7W?L1fgkSV]cTRLrXV/$j'Utc"b4IM!r["#/"5c!!a3JKAE2#bPY>AP"E!uOs#gI0oD),e5'r1%;ko^m@^GVPV(SWpmJqsVMOKbJ=#.VjL9+N/`2<ogM@PeL3.iE)!4-^UZfW=N6NOZfdu^=,+-EZ;H5#SZ+U)DI5aVf1&t)Dkl36Vh%j)_+"i'L>2&<8Z61_iK?2Atki"<"RW#)4HW;?EB[MOLo4=rN*_RCaEC)FjbWMl0!"V`.P6[qO'L9h7H/R)oFB_*pVKDf4]\eY9$l%Pb>`frBaK.E\i317RA!`mMT?4n/0D-J]B-Wa/t23W6UsYI%-S6b&^g)a?GVq^-*kih430=X/00.e5RG(hqG3\jdM77G-QrZ(nNmu%K-6A;;@d#L-G4ImN%@6G:p"8?q5(OB-hOCkSN^Q>@P;J#cLsqX>2+'\5`TTcJ>b)/ehYi[_k(p`@U7%reu#ROR9rUnoT-DJdr#hC%*R"L];NmP+03Nic;m`",Eu#tM`BjS3X)jn*gg[E5h<JO4$<0qKoYnM#FL/rl6>EGQ.<.G:"k9-Ba^gG)Z*2W_]Ere.VdLbQC_jNU%l=l#O0W5K$ALNYuFKmnt'I0B2T^e[t\u*g-N2U76X?7gjclBh(<_*"d=aK]H'TX79cLdnJ5tm_o93-o56qW6,As"&DTGA69%NPCX%l3ouHF1/na+W;[Q/Xt9&As[ks0&Tmc`*R_erUPjt@%m\+cY>=aG#=?FJP-1+Sm)Z:D@WpW`)>6#OXIA;ASeLgPV^UEkR=EA(_#W*%Xi3A,<4pPrEbR10JGD"NU7Boi(f0!*Y6Jp%</p924j>>$8$Z5pNLGRR?7)]jfG:3_e>jR,?2t!WD)pZc>)8_q"u],G7K'i7O/UTq%CeHWgCKiB`FM=)Qeg>;*#/\m0DW]@JS=-B:5.<BuDODpq<q[Q3?!eNRKQ4!]acr9_4'Rj%U^=Sg>Nt&oc&mZRa]=b_Ah_m?g[@is%kWc,`KSZ6IT&]PFcRk&%8:-?N`g/>Q`Rm*%+U1#%9R/\`1g$[#3]Kmmc'Xp6q),:8C<7oC>9ja(]n55(;4nLJa7g3@pE92kB?M]#%()83J4gLn.i%@s^es_Wk2'9snYD)G<VeDB<MnPK08M[$JR[IJ`;'IsJ?aEO[qUH?[_)G$<a6pZBJ(h_CGH1RQJhWXZat7E__m6Z/%G;6(P##_A8,$+_FHZX%Gn=1;WbZU5&S1UtXffMXM$H>]U+I-RTf!^=nACOBult#HcZ<YkWB1oK>"h`qjEl4Rc-G=-Q?Z(c8KhBtK%(!m,'HH`[_FK37]@sM3?GO$gU8G3VaoGVkEB7?P#N:8fLHT.!DVsm#;Cj_Hke.Eu.$/E`jYplG',oQDpb^*UEXOS1)R03.7#'OS0%XmBg[U/lsu6O0j?=#5'),pCnLe4]#2">0UYU</gd,oTEDna:.<C05?WW.k<_Y\hP:cEM//$ZO+6<"RG*?78OD/;Y3UlaPhZ:W?sP%R'/j`14&8B6bc\VW,&jf_.<fr2(N7_'isiC*l9dH7<-BcjN=55SgO+f"M!qtQD(=g7E^C(9(iEDrJXo"#\^<1S&'o/a[g?:EBO6*%?C*@e`-RctJX3cIpau'A[-,efZFXaLRlFlMK;bW]gC0G4jsectI6na>_8TPhCt]#79Bm;f=CrbGDW[VX/hU3fAE/9A=Cgh7]Vkpo%MD\%q%QW-3St=2k>A%FB0GTmRK%Y7IWR(oAl\Q>=.c/AC1YZQ5q'VqkX\8qLZB]0FK#T9Fq*#YYgQi+i8lb+!"$qm8Q#PrY=<S]`%VX))Ee$QcE'hoA)7T3_2F03+7p!ojXTpbGGLs0qD@'K>nDZ?8Z_/EE6d00g7\&_VRX<OT"afF92Ke;A(.$f+H.Rj^I[#>>m"kZSM%jU_o#PusC2r%OCmFf+OZQCUa`jogM<=`oR7VM\;!V^&<E+MA3W!r`o;e>SHY_V?*t!!6?3_uhgu'-RqC+"E/1'@9&K6F#JH2KOfm%9A@rI;tp>:F)"p[03".,qdL\DiN/c)A^mlK0X/e@<QlB7`2+%ZK*n7j+3&00MD:Fb[j''(QVF`LWl/bL>(e2eSQP*]*!()'PpR^7%Eb(&._01ud7*e^6H*cSMc"^p6iS@i)Tgdnj10ClQaW7Z]d)$Sk#OQ<an89A5MlqiK0W6B6M#E:aSS8k5<\4rML,.k+dkKA"/``i^%rZRu1=;)@%JBZ^&<_uN`).u"tMG3,O-7i%($$T%mp5Icmb)UpJ&0h#0%!cTNaUI)$aY+i@R^6toB!F*"1i_:b`R.h/ULnDgd9@a\%X<KuF=W8tfZZh<TCBb^_`)'?5'?@GjmSaHoETQ7b[[O9PTR$^Pd"<<7VU5h.:+t1!p$-Y3opM\AU=IEdZmA_OSLiiJ%82ObB"e;#%MR1JV@',>eWR6[><;4eCXl]A;Mrd[$AmL#9'3ptcF1>3XB;RMu"nWX_]4!o&`UXs9BBOf1ju7e<VGNLZ"cUe[/=uGFheXAQjm8;e%`>Y1n&$Y`M>dbne.2L04/<^'HqPblZJ\4k/UmT+Ba@f/^@&M5=/'6:lH.LeGQ9d[W2PU@"EM^=)AS*Y`Tn]ET,A5\]V0Zm';DQ"_%I#DfRdHUgEMh.[W>ah1^/61saO.4S3Cn_,H'gp4Wa:slu04V-NPq!ef]e*NWk/VQ*+Hg0`AtXne_(;r\=k!F>*Wfsq>\3&@U<:8X%-T14];bG&_it7FD[TcAo@PJ):dc;!YBk8^s>K/s@M&j,;F+X`5`A9dA:e]'s!JIFQ,Xbkf!IB<Vc1obS[9R)l?cV^%XACJU-olVe%(NOE4qd?^mgWc`aaH`ch,%*92;<:"H2?hAC;T_q;(T,jV'<SQ!qsHE(9LV"'/0<s%_6c&bc6Dp4\@sMt_k"5jdAJN@Yo7D?-)/W!%!FuCl?:pB\4'mj\MUa2JPf8qVBlT,hL-$Y,5)j_L28k"P&k?o91FPF^Dlk2np;ludr7A8U&#FbVCJHV-f.7n8kahB`ULfcF9C8uD%eSA.dB,0&3=OPobQl@eJ'q+>%3maB6jBcP7W=q<]Q9rmj%3EuiiFM1NWfT5HX&Q#KB!IBLeE:trC_`-_gT./>MTPcKWc40MJa8]P%9`IYqi(t>ld\s`a;b)Ghe"fr"/Mf-:dQoU3ZY!oM3Ti.C4Jrt"3%OjT,pa2cg/W<6C,e171Th3SWg=F8<U-C<3l"t//m8&WgnA22%"dH$&#O(G]WMJn'%\b2KrSQNsAM]FH-XN</-/BcS@^@$0`@Qn'Xk##)CMd',9=L_ec!4.-a0FWFUh?:LfBDY'p:=J6.4S-]0r\kg%LmA'pGXp#.[j:iNlCns=ZmneM^Xrt#R<pg:3j&ZX9-N*8+(">iR)(!5d.+P\_59A.k;%RM's=#G7Z/ZK66]bY!DQM,jNd0oj$bgZ%kSF7he)n7&4XJ>_;PZXQfp3;?_I>BR`\i$7WB9-f.@mNn]_dk>/XSdd=^"GgWi#E+Fk.t#BRncm3@/do231b0R3lR<hJV$,-rN<f%q77jR4[n"3aTbe`biboc0b1TB`XI!%L?_IAP+joe8.AGErP&@hUc"s7r4<P@&ZW<e7h_)F&mBAnldGP/.K^'mM;kg;jr!X3S.ZXG%fZg%NPN#b_>1@C:FF-uG2'+J;&OcoLZtujj"&dn7D(I-&]qj/;E3_S?m3Su/2ZD8o'c.ho$XG!3;V3ubS0HW"]ei$U5L8![PcR"B%N%[nF!@#aEJ6'eC6_cs6\)]U5VL<>A.br=TZd`#h256u@BNX6e)/_`W'5HL'=H(l#\6^SF90#P^H_S*J"9NcI.mI\c-(-W`EJ[h'%U?-iH#Y1+TegLm*J^CtbS>TT9nMDb9oL7q:?rM/L`oSTi,176@JYUanf2AuajUH&CghJ%VB&5h27U;@;9@8,egR8I2aYVPmFUc#.%_+h6UB7,m#Oao8nBbk+)Un`Z`<H)"qp/&b0;e&fQeXa.a2Da,>.9ff5L6S3J3bdR4<"#A!Q5ClMrFKHn9J;X-^IYUR"-boh(/>"+%]SNL9]2GLa9pJ\S.\"M^it)F)e$;a%&uD#LbZT2tl6Mm*6n-enL$]k'7S7uA4sPtFe/)+=7lk=eM__jf>@k)![7`tZB-rEu1L#/5%,r5uJjlVJ/+W$oN?OGn87_P-gnkAb@rrT#K<5,XkeSk%=\IBT%3;e%K*GMi]$>.G,oOg)6*3Bd+g49C7aXW_(oG0HT-DJiINS0iP%1e34%5:cA7Q4>H!G9)-!R1adq.uG*d:+>6*[XjLoSUr4^J\[7-F&Gf?'*7KfZQf@-Y,n$?Ve@&d:3LlO8LQSP>/_p:&Jk:$pHjHV%E.ep^Wn[_Vaer<+HNJB#J+A5NIc6i7_FRF&=1;A%QCKKC]rjjK/K.;f5Yf3'gLaM/jrDY#W\#Aq"Kq5&7Kpi/K/OB>c9Rf+.).2!%TS&pKj\I;n@">GEWjsOeB/DPbj*<Y'U%s8?&XC)6hON.;3lS)#,+,$U<'aMl,b_$3<^7ItFQbbg#KmI+8^#Wk)!'5*);5\FaOh9=%_nMbO.E&)]$;PY/Y$)8rqZR/P-q]nFX0q?iI_H;@Y%jDPQdg^tO^8X]9a"&d[&-*S]bTI*?QVraW[IX`ir$+>Q>G$n]O_6aO("X!%,,asck[Xq0\J0W*<N#L=c7Gc1h^VN("N2AXPVNc96Q2^E&@OKr9T3k_+"oFRVHY6M/?,C#CC"(@k.7G;*O[`G=P@.+K\-.pD-Lha%S;57E5S:&:&+Ig:XW.TKB-t%nZiX;BmG&K9]KoUs]Qo`Wn.fPC*E\uiF^jFYn[F"D^JUP1/T=OP8ImMtes9I&3(Ykgi>FJS*u-i^%LtJ3n(BPs4_r.jseXE$4=t-2L1JgPm\hL6ClW,\s`3g@Z9^jU-C6t+;>CEg*2.amM8S_60g`f53]DZ^67HA+BF;JNR]n3#EHq3I)%T8[^QijhLnB[9[c&o@=kl=2Q`kX4^c@V8gZU0d[A-sA6)+!m>ZYl1SuU0]WX'[F075Qj/jR(EN\d\gAU(hKpfIN#U5n:ZEqL)^Zj%XNE3t3U0*bfen:i$SZ.c`bMq0'DKuoibmY_mRT&%:idB-"'UiH'0IN8+#kN0DX-%I76N5pk_umB[^pb@i\j//.^QtWj>$bT7aIr)%dsTh2ZR']lCILiTAi9$20?f(LiQL]OHu/]1!Qc`*O[=R];L$!UAbVXh6ZFO83:h,4b6M041D6lB<StIQcl!fJ/<5>l7C?U'SRt`h%26Hau??\;9pcE6a.84teA3ci+Y$$SAKd[X$G/T3j#@,:Q"1hlc$A7"ZB7Z,_E/I?*PbDlAI[h16>*D"5U*26m:3-1BqT)hBkio(S%'OKoa?\h.]FolL@,o7B@kk>F=jK3QiXLMS%@dKL*rS#B[*KFN60&^GhIfOl]A7A#L85fF)g2(.d,Eh"-%httX>D"=;me32ZmbVh`%QT/BC'<!=kL]]>LK>HskQP4"3J.B?M9u"20ea-pT4TFkMf8=t/?=J]h5N:P-f9R\m%f6G.+79pGUuB55pVZtu?CQK3,>k+%>Cp8h%br\:5`&TtKHU`Vd]dk.>7IIKtpK1s)`cUrsa/tnt<L&WdL_X\KM@B\V51LDr$fH%:]KS96LMQt`90>as80;_mR(SA%5K/PB@ma'&%bRYmeC$D@;ZC8OC^dYLT\DEkHO-_$O(YAgH_2Xcn[>_&ZW/GS9Ka-ccn`_eH.7C<^R_))t/$2Rr)1fQk\HdVgCP*K'UMCttNOlgd%"9aABM$]r6"MgDGJTra?A]I3;D?IVI<J2H3#.(ClR<MsH"<>uCe[e+!""7>Eeo"H#W*bU=.1/D-V8_6BpjjnNcIhN]&W&3J])g:P%#8Z&Z15umXcfnd8S>fMYf(E'seTaMU$U!]:fT]U%6*cBX,uPsZ="3k;l,<j!,1I(p'EaRf,5ipp!/"G,`-@@\3trHQMH\=1,<A,U%h$+%1;^c5eH5@rSIiB0;Z]=k$Y+f9"'`bc6q%<+4:G%(+)/$k*RZnRkPp&&Y_IFig"U7FK>p/9?DIG6e(u23:O+mu)(b71&3Yk?N%GnSh'MGm)UbbO4;9'bC')t>5ZXb4ABVKZ5Qk9U21)VJ'.kcS&mLY>6.Xe>nF/nNa4;!L?T4d"+`\Hh$e8SU`5V@[Vu0<,\]mLo9b%p+oO5AQ+4t!r*=/5.Pb:BN[?!!H/p9d66A/@qD9mY7O/Hieh\h#`LT+,Bmgm+`b8USmabh^P,-i2S?(.)a.Pc\NP)n^bI,XicPXK%%#kuj:UInl/M7`mT\EBi(b6U4,q6$]j2QkD*F1[XH!I`L)R`$`20GR[,YO?[$u/"q+%HP+6ljA!)%s'W-r`0LK9F_=9>ru7AJVgZ%1X'I)f'i2T`;KYb1'X6>T8:%tZS;c@KQ8#fqMR(\r(sOR+flQE5h]t(Yu@Ifl.Q'U"&Y&IG_"7h3U2#AO\c;e=aUl9")KA&MOJH<%/u5:E7==INrP*C?^a&_"!c*S33T2taD@K682Q2UpjDIWTb^ng.W;<+IO90,8jfUBr`Z#)1jXY]6UYO"$8[@&=ZK8(#8)7&D=)(<(%[cB0<^>\8P`Ko\NQ&SpWeT:i"oV)#0\9B,bs64Frc=B1=<=XK@(\a-AX$jdhcK[=1XT/J&gb*Im9U`&"kP_\6lW36"Ur-[F+1joA%8V,=2D;!CSh,#Iu^co^rn*Z3B"[-(uXRV(8X4O%LMY\>0:QWBs#4/l0I-F?lJoeQQ@N2tS3-C0JRBgp20rfa,R,ldHHbXLrSPS<O%kgO6:;4d!e3]X`r)Hmh=3j(oZBVu:4/-iM^]TSHVg<aZ*k#7XW!21s0pW97sC*J+QRZ@(>HJ`"XNZ$>rg#DcKD@U4rCnAN4fgn9o%`!'VGP*u0nH:'Dci.5IiSH)A(T;8jM!@0\$gk<g,;]nXODl]fHlIF*XK=1cn!ke*gP]"[_^..`%9#JA@RdjdZG21QJ/5OLPLjo"<%!$Rb)iR!O^oeHZ+22\J+5)Og-9T`ZN?-[b8h/=Z6POIRh\9,[@UuJ!DoqXtEY`gY1Sj1"]Yn;DIS0L7b."`jq-&$>Z[#4^7ADq/X%0Z)<3ST4oV@A:LZ90*f\<OI_oFQe%)')3^^`b$il[9/Mc_usE(RCIJsffUcW$k=3C=b0ZCRn"537Q*0D\B$="8ahgomC-M.=/i0R%O3:P>J(pr&mEbfmfu:jkU?H="3g]:,b&0&>:mZ9r?/=]f>t9Gk%g(*IYCNsMkO.:;4gPgcQ]>?M3,pCqVkMO_QkqT#!OeS`Y(AY.%"qd=M'(7naNohVH;ICfr(*[^&#Y^?-@PXsFm'CC.X"kFQ#7n&L?H30:DXeF7Ydbr";-eV>TUAMTZA*P=8X'P==G?:C6to3NHSNc$%p!$A,/W;>K2".^"<>YnaoE:so)$05!TUhGdj&]!n.1K+!I8)WboD[5d=G9cQ77FoHPT9tTJ8E`CAdm(A^^GsDOHuM<_&sM42Kprd%iGrLUr#R0TmXB_D-7%uP"Xdis3S;ud.X1^HZ"9@]b:A\L`P<N;UX?B6FikQF:jNS-UZjI*CR<Qc@WoJe@`^QfE(%Dr&amO4P+a'k%p@08Eb/VWFRD[@GH^(p"Ln/\%:bt/f:Si:kAnc'4l;N0)"u,W.>Kh'o#E_[a8dOE2_f*m2H[2qiaoU4_>p71>JM2r38H-bh+2aZj%!VbEAGJXllQ5"4(Qtt8?:^G#]QgrFN,Iaj_b9Y?PV2\YU5]>Iq`IHoh$IqNcZhaC\7:^AKB."3)RV++36M:&_?+c%gJa-bY66C+=%>tQss.WdmIVF0T`Q5l$X"tnR7`f:<k'IOO4NgLg"PaJ)/e'GsQgqm2Z[8o=2o[!Jif1/[OfiFIUf&N(mj+k.ASC_QglB,erpgS#g%ocT_*T3c]<psJGV^bPAi@pdo!?b^26E_(MD"RK&W$%3-2G3[NTIbtFf7tYjC0`@RRpon(V^MS;/\*0fPRHPIM6JU/NlKRq_l[l<s%$*q\7piQ86m$5o]l0Bb0[5G0Gl`h.^fcq>?]D$d3Ld1JDdLuoaklL2Sk!ct,:m=bUjqUc$Y:-8#_;W$N/l`IjP;_fLkg.0AGlO/^%I5c%Dh2`hu)s7ge9YTXh%WOMe3m:l[P%oU>`1j3^E%tCp$](,sqdT#C4/=j!`I;2!9lFKi>NkM[,1+DnMK*-SWsjrjIUl$d3[nV0%K,U!Bk6eIVj4Z*+#,+k[%'U8>^:j%J'Ok:,4#*e&h$R:m`fc,*%5Casb%#+'7OFP^lYB26P4"1ngY!]!FtMc56jmnBm7=:@VbOZH%H'I2mKHh3!)3Q8Q-1ESim?CC%b"9VM3/1!,G''$N*VQbN37!OS<667gE9@r+74q.]4H!_sXKH-3,9_VoIoC%8q2U^nOhR0nebEbO%]%Nl?rS)-J8L,(ALMU_TjfM+/NstC8@\c:01=&;Bbpi+_1Z/rop/Y[G;h;g@o@+.E`o),G8*(!"*=@JAhkCr8PWs/F&>N>)'GLAV%D)H29LVFgsS)'I)PhL[.2[%8^RsXo/;k4$DG75+t*DZ8U`"<@J69.]u:nPA^lfkPTnRVe(U!J^mfiXr424`A98)t$Or.9/b5b-o/%*R%E[RO8Oik]0"-:&/HGM@uV-Bj_&?#1TL)Cd8dB'c03/h_53ATRG,sL*o`l_9A4:r,=I/7"3Y%U&d03I))/A)i<-121sI7nK'l;%,+27S-0@rr=D"TQ1h.q\_u]&(f@H"1i":)&rbsZNW$B*c$cs3kDM_s5/b_"t\FeQmg^f+X-X'!`oX>c.ddNVZ1X8c6Hjr/)ISlkY%[Mq?dm42QDVtZ-fTL^A]i'qP<AoJ$?]/=EAiUss3N17$I2h'WS;D<)"-2I)iAqr7gEr(45(21mU-6Qip&HeY@:ir!W5IQQ@DMYkq%R8c.Pq`p$`g2<'8BuXU0Vq2,@NeXRKiqLI45=84KmU^[Y)>h3j#N-QClW9%BW&6I-CkP'3J*CdiaZ,=27V_%DE7/P-Q\q0D[]Y4o%?)<LmW%4NYEjW;dKH/kdeeI^`"3]"k$0=EmJqHr0Ku-53bFT-Um;>*ULR`-P_QNk@a_K2Q<lhR.pQ5R=;1%>"5!r!;`OAtV-`@o`%m)m["RBc5'8qO@W&B.nn%XIcV]L5)<2FaMmYBu=%UENB<P69\B:XC]"ih+sq9Xf-<h&*r[+9A^FA'*Eb"&DrK'AH*6[Lu3!o\.RA%[G5p:atb]R5u)kuO0?a7n\IG4!'P,AD(dDLrdZLmBG%[Y;(WtJ01#rF+8jWF`M9K=n9l<ZGk#Ss3EDh-e.*80RG9lOl<*\G75V@@%!:o,en8&kU.T\\]Wdqb^eEHFC8E-dWI(3CR^KMU6^aF.6Y2;?pRg5<V6"-Z\ORoi@[JJC*YB4J6rF%"]q1+k6Hm"YQk,7uDJhXIN%r%R?4$"S8pTEpELUb^sEkG%,LJ@i0..Zc]25MV39Ob;(QbuB;hZ<<H((]YkGP4Y_ZgoqkGcq4E;!HSEAYU_'"0mJ&ITL=d'n8V8W%5$mRA)V-A>!Zk1Ll+sjmg1/=W[6a?XNG9QanfU/>p9"SlQP3MMo`bW<)S0oSk2W*@BJ%\l\d<r.[,ika]#t/hgGeX]hu2)Ls5HiS%jnb&<lOUc.ZQF\ss8:]fq>PTQqpg`lR.8LOos_^8iPGF^J+^\ihgbRhQXA8=jYD<7J,EUKnu(CDrq^:,P4X8(rkDe>n\8B0nt.P`%J,.O,r2VLNfDhDUr:7/mqnN%=)CCUlOW9LDD0ZOO0>dYdBU3JDOSp1<-r60(kmuCJro-$*:&a_XhUG0Y.')C<ECWGLC1U?WVLaTH%K8<$)p4:N;mt0/K>)F"klqM6Mk8sDG:E,]uM2s6$"BI=://VV_>/]?a"e#[A^Ma3#+9J2;O'<EMn\`W'Dh4Ogcqp#QFnRd8<iIWX%c/cVMm_5da7*`3:1:Zdj^*^EMTsFpb*bMVKar1HX)Na4BWTW]D>,.0BDqe%diT=8ni6r_XccWMKK'I'hmam^8"5AA@'5PWY@F^8Q%.?`]IV&1Rn0e&b@k#&>sJX@^L"4W=Y[-&fm8,Ldk*j&JE,cZ%fpq2Niin%K5AB(!u9Ir^\FOC,-EtGtJ-MHlif"bh@Wg_)Qm)9l#%Bt(k[(_f9`@NXs$r6VHDMQ1g&!IaB<eES1B\1Q?c*lj-Y&5B91!YYc12KQ8CpgQhaD7a0NMV>o`e7eh'\=nS10]2h-M6ZpC#;;E+%iC%O+&A-#k$-Xs,o,U34gLZ.X3u0t3]Ud'PdGsP+L0_fW_.>$800o>n>e(HrO&LppU4o_t_9OgM-h]>,3^2I$.p&CKLI:]Uo>:pr%`S?PtIs5sJi6Ta]qE*:ZE*[u(.r,jIq'uGpGeRGtjTWe!9=7T\V_k\;&9gKQ?RO5JBWf<60NaPGNCA*rdnCq6.*BF>Iku$rI3;#g%ZLZ<^M]RAZ+aWL?-^kK1nlDpMh">GPgJRZ/dVc60K[["iN'n!90S\9a_hD+mUW>#_'"c3domYd(QCW:T:Fc:`=r4n#<jYY=FBO^B%O>,)+kkfcQdJEP+n-9>VoK9Z!01r_971m[RABE]DJmsSJ(A<#BW<DU'M1HNt(Q)5W1e%qm,_eRe/YVNAJ-TdG6a7$a7F.$Fn$;]n%5&<F<]Gd2&2BE;BrsLkRY<+Wma.3l7k"$+9X'E<N5<:-f"i5gOq*fYJm,:hm86oI-O(0#Se`OqbET^_dn]@p_k1g?gB]3,3Ti5H6%R\rnLB1L!gWX.[HT>''f?)&-)C1a/-Xom.p=2$t3gMQc>Dr9MW0P5h>-`b8FG\ZnMa.gVZfP>:'4Uuo\"HKcg"NT*ci_A?'&Bf#c%co0:V<RBJrpHND*9lrr%='$(q"7IX_:N*dJ+"]#0_!`g2i2E,VJk0[N2dF5<[CGQ4MP*,-T_kDbhtY?/:>UXV]3I.-,Q/1r)oZUq%H`!b7(+.E<*\<)Rad$Rjct=JOomFCGpiO-!Y%Z/VFALNceSTrb(<Oqd2Vttc>lTZZG9Da4f:UuS#Um>ZI1"?k>K[uk2%ZTPD40=]%`<1&,AkM!%Od!#QT52m]QtBA;)r,72oH8..2M_)j5JU@'iXj&\9"L$O]^q&'05&JNc1cL4$.9*KnR++!.leoAN`^2tp$)pkJCRR'%]ON6.g-gS(0ek%0Yt[abPk8qmgTW9f&gjS8MB72se"u,6;bgm@3GJ<6T">_),^7UGmf^$+fjZj_<TMBq,k[$.k.*4<XE-If69+bk%aoU\_R(UHNKmZ$S:n>"RM@)g$VX6_1VanNF&Q!1%4g#<_S`ti*+Yb2@'i]V7jXBL@PLVqlV25/]O"'*&<+8Dn5'J-(DdO[d<8t$8%%h84i0hs^P!6'e7OPt2"ad*>CVQlGP^^**Uk((50*rNjW>u-?kg=$5b1f^'`&0cQd+KgtJ7i.cug,5&#HW]AWk%8NkR";JO*bX)b%_saX=/!=a:Fs)CI-%f&qP!%lO>nb536NfV3#:;"%LceClalT06/V\;n!JuedZ-He@5;B^Z%KOB]`gNb6?`6VuRUXn[0=-t]g:dCe%=H_W"/G.rs`0+6hOATHLm2EI!*h/Ze,$U^LSU?74EOUjZN9nAMd1qNeMUn!'&O[X.;PN!*-$6KiHM\0.@C:3p$lDEq*+\T0*6JDU%5A_smM'GF?5V)uKi+P0j?%9oF)`!Dj'1MJ?8^`A.]mS^42Eo\GP]R=T<';%Ok?qZfj4rsc3\gUj3s<Zs+6/oM>cDC+,:n)RapPoM%nEIU%:oo,tj;LIAbm$b3/9E>aLG&Y'=k(t0kZATZm[_8m!%'dcMn4:0[Q#DR1qZnKJo),WaeL!gOVP-S02sl+(`h5R4E-U3iMV2f%le'E-Hl&i>AOg(1o8+(QSFO2M\-\`]GqU+Lpg/,T".A,],BWH`Fp:8j@O:Bd<;jp@9!gYk"Tlf<(ji+jSh`O_UmJCIj2RD._lhc'%gLBo!W'2hP[DB>JB'(As'('1tbad%^F*N9t=[l\4>kg+Y*B](dAB4!W>_aZu(*#o8TYAc?rJ?jXf:FY.f:,QWqfV@.&=I$U#l6Ma%FNN3?qTZ(_-S<h*`]^T/@!nJ=HukWk`jlc43+2BQ6oBQ&=8RMXPI#2P$pFg!Xm,pC+Kh:t&3Wst>MBml)^K%QC8-)"G9#=J:Ou"^%LV,$5`i:IR0T-o62W,H*1#f/-o$MdOTV]KWlVJg*;OW=EgrGSK.NLYh'a;I3I-8>LE50>;1QI[]QlB[O"=02U590T_MU+c>CdnY>%C@JN[i9Sk(4[$*2</s'r:2paIT"b.Jn?l<"a&YsA;6pYQ?!\l%h,qXl-_U7'a%76p@*cMG:-8oXC9?*654Kmb@E$]OAVrIRk=4=m%Z4/;OG33k'Q?InV[isKZc:,YEXau3#qaS5@AU?;\X]ZLlMGm)ATJ1@6aU1mMmk?hkK'J10\>G\2nnkuMZtfs6U=eu<Ar"&V6Tr,p%fprF8%RG0?Z)5)erV##aE45,aaYo0l?4.3Kg&&F<47fuAi;beH/9;-q4&+Kf0G!i8@(%uj=\lV?@]DB7OO*kl0sXV*:K3KQTGkaR%5^>W&b[r[VAjho*1PIE%%p@oB)ko1p20N%)F25E#E(h-=0frH->)E;*=3<P=0T$ur'F$]b69H3MUt(PJGW&?]-pDE3FB",:RtI\:%q'u<AX#Z?bfC7s8UF]nN%$f*(P[L08E%$i0l_qR;&jMcN=r0VlU0ZA&Iqf`l_']'<6h!I99*meKK28M;C*qt(#(W\qc3$Dj8i<l%%W!Zu]-kn[%I*(OmI-"$4:>j4YQq3>5!mlB.j2j8@JHel.$&`8i9UE,uOe%6DL_qXVo:*9\cTM9a9KFqhqTp=%?=WN\^SpEtWH+9n%dKI!uXDVDDpP@sMXqO-Va"W4E"^f#e]s]W*"Z!bWcS9d.pA"`>:g0gdPm-dU;j%<q@\^*$%ZcpO%T&=-XMnl'9sUj;0JeR=(+NU^%/Jt`/&)</"i9).$L`sqgBn1=l?<J+]TOX(QN\iJN*mrjRA$=gYf@i&(L+m=eCtAmBi)tLBEqIud%o!ihR7@NckM_2c#G\/p;ikc$%(=CV'D$+/6gO85oY=0Bo$4ErRgd.j(4U4h*U`2F*;lDXU?3KgT@NHKL1EKL2@iHI?;:+!5&&+0"Z&dkbdEJ%C0i.9mTJ03%]tdad%h?\>ONF1'u-'<gMUPsHFYLVRkD%FAOXbBQS$DIAkQ'9%ba,A;^"$Y3GiFrN8TJ;h`jODLK(OdIT%YaK"*Jg;H6k8q%U1^%E=0VFW%0d/@SD="!W"X9II@hj&0#@XneWn5*P.)Y3,Et?X*Nr9U"6e=5_-.HVNGb%7k/Io2cQZbB7+AHrJ8W3mLO5oubgmA@a=/YbS?8\5m%5tLeK"Q,"L7DQ'0++P&J:/N`A,$V6<JFDKB?87c-gUL-V&1QlFRVI+g2gT/>Sl!m34b+3u$)MR?YjaqolEFlV0pFC4Qk$.5`i9q3%P($cAS[`hgn3*%NO4IDPhE!nD@O.uMWF%r<jg*Uhjo!Ka;6mqC+GX/@*@o;u?f/%='")PkEh73Im*WSG,.In8'`>L8C%E?'A"FEk%(QDO0pVT9\,u-^#m`$c!`1YjWd,F-OC\LXJ+FH1>"&8'-U07O#`-H!FeI%9.<`aA/GBRHN8`l]1[+B!,H&@hK#*.jT]M'^CU9&e_%-]I;JUV+U$"3P"CSU-IBqho9b(:[g(7STI0W1$:TC8a:>-$OJ8=GDad@qQ7&ec6N,K1>NorbT3!$e`itgq!?PQ\!=:)AO9H[$UjS%96-tYk]:KM4rt*:&i"^j\l#n,N-Y<D$3C\$q3_/tZA6[5U@5Do<<P+ffU;t>fWgGc$QaM+TOIW,c_=K9A*K.4!O=D#YQUjAC((4O%SHFFsdo%%9rQ2h[2cZ.W`l>87W/XEU]nC*gIJ+G?f@UJ?8]D^AfT4"AgOAeoU]SWSZMJ15gH;2ZD]mYV/n\8:&'5'DQDi9A7FhYG%_<T-5Tg_LW0l/U?@QX4dKhaX4[L?)h</#@(gI\\+Ji-QL!V<`G19MIYFLi6B25#O'DUq,`1O<e7T"s[SPWT'6L'DD>J<QX"pX.jR%*2/0Tk)"f1Rm%!*n2GG0UjU4\NSl]L4;%3^!Y@?Wa&gX:RD1D/Q@Xc9=[FbW8h!X%*(Nc3,iqAs'.d)7@O9Anc5+noS*i)1Z]m+#%Muk;pipY-)R#T/,'cF',PLR_doUE!iK]4*KO:?^aAR&A%2R-"M:"<qV\MclXKZ_;e1HfD&ZK3b+>s"9lagQkkWfW6E"jerKh9AEu%Yi[5'J>G5ZWQ98D;M9;8i9RtIg%8IJX]DYs2%\ied:rqp`YteoiABR,7<O&"SJ>okn;lrLio-pnVUu@f+t[Lu'jAE&V)mM/Z*AjN%JW@!=LsOO**MJEfXtKZ3DnnedB4YOtSZ=Md5H?$`XR?qo"0$b'#n?[(Wq6?!f=J.97Z2O`[n%CC)GgY/I5/MVQcX!L"Y\XhItWh2%>$MtI>4#F(;Q$dGCq"pIdN?:45:%W@-]-@s\>\iZE17)>I5/O`4]3e3mN#O:-"DU>E!g_%Xsb;aa/s=GD3hiBFpF(n2.liL@tM1I%f[FDRH<,5#nTuXF;<nF'JtHo*JLH-C(&ho:W*^ADd&8=5Q`T$lo0abARU#g7U&2*\Q%(IIqt64A&t?Mn],:$H/]NMd54!lMKl.Wk%%@/&Sl%S\poO-\[6HAh8TJhsfph=\!SfV'W92\U.^U@/X=9ES7)E<qj8CpV8L6*Ha`64#J#1,oMCotbMPHpo!h)Lb1ML%mo.pnr:%#tJU"Q)[,=ZNZ,g&D_HDXjhgG_*V(q0pNAdO3t@fLhgW'`b$N@KbT.m2W/Pj/bJ^W?o:6D`tl?6>jEl=;Bt&'.X/q/DOj`*\k)?@%edV:Y;pk;DZ;0sP3.&E)cRk(nX:S:jh_WlT(,^BlI5*t_J1naFfm3_(9[k,ZI>r=(SqnN1"Hu0$CNggIYRZ]>4Xjsh8GKh$T\$I+%JEbu=^1QN]E<sLNFg#:n!Y/otk/Z1!`[p8/*^Jj`>0W"S=+h%[`_]\h!PeBW/9hfrDI.U_Khh1@M/RPW/=j^Z,Yd9?jT(%K3Vcr>%nZ+TFa2ZLiAZMV"#\pm4-+;"7W!2(+3<Pk?+b.r`7O5bC8u1_%Rq>ptT1MDDpR5@er:c?ijIiiHL3A)"Xh0U&$qFOr2&'YGG=a;W%*j.Y'I/27k'k=!tk<*)%DPN+f;/KoW*7$+kX;G5h98mZ(M"GI?Z<m`;Ois`D6fed<MN3\Ih2"FjPFk:.(->0%SY\eUD7d0"],2on%IK_].bmF9$8'N[TTBEHFHuNP9mLhr<j*a^$%<sMuh9DsF]aV62=oOh?F^>i*dmDFdq:Q0')LX0?4niaL@;^UYFc5L?Z%c#R76l>H%W/X*,4:*:AS,`[b(^HVM-ejR:D91e[;Od+5mt<g2>j>;q.O,(H;6Z&',d2GF5^<#a?49*[@[t5\]@qcg4UgY[b*s-#&pMW'@fhC4%Cj;]P#$cCls3'tIATe,qo'/'B[Qr=K+`^db!E-n9nQMrrF")&O`Jt^#D6o$DQkPuH`;m]8dc/!F_3rmP(p_,7ifN[iRI235,An\Y%KW8X,jLQ>"[Yl_t2IKcI9=HF)8G.+6`rho/b0<44iabnB;93Z;!@4QJ2XK?M-iK$T5_+:gdR?(\MCcsk#A"4smpq^\jtb/;mfF'G%<^7o;"F.Kk^S_+W!D(n44B<_^6,c@#Gd-Hp?Z5_/qic(tU^T@lf<lLh[hD9?.G5dO(N+D3_FKbd0S:E_Cuc"(.0SeiJGKHU>E"E%%glC8K,DOu='OP,4:#8"ZTdfFV6%#nBHd]dhc>fqQ,DP!h&]0[GLXMZ^$7LD<k]=h%X.`mAp>]OXE-3R%.B*BPXp\Nf0,!+.LBMn[%3S:`KiW+_/Tlrb]j*V.]<B?-Z6A'grB#M$@Vub(&:+Hq*:JjNT7n3D=n1JaA,Q'hP=7:T5#JI3?d(O.h^_(NU@>hA?Us:$3]1pL\%@>K6#neCIgA/YJ!^Pkq\UCud`HBBURTp,Nfj:Xn]Ro_6GU09lC4b4lCZHET=J/42NRrLM0aHaCT)[!I7-^SD4]DE^>7]=r7T?.`,%jC$.ZU>@GIb1%o6N#F#E+u\^e2,_<qd'E!ogl@Jcd?%6pBi$s%c&TIYJUtk@aC]p1"C9.=HmF;-:/6omlYp]_"Q@sGf]#0uPE0hq%TPt'D0+<P^U_g2K3Gb3)>M"=?YgqWim"q)i;>3#u!J<Z42'$!*i+ra-XNYs"Sr9!Y;J@$+4e&aoR33,:ldWPADLgXY3L$fU6*Rs1%V"NeW&ep0j7],/9Zjn2`_Y]0=o@H5;B.?+%pZMkGXZ-MfN/g+u7jr.p$Z\AFS45kgYDbm,?:A,'E(QK8M5(+u/iRhicV]glS3bl2%MM!;`;;r'BcpB>5_&]9j2,OLTPbZqY5`eUL\!\snge+8Rp#_ZI.@q>'"5cCV`.aDs#S8"V[b?DECN\a1*R90jT<ZH?!':q6"4YPW%^-gT%#U>;cKDmZaNe@Fr1,7TP1IA6I_&X7.[?45F,6]-A/pC_R!>aH:ZOK;@cj`-5P1f+0%6M"ZWX6X;)o?A&Uec/n^'N3s!mo5M%?Wef#%,H`q!?',g(s>+RR6):O)-pTak"lb[LD0-D,Vp641PlSCF]\i=-.FYlBm/GsRCosok5t1IA;&TB]n*OFonTlFF^;(7qn&N/%*\a,*1A/q[9d3#q^uTa-C*)s1Pc2q\&",l:3JVD,(XRJJ\=for,NDoj&pT#p)t<+mSB(KQ)t^reV^#\"#C8'>;s5uY-9=YY_Xs%6%TbOR<U'+5(9!c@b5UHmT>.VBK!/V$Rc$PNbl6,&Jb0:jO%"5>bP6GhTLCe5%Lis23)$gQ3JEr?q9dg'%F!DViodY!E*9[2lT'>X1%L%,!;pmGSs;/Y,[=?$s/0K[+M\fhR_5'Tt%cI!:TQa%$fd0ng-=0*5M@B]r3@Ci1+RnSuc`=j7SK?rc,MP->mDL$n9bIIIJT\e+r%G'/4V+6F*N<^9\rHW`TeN4.sY]?4&:p0Op=D4R@hf7F)Q!jT=)-8GTu'^u6V_RDC%4@f_8+Ld^fl'+5m)9AY.8nS_J3hBE8X>h_U%+LG-8U6?<+gYL.LE`HGWZ,r_>[#n16*gPcP20aaMaP@2ZCZPlHb@h'K]V79GVeuPb*r''J!&s:_`n9fXq)g"o\D6WU"b^^K[4cA:%9JHeVGKkbcnBL7+^hQW"4A2Fa[4Ki7CScSIh3'V+Yu"3ifSjV37`?W2hIhd+)CSIb#lUZe.3cHNA8d<(Ip6lm&BbJ3V>u%#R2c`F%s,dKi\<*A]EsE`[CO()t`#AdZ,8bW(DA0)%6Ot;70BRrmU+i0RJdJ-KLEM^cM\i8^hMn=LKDVFQ!rQAaBYZQESCl*=idg#*FjVNf%Cd;IAg-FI!)HkD%Dm&sE(6djkStal,=Gk?ac8pM,e)?SjpRWfU+gN?`_"EXhi9--:eMj.>]9:KV-:0dHA#3D1kq;l3^pB&bZDOYQ%,X?j.!j8)g0:Q^/<>4_d#n%6&Qnu7O"NY#r[c;LG&k\)t`BD)uii0^sNZlHI]pQ4_GEI^#N/mm=Lp]7j<M_+k!$.d`0eMnmN5=]-%+?fX)L\XnX)ss9;pC$>3fn9U-.*#oe@dHpP?NQ3T%sT!BoLt%l=]uun4SXr$,9,dU5lB[08j3mj'TB)(*]<mIUamfG$5(,7i#Y2d%W5oH>;QJ*@m71<e7\nnS?)Rfp!NB>Yi9_]d>KH2b!"%A])`qhi&pKIg'"hVnjH^9mANeIEi'r1A'6p-O-;$Lmj%?DRo.QXVX<Goj%CF]$#0i+%G6CL8L\=JR7UU*h!M!>9*pE3VrKIWs`V_$Hf<Q$SLAa.?oH([PC:88^^luC7\K.,b`SDFfa<[7RL:*=OpAG#(9n@lT?%K\$)kGm+SPALK`g%:tQ?C(s_`_(oHl.XlaZ@qGVfk!sZhEnem\;%FEo'acdm&,PN:"__;JL_g?h6IDhOJi?-H;5epm,ZKk@8a32[%5;SU[qIfj3Mf9T0Y?GFl#(".#)karD%c8!FITKm['9X:l`e=Wj`$%0-VEpgjkA>GFo"$`J74j^trk[6hoS;>:J`WOK%:Nh\>)2?Q%;C.4*^jD-(S@mR-af*(#n,CQf4j"ZfgnU-Sp_2GlP5s\hf-8hPb(1].ILp#k)c3IB+u)oG0,8gD6A<BDIo4:`-PMPuLs$`hI,r:&%"k!3f+H8um+:;\oKm/HrD@_fQ3qZgI+P`UbJB,dsh8jTM@f:I6Ki$Tgot)GT)om98f0F0(KmV%&!(l=U>pa>RJnnkXp+mfRV)!:W%c90b&U7Mol=3>3kdK+OUf_)(Jh!h\_ra<`$.:7(a)Ilp9T!j4"\?RU%VWE_?kXi6Q,c;2E.1:G(161Qr(>V)U5+GG:Kaf<WS(.eA%H6rFM7c*ZP5i,j+6THId<cT#_;CARpSO9WeEo,;f?s"FL.eS$SKFX/29+dO+l79<e:`j6nVPqiqf&M$,5W_6_.ifPFE1jVuX?-b4%q$'[E!M[Y+QKtp^h!]^%X6HS_6&JWVdjc&5<=/^i<ZT(b+b8V4Gca.N?f>:iO-pS6/gOQ$"_WXZ8W$TkG7!YOCS2TJWa4rG=LAcn%:q02"M;SG!7(@f8G9RaI)2kLMoE.GA#J&$S`VHlE]fI&K)doN(X*Rb[N]2Lb/hn!Z4>Dks^aM+A:@WCik>t\+aFspCZ3W#Imnobc%N;M_$?c-\i`-GL!QZUBcrTV%_$/eVLM-QNib1I'aE)=(W29_>L!"FJ',b$Wf)4arS#-kBP2&b+A-YZkhK8Cs"PVp7HP<+Zqf,h`f%Tf$Ko*3>)?GhnMCTl:8VV"8:IggNZR$!2ZRd=]C^?hYJBitan[/P8Eb":aiRAVS4P%&a6\?\aE0CFn_8`;=R7ZpTBG[V=M;8DEWD%`9\ZI8gn)<L0\"26;^pg=Q0BXH(?4A\a8`th-:G*]WOsUk]T_jFk#BK<80LY*Ap*BFKLIth$kuefQr!EI&Pec48WD+$j0LM>l\%g%#-De>!0+P6]"t?o[iuDl'jhCb-W%+17\d%pn;%T[Jj?pDAcnS;"Q;OiLEu5"/hpUbLD0u3SR6VIF/*W!;l6Os,J?*nR&_1",u#dD%Y2_o%5d?`^oeMO.p*hO;"3a];&sgYq^H!co,H<LlS.7,W"fnE?`CTM3?l3'-JCq$`@+SlX'W3$H_6"\u#GTA-d?VnN?&)+3dIZhO%&j6L(Y/#/URbI$-+3fgFOt-q*8ct\;Z,fN[F2@[X#u7q'!mGY>E\2^Pm3N=',+gWak`/5jPlBIV)lq1*<?kuI.nr*"Ze15A7d.99%eKC"/#pA\YAa1Uh!/,fEL8Wf.d9]A/d'Q+J<?MbpOPoXu!SJ'"D`e(XGeXm*?GK)UhtF'*Yn;jp,8M\8=\ub=<KigD"MM1CM8!,o%SY\\W`UjYH:Xj,^)Dct-Xo&K;aC*t%1%I1[4&??33Ul`Z-]#PPUi!_/;ncXGM#^[_7-7N#AU/Lk[?EO/A-ku37=V?75SCXBm,W^:%&Tbf?7B'8@LcEA>dh^8!eV[q*)_(9i:h%m3$aL]hNP",J:urUgTXG0qd#m&/!1d0o-(:!e_o3KaYdMaH_TGQaA9'TjF$Xh%E?M^M%eC\?+_L`;TPb&?_AV8:c@F&2Hl_+F5jfA\<F_TdEmNP5Uh#TrP4d.V">5IhbZXJB><<G^=o*0dO"Q1osKB&O2l]6>nX@YHBN?Brg%'HEc*65jfPO$XI(H!_S\>>_]R<KnEK=JT%,F5#/4ilm4oj6:s`auuYkX7bmm5WO5c_RuH4Tj"iRpeVUhIrtR;o8IM0oL8lt,3r6V%n=)@5=JUL!LL,n5@N_/Y=Ad5619*nF.b;G[/cpNuRO]9U`7P)If8r*5\;j3]mIDg4ZoWW;^_uSUM[bdj8os3!fS]1.m&&(7W:(K`%L+Y@-6i3Q<F?FoH:Z8>*rlognb*L[M"+]iNZN#fE[/6G[HVL7k?1BhZ:.:+2*N,]5rX.^]@'\4"*8Y+6e4D1?hYCo;V805]YBGJa%CjS_BNh4;8:(aXb/>q(``tDM&^^'bTf)p-323PI'+UkJT#-8TpIBuZ`:+^&H[kN=Eef#"9il0\\-L,%;$/K+c,5\SEVbOH*%JN&b%'Go<L?0GOk0->6]TL#:`/]-HEg0=sl[QsO6ck@07^sVD80cAWPEI@)J`n+s&?RZcC'f#I=kf<8#DSIjO8]W,I^_uVZPRKAm^]dZ#%H2Or"7UM)b<@\6YAd+!@=pi'9qPFC%UG0&'NGk%U7jXMC!P>D`(g7JjmYO8Q0ADR=]3/mcTl^F,CnjY#$K5)PlQTL^8oJ1f<Q.Rp%D'0H;7XbFK,af7\#)OL(rnbb<jnQ=cW>t)U"e^OC\5;D,f2=k%WEU;g_C.nlDt>44AIN1(lEXre&Z'HkC)j@,H9;9Zj92ftQ5AXu%SApM4"o[rd[G;!9/'l.ob&a;?-5JNa8(.r<D2=OLc6M/WGAM8%k9lJB7KPAs_dGt:\YF%q33*C,YFo1b#``Z1&K@=l`pB@=Np^>s%EfW\9#BpBf'SeiI'&96@6hO.F/"9Y"\l=(6J14R&SjV2!f&IHmVQ)ucK9UYXP/0o99f[2a2)\td1sT@A.YE!l4#Brd:OaQVF.`:$%ctpX,^oOEcU=(%?m4gk6W[e.2:7$5R/tr9a##G/fqtla=OgWRrH<k,6Q&TJf0db8D+b),ceqt7WH<F`U5dT,un/Z+jL<b6bA9DME%Y-0jckn@A$@;C%m^9s.@>dCK':?WJ`I8^t8pbgf'2"5lKJp,1&*L-l66p.8q0u1uoT.*`mRO1&08qk?CY'Ej#(uc`6E)h-bAJ@eE%qjL5=.fdZ8C?[a88L]BW8lgM"]$KL)dEarU@pe>t<K%:V_p&dkboVAKN8Y&*NN`J_+hfo"CZX7Nk!HZJi[R]&eTNeGW<6O+)@(p@%Gb63p17Wb57KAYq19*el2J@CV=dN->!<rk6V!'=,OIF;*m=BB(3HHHA6hWR[:SE-3THW4KMJB92"q%@2M%=]r\LsWD5te=LjK>a;%(NQSekMS]0Lj,`;,77>!Q!j%[5!Qk<A5tH-5Z5Q@J%-B$9SXjuPc#[9"D%6F//\tMm,rQRVZ4P@_8Bi#?(kV5O$m,L7%r.eZbN)^%hL=`d!e=,o^fl^WCnX2X\H`Ae,e(siW)YW%q2kL$YmmT;2/i4O5j/&N%\9',_2@ceI3PK"m?R99<ThB+/V33?<Ubu-ojJ\nE?b[=%_=]9NOW'a1SC=MG`?N7_Vr[%<@o>tH&:h;b+eMXC&;)/,Qt]oX$))lSN't@@*WHEnN'qq<2Q_35B&QoAIIM[[\RV><JTF(2&eWRX%B*8E923kQV$jWt(iJm/V"pWUS]$ksrjO[3PX#0Tg6>F=W45oAs@dh/jb&bVmNb,O>[$;P\@W"/WB#"KUUMrIrP_!:2-cU?$"P.^B%AU>jr4dp9-AdnV$@frfL7"S5))(]H:%02Gb]oU2@R#.,Aij#`0-WY-k+Jb.C)%1%'iZOX[[rkCUc34)I4Bi_Sf.YM44nTpgs!hHM%)J]+fZNi&sjlW%i<:QZF&VYmIX?a<F2\LX?*Y>WG,-9m4>Ve8U+J*okDpA)bA`urFXU&9/pX"Ns'AkN688547`;=s-6*,@&<Y6jU%k'(O<'LItGplkg#`U&7"jbsJb9E;1_2KLPq+\3pQ%RG%#!]W/d07eFpkZ9H.IVKbdcd!rp7ClbJ4h^AhfEsU$4$a:?EJ7(cWjKlW%>+G-NSr=%e7^cPh#j<*t<+V5Fh+DZQ7)Ue@o@sVce"YUco^gum#$4sYCA)jRSNJ2SiE8&L0*_\OiJ_0'-Iq0$TB!20M1c%=&M\]0%h87p6jH9'3b(lH`MGp24-ao".Rf_$_La,VS%Y8)$p8^<+4s05/Y78TsO(NjV]ZDA+JPKq77</#RB.i/Y-_>SkPd-M3%'DlPqU>OB%.LRa__PFaLI^lp@Umc(%!ACU7<%@D2rOrlj;i8L&LpQaCBCqEpC9H_K!k%W>+p=s,Ud'2;R]QZV:6)E=!:@Pp?lX#'UaKRI%$tmN%B$H"CN*3K!_+H"rcTD?82W3$tI-%,OC)N(e%g";LR-5YJ9ppr(`=H%OHqAFuWbj>*>`<tOf6[%!`n*<`^ntT;52=pK'sf.d#ptYY%r0TXKTA"O&j"k32dm,)qT0!2,#3[lD1]u5m/rY,8ZDJ51aD?H,i83/3S\S$m$1I)dj*\Z/JWanN,Ri(Gbtb`IP8X=\2SFG"bmH=P%EUGjCT"j.>%Z1N)6uIIeOp=8b!Id[#bSh0-ORmCV"+%_#`*8QeiF/'j@IF^cUGAe^KrKhnKJJX.<\uk98L6Igp#YYMQ3S\.i4OF)%^sA`mhu5@qp62Rnr=ktHjopP9rKGq/K(i'#]J-[SB<cepX;ShAW!iP9"2(?P;(!77h&JS#hP*>$g!(7E9OFu>.c=ju8@+eTLYbTD%fKV2j%)!<Nkqph8Mola?GJrQ'CtMc3ZJCC-=k^s-_Wsp,"fS5P:cYmO3kH#Lk6UoqicMRjFBN33!Vd`>7iE%m^T-Yqp)6VXdEIfa%(%SGa)iKY(jPpGC)a[[c,@]]Pgp73=pOF*Ek3b=j5\5M.Xq^_F_p08$I2h/nOg7C]?/e*e+>Tc3K&`Nj%I6]=MD5@L=TeLY%rD'a%b_l\TXgad^CTt_ilK;^P":@%#eGYVK`>n#IX<-laJE)0q>==@2H=JML28)4=fJ\DIDd:jYFX<]'k3f6/'UUkLJrDQ^L6V!8>Q%5c%=(?&,e,d=f*Gi-!3H27-hD+_6.8eg8!&arTM=Y(#]8aU"2rZ.%;p&>g=`"@+NgMW;JJ;:_Ft-4>>X=``Kb4rSHZq`U7[JW2W%/FU%I=UfaV^7cP.t(#18IVG),_5s"G2m^LTAX^U\IlfcfWNS-K.%7D06-LF;kg"rG!k\$".^O>gQ<t'BC-0QWVr[,3J'&m6k*6oY==uJ%:gTBD[u"aM(KA"8Z.>>K&?oi+08\%A<I%DgGE3A97IIt#=p]>8RcI\6=\p\H"G1*.m,@G1lWFV[AR;\aOFlW%-.]>`+WI3e[Mf#t%/&#];ntAROJG:F<#6;)pXJ%g8i0ku`F.n/m(/G_c%I?d^:HrtO7Zb(dcWf_^n\okp&S&`6S^,U:aoS&7^)8b(/%;$Cgn-*OcN>=-%1!t:]@>L>-7[,SC!bNqt4N5sWmm_GIWtm:lVZig#*_W?4MImhIUHTBl"_"ot*L](4\5VFZj"`cL)_;)*H;DKe5VOFhW+g6:naO8`%*NV-8iN!\#\<./Di3!6@\3H_k'XPh?KC_VmTo%us2'AF(80[k5/%/>1#R$^r+8f$-<f:(u2ZrUcp]jV8DSe:>?s@)Khdm#.Nuq^+%g4WsrDaEdG7MYHGhf$q\nmSF:<I>@&EVU=@1/<]/gQ`lf")-X5rIPL6jmsu:RO;Ln1'ei<I-pQn1X4#-gL>S/jG"D*pooUKJPj5X%W/,QR'/e!AHa[!@aNZX$DGX_W.K`)RKm!9]Q@snKS%dkqZ-KqA,XB?U(grGk#sPW3fgIlrm=QYuKfD4-c0911_@%l\/f3=,.\)/K%5g=fq6E*Xs71A$#XNJ/E'cLZGm<Gd%GI`9'U<@8=)pJH\?HeUh)ole&Zu8Vbh/.ad#p]M#TrS6fIDMgW$r+0qAQ`3G!\fEqI5CU7%%>:fL!X:!D]/pR<RH,k.n[&LXM$(9@8o_e:O[B?QSfeLZogTcO;BR/j(M-X$E+Hhf<fbI`X,oNqEN6^VP,6jJ(%"I6"i!d:+Lj9o%>;M-tFf.KZ,aW,E&l?adJ7M).-<01?3'TuVL"qAc%3UlJUXqC^,(51!A\mWY=+gc1IfS/IpN4"PB%.))(C:o:D/1DgE(?XD]Gss<%Qj(B@/5#>1l>[9I!%B!Z4K<`(:Jc'L%D\h.h$VU/%1r9aXdja/n,g-YJ]/YdTGTKI_//Xg-&OO[.p.V4".@W"HLFm.kYFIlRP#`u%"R=b_'lp&NUOHW-(,'WL!=FAG'Q.>BnB-c?P+=tT='FF!0GS"^n6^b5$4u77jht_V(LO]7iU6oLERM%(XA`&fhF,HnYgU_UM9OVW%",j_*^Kc_c?KN#T)ZZumj4IIH_H)TuB+0YYoZ]1%@sUf[L_XjUX&f,'\eFshJ=8k)['A>sb<Ef[j.(=&,Tl`9V/mZX/>$<Cj;&1]%639dbr9cheDTX@c*rVo9'%&dj\Gi'ENh2@U%5U0W#GT]\%1IjnVQg\W#sKI4)AXmFb$XWJF2e'-+Hc^AWJgk*rc$./^G5tm;3_;E%QcoYsXNjbaE&pU,FS<L-2J2pR3_7acOjJ]N/m82<i?O;'/CFP((f!rj'-Ftr$h"Yn@q(sf%ng#61(*8W1*";nWGorrSI(O%1$M$/%C#gLT%i4-?ML2nbO'7-cjK+g_FY1WW&ucs=1ek%USq@jCdf<u]k:b27W%2de4(6,s<t:EhN0upfYg^ea$"F/4H?aPO?Qj+g+XnS,%JGal4A)F5KTY-!O>eJ=k4.\]1KF)#@<7WY>)/=c[(WejK,bT)iZ7lFS`D+m,p!FUum&]=a5/ra?4fD"<3Y4^U\Enbfn9d[MJ4ci/%Wc*$ude,tM$c`Ch.Dc?O#_=3Qegmo=/e/5&kn4*bU4,tsX8KeeK"#41H8]$XM)V.2P@QKppraWJP/<)Jf>a#]Q`^-n[i[_?Jk0/%%6IC?Q9M6`Bb?-m1T:=pJ\I6q6nk1?Y(kQoaB7=gY6kE]JJd'%_O3$0)76QJ1?:K#$^INNLn"4+6Dnf?E&jBk>&;m$Z4DEobZO(+W%5nE'NibH!NX$P[O/qF-s0#CEI"<oWLTS%=.:kTd@2?lI#o!)#c/Gn(aeK9#bKHZS%":gVr@5&;Q7?.8m"J<haN4J$BGabX!8;s!E%l0tOWdKf.t*]"9Yfs*!O\dF\a[%)XKc@2ArOmG]rKpdt'$I`nT,Hs\32rXMHV!1"t5@4fdg_e0P:,_.o-/d05at8-sKVUq"iat@o%:[AG:#?FJmQ_9XK1#D,U3:rQY[qi4@#McCWe>tf`F0W9uBUq29&JST9,8g>p\A!PHi-$%H(^c(l,+BBS.'EXTWk9rgN!k[+?;Nsc%1Ud?0eYN0P;\':JRS3sTq\Y9G<PjaNCS4o$SS\B*Qg#FPlH'5cn9Z.Kd_OiHYh6(0V)k>kMJb[M)j*_VXh3Xp$XpK3kk<,t#/;88%6@e8eQ$R8+I]!On1MYZW"RDLF5cD%a-VkNsR^qZ(h-K[GO1,s7"!*7"Qpg<KQ;A$XPk/j,7RRHm"a[6Nc\RtAcg?NEqJ'`3>D,"b%J0U/U+iP;XJ5XUI+s)A6,n5)UBjg086((H)Ho5D`eR=)RO_AMG!]FPuBfI-X&-D)#8@3R;U#uIm%_XYfK<!\ZQ!hQ&,nLMn5'[9'%_"?a)G;CJh+RVJSf6^suiN!uXds'fmB2g4JmZ<gl8*R2RU:.r*H`*/RSGI+p7f0mY&`D8.h/?Gl=,ka^[R'u/YgP"0^&;9Y"RrfL%f]Mon1dhGGDOcXs/8>r<9*4tB,di%k!`dQl9qf%iH>$!V:$Cd1XlJ,1As=b-9q5THq/'^X/pB)CLgXXWq9WP4%aB*b7*)S6V?!_+%\[E1h*AD[T<A`B4AL:*Rjc15DLqo-36K1GRE&/KOFa>?$;9-?m\es;i-7PP-*qo(72KTHMCp2qD'IZp&`nD_-[[7l6bnNOp'%M,r%%`QNLRdN'.I30EQ6KftA22N4jO\Oo+eH<<=:b44=)^_?o>!n.*cNK@n/=?'+@Z_$K+<V3>_Z0$rB(fgLMj:?=LX&<qEPT+]-d@)n%@H!/#+odLlBt,4AL&H8IHE-Wi5M5VTknKhLc&\>CXLG`*T^mC<PGYg9&Hf4/)%2@Z#G=Hd`%+hK0k&K1O_0AnjtOl3],)V,dK*"`%Slh/-#%M$7-c#30WHO/Cb3qKjdg](Op)s+-E*`HlYelIiE&(ePD5N^5&($@W^<$97\a[<l)T]VB:Cf,sE:!mO[E,\m]M25lR*8>I%;fl-AdejZ#p8,)5U&PDS0?'kU*ipJa,'Ou"9)FJmm32_@-nqDA(i!$:qs3R?$R%XCBV8E^O0a5/$Gi0#4^]ctoM28lL[B5<7*]*U%7-"G2j:N?KmS!>*0K;)NXud@ZR%qY7*)aKf)iKNB#jdBX,3]2=:XgFZSo8KAQYTOm_,:/E[FVSs:`W6R?J)%]FiLg+Kh)s#FW%Ei%+<Pn%oA+se"2]PA8mOYGJOhe1NJ?W0[P>-W?d/l)[r+.4"u_[:SXBk"F^Z`X,/&s:_d?i4#!hn1agE<rO>Cl*nKgr;/g0^)HA-.`%$0mTl;e&L?585^4Xl\odmjA2Z+G^]-V@:3BPSH8Wjj]$^rdH6Gpih@5]t5/Q_DDhQk$IKo1m*YV6A:M@&Cnp[5m.JI"u`pE!Ra[O%X%OY(LV'GTeF1U(>:1B.cGhmbh[[-P)r?@NgRYfCe8(]55f@7UILc.[W,9iAhZL\0ku>KlAf<t:%1BnQ$IJ*l\)*M[&bRd-Q/Yar%7c'%0)HH<<8[c[K`7XQ_YQB[X=,'Z.70`u*XFpZ`JA.aLQ5`"0"jid!e6X[_i3";:6"+T)@^Ba53D5^=;@U(($DV#NW0Eck<+B6+%]A3'76hXa6!\oD!;+Dm!-QdQ;?dM=1[\_pVi5t1+<*9W,n#rV)LepB%EYd(UNr_P3/7or!&=_:@eONDR8+g.X*S?iq_hG/R^k;%.%ZJI7d;QVism#.JF5ZtXe0"i-,`=Cq+X'LRani;Zda-]5gDHA?'o0m=X#Hr2[M"*')*fLrS.8=n!SqEeiFqjE;K-Fs[oBa1sl;H_K%#L9gtfmk,[@-umgD>+OaM!d1E`L3(.6?B\\,%P"B4LBaMWtAnd!e6Jk\esCX/78_b9"U'$9V#>\/Z6+mNmDAJFG>R20@gY8Vtn_[%GK/8V`_;'04,MOt_!J9JoT`fP:95P-<P'@1Mup,P3ThG5[G@hmm$fe9U()(8EWF6''WX@YGdlJm_VkR2?PUe9&<i2F,Mnob=,kT4%-?j[3V\#O'\Mf5)o>LSFgS_L8*_00ETGEZS,YXZlOd@fo0GoFM:t7_W$hCUg?q_l?<KJYQ>OKj'b@mP.\_dlfA#.5T3;7M9R'bLu%(nbc3X_qt1_]4-"7P(m.e<>&3[TX;:M$3Cb6;:dcb6j&A2c,f!Yi(ll&%s>(D2t6tRg&+F2i!bMTF%(nc</N_`d*fob$amS\&]39%`N.r]Y0(CT"69,g>t$0&M7LDZKT+7f%B"*6#i=ia$uF.4/sN@WbP*jm)-`+:)V&Sr`;h-3O6B=d?M-(VJo->X@3/>oO=DHnb+iGU%I9$L;IEOPoLm,Cb`M.q,+lrphMhqS"n.)u0/^cP#_kNoWRFgW0IN@[;g8O(iq9c=u(_*:#+?1k+Y%tksfaY4I7ck\X,*=h5'2oCA%n9#lt"IE>O$e=gQ(sPG/*+3CCeA>W&`tm(RY5#5h/B'*L%H`^=:H.2?=O3>E3M.(^7G>mR;#kmp`/F`1Ed\^J;%?F,#-P/[)*2qU%#;Kh\Z>koWlX6GM7)ue(r;HjX`kZ2hYe-iT1;pcWYbR%8p1i1]2SErqn=?+NN7`E9@&THTQgDNGMQp].F#>?=THR^o&0'(&('^J1%W:\e)fKb4<ZA+BU]L.0E-,WdeS6VCAEJ<G)Y0Y(33*!u*#9?YmVgB.g"<JR,TZ2q4/bMJ2F?F_"Mh($!$#Y<t07"qB!@uVmTU_Z0%QhHHW"7_2A:**4P4_E@8-+o"1i#G!3>/$A;[!=(>7_V@3Ur=>,l"1ld(gUri2G@X9c:0p*ju\eu+PsTJ+1-S2_XR`Ji"%>Wd`!3?%Ub5N+9b6F0b<&]sI?AWgi]U`RDget:j/Y,c-OFE_b+Vlqgb.RQ2I`'ndai.QGVY#$e/W^5>GtPIS[H$*60'&*nD\nYb.JD[gUh6k%pObIrEU#/15(U4LS9US>:u5@=Sd-7;9UCuFIK4o"]0EDom(o7TP,RN#l7rf&]t6:ZUFq6W';Oo:6"5MY@0OG<N-g0UISC=.6,A3m%jiLuW*<f*5Cauk7j^FOSif14+"(c-!/E'Qgd$8g--lZ$m@YEBI"h=bB)9/%`&=fqdjVce$#3o[Z<l4<VR&OJ?edcqnW*8W=44$iL%=)6p\"U_R[DPJ4cjFlt*[ZPjo*q=U.Qajbu%ZV%=ZogGBl]I.0$mpfGU@P+lerc>N.&X"lk?7e_cr5"@q7'LjOa2A4c@eS\IWdta%Cq,fV/]<I&ZXW)s?W$b"ZZ\pC%!#]>(Q,JZm'.MZ?WW'-1B#%;W?$,6HFS+X^nc+a$!j;gb@Ull>S.@N-*R]&8W18]<1:u%7j0#^%"`<o9""jmg`EXD>>@Tr-@u5bBN0_Fh9T#qR]5W`e/eb2`?n<7L/b?Yf,BN]D?SdhHPg$@kQ-?FT<YJug?qh-2s1Qaf0JbgG&>'^.%Y3ojNUirRS_Vkmr%A![[IH9aWWT6np%XVU'4K6Ha]\0RZBpRbLk>_f7Yha2cNV4.-ESs9"7O<_/T9Cnt^`;eYC:+[[(uWnM8.Fq*%G^3jaDDu0EMU<nVJ0d$p6IniI4:Vd?OVEIYF9JVSH'-D_0).aiL;`c]5$oMNC5',!:h2Z0O\]r>_b4OF@u6-_L7MIJ:k6+4fbR5e%iE2EW%[-lZ8_>tS]U&)g`1jV*.Q<3NQep(=e!EAS;(Oa&Af7$AQ'@ChF*AZ.QV;4kq;Ah"F4;e2eHnDOC7KqclL*SG!Y=lPUk:'#%XnN16^1&f,A:&;-/]:jcB%R8MMOjdlGc_BfQN=H^<GHf:]o[u/;1mnt,chZV8-jLD9H]O`IgdU>6_T?^a^fDtbCuZ8mGG^q;On"d%J-Qr4."R/`0(`dV1]iaHW3Ie;_L-S!E.Ul2?;#C>EIg%%@I6uR=hG!%I@C%0+p,[A>fXd&O_2FOGe%!<Z5f4A9FNVF,NiSc2_uXB%71a\>3$9$'=Q]`YR-,/9UM<<O]f\hLL[@rJjDQ1pS!bUf_nWf5Kb6HW<)A@MmXXoe:f8hIo_&:`H#/$/l%M_iMDLu379TT4b>ooK%L@;&<L"8M#H$\sqb?D_6L#YKh"/]="bc7$>Ga[>?&A2ZoGQc*4$je1e%Rd;fLm!m0#Rtg9<p7*q#VZH-`l1\DAq]Ar4s5gd:p*oq%81,?=#DEN3JoFImO#om*qE`L52K-EQ:CJFdduQsfh/^S\Mg8fMJ:LC^CE;J;rZi.RY+\cfg!/CVP?odQpSLK*"E@pb.bAY&6uE50%^LPE"3Ofq78b\>c(*dHh,7[K&m:^]'SWL,tPCKZb&p71?p&Tmb;U`Ws3jF@3[i!8O%29<5*@27F4>!X;)9Gd`p9krQ,NUf1.;i+5%*ciA_=Q/H"n:OQh+I,TkK.E645m+'F(NegASbXlL5==Sn.#9>bTht%G!Z",#Vn-]C'eCVi]8Z7dU;U&hY<#Y":nok(!\US.R?m(0%F`^)A=NDL+].$`d<,r$/]+=ItS1IrTD@fkm.p7q76*WJ$2_Dh__5G)h=(]bZ[j#FtP\a)+/j`==KiX<$<ki@>F@`8s$;W.u]c8Mo%69fu5Au+p2<&A5T%-d42ARKZ+)+0%L*q9`H^K;XGR*Z!Fp8^5FZWoi]DQrc5&C@FYJugQ:Al[lCPU#[r_Y^PlZ2ibu@j,&\a8pX(%aVs[8ComhsAA\(0C!Mc2q*9qk6N8s=ej+$Zi^*(,jS+R*.<dFR$^oA4e-NuSb`+(X6neoX$0g]ieksMa,RJ\cN?E"u:Q=:L<N0_f%#:&lW:4ed7%OEA\'0;"JDkV3N(s1:e/W</16t)(EOpt6I>rY"uh(?Zbj<[I2^Dj,V+7r.=5Ze-K:ce0"q$mANs$<*XEeFjAd"JCq%A_1"<6?ZiZHL]J[AE:E.=@UO[j*8>\R8aq=fmQ3EoDnMsJcnBL:05dQR"K05K$SC5)V@[48<im=N`@#(3&Vu/&\03V98s%@_?>CD%2W/`D4b?Ie7R?!AR><VJH3ED`gA:lSb;/hnlU2WqOKuP1Hj#Z\p1Erj+*p.IbrS@_-=R6dP$m@+RjTAmauSQQl3tmk][s;t^t+PD%%.U<'M5?U[A?>iSHbTM]Fpt9'#Gn)'n6Z5).1q(qoX^pLASad$789B8UQC*sqN@#uRYkKVoMZ:I2(8M,W)r:r5%)\"g&UD0K%J)0%19K/aB'^XRokTu6jK[::%%!Z7)Ggd5H@W/hL_UB^J&#;9i4A>LMD<NBY-T6bH=2rq7Vo!O1p`Bokd=)eilE2fs5!C#YP0%>"^aLT%1P.Z9oKt6A"48Gr1+d1$i;LBLG7rV^l`40E(52B`ihN`a=$k:9b1S;_Q=k'9'&"#ik)O";b?0nTHgUpE-c](uVr%4SbSs?VaZrD%%XbG]hU,r0m,O[i%_-d5_&H)&Efh7o`dqpf)qkI..nPTIChn$5bQRA>r8?+,6T4R#)_/K;1V:XM*/qNBiH:YleY1P>k6mSL?>0O)P%B<>91F00TMhF5^q?i!0:I9KWZRqG!+>E%Vun%a3Bn<^VGN8G'N=&Fho4TJ:,"AUSAe@icEU)G3.EW>"n%=AiCIQ;SpHb)6`c.;3_%JH@QMh0"Aq>)F0<.r'jqdZ(-NBacR!U$R0@RkFSV-hF^gp6]`8D1_0%o.?\[SNXqLiSKHX!`fM:7dS)50XS7?*%P2ThKmq%P:1Ym%':Ob6Y#!FT?.GROJo\%@+At'@5':b#VQ%+J)WiqSHefI!61fMl>dF]q<mODTBK4V#bt*d74;),0\K\&G$lktBD]K\q:KEB=ZDm>-%Wl(LQ[9+CTBaHFN'.;Jm17H)E\h;KiTro7]F6REKUpd.iCokb'dR%:&f'';E>*Xm=p:>eUluI6Mi.(OI;g+Hn(,EIhObF[]mg50t%17s`lX8]htOc=&p6ei!7S5I%'Q;ioi,4O>L>p4JI%K+dkQ-an`b:hFXH"DJ4gYUQ!(9<L3+s8';)elZiAG@ni+sj>7%r*Xr'PlT!%UD.1Un`G*>qOSsOFgDHo63cbc5g/Ok4<j,=E:K4L#dR,)Q<X8P3,i$./0Jn)=,[b?9;u)Q.>1#J2?dBe@l*C9N[.JEHXT6Ri:W==%;'(%#0G%JPck7]``i^^Dp7`Up0FY;q`;@r4+2$/_Kc2h7(,0uWWo[-&8AnUe!$PdNAI!(O0<glfklBE6[;%r3h<7CXg:^/uV-D'S%ItV6pa\IqM#&9Xa^iZSIrF"pBWT"P?T@M=*-3ICf^S(`F<m[LG6>'R8=.+Zb03l]=Zd]hnp/4Un8ucC*)Ggbg%%9;5nI`=ZjY49:%hpF](_`J'&%k.ih_gA%Us(:nVc1kO/[#?oS70O?Y=@Zr\o6DI.44iM(Hh<OX,J7a`MEfm$;N.Z6Z;$t_,Li<]^sa.]LIW?!H375U%I:RuO6]*<EFY%!E*=7R5<PB]IIt>DMStiHZQf'#Yi:qaRe6.(&H>4__\3m,h`h3M2`QQn7g*cB5UPNg(%_8'Cg?Rh,-ke7:5<G\L%IAEb^[^$M07TH,A/JqJd<G;r-a7!:_Z%\(;JssqWW%8eC%YmuXmX@3#"n?G&NX.WIDC/0ph<'EeE<DZt]Yi!8]_MFTq<:e<CMB9O%r7(Za?)l%N20g]Q$_W*t"A4"f<JVRrKugp-cogHE,d.URZtf)'2\'+IKXd-G_cpR$_or83G:VBJ,9<nHZrUs4G]Kk!k:d-;)&[:>%og#<LjoMWVm7_I:gEB1a2'Mf+Hg"II;M=`G>q&1S3f86iF8n0@LAkq@^<9;a;H7>E+cZLK'Tb=;ZL?g"/gX&&Ap01.eMu_)ajh]"%=VOpiPDdn_^tCEd6Y,nFj_[Lammp0YCR'jB[U>d/HoNRBc#+%?adNT(#VpI^U\JOqARG1)&Ik)g`K&c[kc^"95:o=%"*s9]J,aa[%&[GQ]6g91KkQQ1\S6JgK<*BkcO(9DrS.'Ud)''$8kZ^!U:9!;*'bqV0Mi)V9[osQG!_PXi3m*+6HjRL$le5kMFqLlBa>Y"&eRdMO%lMoui:e*%e`21.nS]#[<@]iBaLi*'GWlG0`G$UKU<Ocm_AlL*HCXDga6;Pq4SJF(9"q`\i%`F[dp^u'T!ZYC.+Jq3sF]h;=oj@m%%IP%C=0LY=_3W2q]lZ4q7C[L&f;rAZUdtmeh#Z)nl/nkD[MIT`5Ah."=-eis/lr7ANQET"23o9d<4iY/QdC@:ca:hHoYp;a)RLB).%C!>44`7hRHOpqmCM;<<0XFUEQ]PpPR*+XF#iFd6R[$":M,hj2=%.Ze3>KAo)Gap8aN,lN%3)r`#"4uA1gH"11gXhf`^2@S=*ZIJ\%YF<WNo>DQ#f'FN\4cj07IG@;JR`mi([8`9bqf4b5+""'L)"J:jfdlMa*-I20,^d=h[IWS,ACiCW/Y)PfdB4Ij]%4ui+d6;#WEe;R%,Ff4Z/Sm=12lgPaak]N:4nR,@>hhI;Q$U>OS"8*o9p8_[T;&e%ZAq]B@d/He_$`o6Oe%fVHC*eR&?:RnbMA`C"&`*)25rF3""H=]%NgDNR]ThUuf3YU0oX0["+=$\-YA*en:pCY@k\kS`]+-@[R[JrY5:X.G%JQk*@`,@^`lRe_m:'17>+maY=-bX\ZB//iYYK"R'&k>D%8MskaRu+?&12qU)!`a:L!pR9)?*D#86p=l!O#&c]eF<CjADF(ZqFT6kpTjA+^]=+&HdJ+#oM3%OiA:eCFiR&(AJpC\_H:tPG:,\e%Wccrd)@HU/"e+(T)rgCW0?3D\9,_S`E2i^8=d0/-EKXh>+[T]u+;_15TGf7.P:&H^E#4-h5!\F'iG:Mi+QRqir_bYse@Ct$DI>e@%jK>tY<RRj*YYh;K.p_[H5]5seM9$9<CWfANX9D?l8klFJ<XG!\UPMmk/Ch@>-#ON`]9VPsMS>V+[hJe\+sA#3/L[+bY+:hudVA/?%\pNhV3Yb/6^Y)Ju1]g9qYrIUYI5fT=\P<:T`P;Qa!<$K.BL!cOpKB*?!JQ:egTDJ1k->sFd^=ANL-<9!`TSR6/uE99FBbt\FB6:P%pt"+RRW\hs1(P5/$0E5\L]m!];d`f&jMBAb$aiDT#Y0Q2gLtm9&AY;>)-7gd)%O[2'mO3F2MYn5;qFD>'!g`\)Ha7V:Fu;R2#p:O%$b<Z`55I1]dEgC1DnZblbK'<EV?FGt]gI4e[R86HC?PdpFTBT%/le7D0+3`^b];$<)k"[7@hrn6ha_EYQ=rW5.\H&1BODa,S/<F!%cp;@tCpM\B.r1@Q/i01^U/bWgm96!*KC"GmGm$DW_!l:1(LoNG,d7pO(TZQ[;/9O-_-lrDKP+W(nD;EH%A`"8!i>M$TftF]mZBX/%D%K%HnaUM1_&&^'SX4WfO1t<nDuJH1O8+G'I-YM(q;a4,pNp9Ip/H!\K"*s\gn.5GS7-<]41?T4qbu#3M<i^Fm-Yi@[kK^$fj?'\%0$^dN_G)(1WN7R!Y-_pQE9A%Dqtd^q&jVD;aa(.0hX7YX]CGjFID<t_q#dgJLDr24efT2!]A36C[iWp)n*/EP](=$Mpi!XUhS!!8%mm5fWS,ZG(p=:mGiBuN!gUEdM$SVM1j1dYp]JrF:T/gdb-T;G%b=28N3Ie=+]<%!\+Wd=T`/==%=3O7jma'>Ua6q[aqTWG4[Z9@p%o&hUu"-2g@G5Ph0^>%^e*J/XiiJ!b@l]So"?>^dS>Gp]9I<sjeh7@1,%bqG)n'3Z#FWk+:S%"FBXUBLAm,#=mGQ.39UODHkh`C3Z%*<"VZ_<pdO`DL,2@o!.EQ+6'l^^J-sj_d);Ot:aV%1K,1YE$SU[cKK&r0q,B$j`p9e0br7iMqJXfE8eTI]BF$8o<IE]YEY1QGl[.%55Opu\8;]=_?g5HD#9F\5)GXG;k7`<A;sF)$9]-H2NU"".$fuRZpm51&\P@7\bLG<m.LJ(Z=jq4.93Q::UE];VTWI,^X@ZC2?YXn%eu*<TZ7Ad8nL7QXk`ufkr4EYrRTSq1J-.;#Z]?8delgd'_uZCk\J<V?%nCeOgNVGAQ2tC6Ekp,rHW1lqE:e(p"Lk:aS!1js=??:+%K*F?HP6%bSYMMh`*Xh%"%L,Ub/@2rS&MGS??LXO4b<TbeItQ>!*S2:D_J=[$>YaQ>BItOJCm@Bl49D22Z+Bqpg,DZ6)Eijl7-R7!%jO>1K!rb#*@&fRp_uaK=Xc"FD[:V>X0l&,HP*4c\&$SB]@>]N_kf3b)O!(D9P=u_p'9jh!n1qRkflesX+9R/:Cok^2Ns#q9.@R67%&a7+4#4#&-`T'<hRFJKGM/&+!3f9s9+_G8d5XI6p]5mYG+`0!WeN->CQ2]ZBbD$<On:]cdIfg:_Ulf/q/&9^0<`a>-jGN;lE8+5U%!%D,LL;'0k1t[T6/T*gcU6"_f@'(<P.skP3'@G6'CHt@bI6kuWG&Yg?T!,,X>?7d)Pq0l];Fn.<7Mb,H5RZu/jg'Ou(6"6ID]nd!%4$C!CA=+6%8EbQ4NblD[>Rm_n>aQEqQ7TNR,Gr]$\#5l$>sX-.^d$iM7"1Nj&a02$Vub(eZN.^A.W:[(gElW<Z$rs^^Xr[,[u9"C%j`VTSfrn^uD>2fCm=oo$\))#?pUg+c[[q;7X1=n#/K(cjNK"Au*>'S<>enc:RfQF2!'QO&lF56P&Cc8.T3q4+)R:j&<XMs1ZJleg%!6rRf0Q_C(7kp!TM2)UAde%bIPiZ9pHo5&E-e@Z!]Uu<M'DlqZGdUeh=B]SYTt:KoG&b-""^`gJ[u9S>1AkV':8i7R8%pNW]oO)Z%.hOqOj7!V30fgZir.d%L*HN?%g7/2nGs_GW4X$fro^tM83nHW8gJ9gr[nbDCHZeM/`S-U[a?6MpR04eIE9n7^Z=-4#j;WeLarL6#%W+@huoL-Q-S7#Q&0WW_GVJSHP-rSH5;-e&EM'0A^9gE-^!=u_u1DM/rft8%Sj4?28!!bFBG5#_i7mEI7c^2)f!*Gl+(+eX!Q6mJ@%l<`#)"a/!icY`s3fE15iA?pD*]XqAMbu"#C?7;"Fob3KdSsqP",p3h_b"`"#+lQYe@7W`Bi*t7U35b%c'eR.8$+qpCR@.(`-GZGY%jHS0^>?,5Bnk1E9\+j$?6o,-Cc1I31-oXa)/F:XpAMGqO-+:;#A?W7I/L.q!3K++l$\+X@_Si+N5\1A34m#m$m&*\cj5W*':#+Y=%'_/iYat<tm]l<M5I).n*nWe0@l\OE.X=rA`HWU!fBn#/Oh`9`kDYm'Cs7nWnHZ44PaLF<ng`Ba-*HQPN@>5,S+0rD]Pg8Qma49E_%%J/W4dm,]ko8>@!4F1@ooXe7G4+CS][G,tP4+m!7qsDOF^P9C'Df41(RoSgoMPk&R)<Q+Jl8^S.mXU>^ibC26nRU40I@sc7d,gmE%SUpJm=$U"/3AXr*5Q[N7W)Kn!V,,j)I*@%hD6mOkJp>$mf$Z@g"LQ1OI"Gn#lX_uQW,`&Fc)9W(C;o>rr_;(G%$$r):VNNmU;i0c%-c#K`%U.Q*GDcYX#Jnjp)`2aYRl(A<5O(J9pA&M!m26D2dMZ3S;FV$rE&KN`-)&f:;%R:.$oJR..PG_BKebs"]DKqEoop6?Sk0nf%<:=,-D?qU6DPC.&G%bh-T!(<XLDPV#.pFrBReljG_%/armndT+gJKe1mIa&\a/L3T^cS[A@R+Ptki9(V#2tS-R-ft]k!C[HcS^O+%bHHX!fM5@SA?iXB2kfdDb,u)oc%(c'">V8N,a<+=d*^#[WHb!kJS/8ST7s&0Mn1JTjjkrKnXt@("kSrs]i^HZ9b50Ko@ZL79!i!]%4&!XMA.=?FW#i:"hY(s:)bu<#b@C490UmA)[L?4WPc1Vf[\c`-gW1nq,j!0XE.(fW`K;2N$nu><JZX#&b8cnSQqjV/,#\>OH:`]W%?u-M`VUe:)`1(+%n#g6rG7PJ`GPW#9'MJrFb[qBt8BlQ#SKMZ,edr;SF/t^F59uU:Rop/Fe82;3(?G5P'51*n?0g.9.I;Y8/'fIJ%Z]=(4AY2H;:Q''A/i=eYUh&-6SL3Vt2/k:-VIaGZ.GrseCI)0ugnj:oaRM1OrDOa+r4'E?IOrghLeM:U*YP+0TQDp>BQ_<M)$$J=%"3a<7/XMWKf5)uC-hIhDe3\ThXj./!fl.M/:l@;oKB?.Jq9QCDgZ6ND8qWDIFN)OHAq])93>0YaIuljk3+iJOSJ.2;iu5uNK5ISa%Funhd7.)d\@A>jsL5\rq<Ol.m"N`V`/hR\UT^[0($OCSeQQj+eS*rK+>@7<JD>tI\HfmW)Yh-Sd&'qi`*Y7l>UU`G>/IHcq/b.;r%[PtNf<EEZnFsdT&Th`"bo(qRY6M\"mV#m=0Phbs*hs66slG((R=hdo>4PnKP68=gF`*/IA65P8rpXXDfGq4SC,5q&YV>./?3c:Mq%C_k/O[r$In.)Lb/Hg9uP^H\,D$4$/ZD&gC`(kP28f0BO4_Ggn\DMN[OE%Y1hh>2)3T?TU$didLPlNdEslHqIKT,8C4'-W+g!i'E1%Au-#q56$27;b)ctUT.@(1A&ctBfpECkNHH,_h_IWco3]u\CPI\#cn>1c"hOE8&)e7HZp"[nLJ1t7+R<s(j!t[b_Rm=)sNilh[:K<%T!]Wa]$VMco;/)![X1i=W+;oRJgb`#:KcUD4[-^0^sa,!9cX#4=_\4iXs&jEfTXi-:LEPKo;>R^dl;ekjINd)HJ<i(<,8Up<*D2+%8V)B$\I:p.LnHHsjg,quZE<B!;Q@dB/J=].3-O^`K#U2)AKed(+>WM,RL7JFO(J3]6Jd>4+[Rp;#Z-XmDkL!\6d?Q$(c/%KiYd8!%'o;t/'RNXehQ!=UkI'RF&P2p.W<U,.ST1h`nu%s7;Tq@Im(?@@!oblHFR5BHMu.V.lUrcK*=M(m`K0O]iTF#4NMIp#.KpM7%LTr?%/GaaG^iFYU`IV7?0aTLH)?/qr=)b3RV4S!=m>.Ao0<!A1i^gsqe(TA.:iW10%Pu%WS5[/P6h"?P328+sOQ\0m$5E,EnR_))&oq(l%Ze\lW4AE$faRLQYNR[[N/,T1lZe&q%LI4P7"_mHP"8_*gRF*P?*cL:@oBdfbMm"U;#uQH?:NtZN>gc4EgOZXL:5L<'2,:W(0Et&I%CTtUHGH*cuaXa]]X1WRF)BReB*hoc@$Nnu/[5[RPkm`)i=Lp\?;Z/\kj?1+j)!;eP(9?WFG^N5XSheODG6jKp"i5!G0c$%>\)*MB%!?]>@e"bP^rO=tj&7P/4QQGZ]&<kji4t[2:3G9iINS;hC@Pb`/J+_^ndIshY^KJFa[SI:#E"Z7gmpQZhg@YpHa\&cSWc"&,g]bm_%d0!^5-[8.n/c4'tA(705pGR@BE(Lna;Hs#0iJrqXLl!O45k3s!oY"&(esB$lT<og;lB7,KDSFC?DH:<?qr=RcOJ.?E+j@K@o/n5t%btFR4$^g>.HIP2:#ZJm^A:Shfh9Nc?F[BE%a&r:=bC&uu5M?K;-38\sic[,]qXbW&=ZcB5$bbBnj(PR<kelpfPtpnV3P)]8Re,0b%asZ"o&MMKE)O.Tk:ni*\#59BT=`U2OS?B`8;ET2U>bL#NG-WfQA$"[q8M#C"XE&)P^W!nb8i2'6-NcC?Xb(\tHF[NjBak>`hdLp,%<h2NAU*Q.gFg#EpJc;_k`;i6+)k_JAX.4suN4jgG,;#2nilW<-h:a!b2&ot>`jB\Y,Ts5;F_hh%[g"=Jj5E>,TU!/JH-g,Ic:`P.%GAfSPn7KIL"##J8@##E!^CsPt3\"E_p78<4K0@2=g40=@C\O;5Q`D\W<?\m*S"d,g.W,YLW$8JtHSpdfIrUjr;>JU!%\:U+>r2k'%9`VU\,97Ujf:A(SY8'_k@Wnis=;HF5GI&AbACM))>57=s1WHWRgD`u8"RZ&RGV"_?Q"B93`VZ0C5UnW2P9B+e&Ht+2NZG))hh#bo%*\EVCmI^@kRGc!4N#3P1/k]#>`uah[eADJ/k[f-&K>cpg:YiiJOt3ek=lO`6PbV6Y7[DMeK"OU6Y?$Z+,dkof03PLhSmgnXaq8HB%ZEumB;%AgcLm\]/%'r$L'#p,T#d_Fb]a__\65U?>j3%]kQ[Hjf+2@PKN(r*_Z9JG94/>Kb:6^!,bl"tO%q>"b4^K-]7."Nl5Mf*?%-U,1J/l^gI/2-^V(!1[m2\]iic_IO9#]mh@V/eb[`Qq9:_">9d^]P.G\%!q0#:@ih[oi[h9KsBEC]/(.1XhME!37^YQW172Bp?LI%I+)?@hC+')/!0m9%:6cWqsNiX&!r@VIVos.rlX;A3=cuX"09rZCIV?V=;7nq,Kf,n#3IfRV=8p#>-EtuUTYb0?V_41iRNJVF(Oj_%[Rs*=E[L;%n+N1j'dQ"Inmk3+R),ccp?T:KT`i)n=n1L3T18,5%+Rn)!u2!?VJuNJ'o-2Y77Pd1l%YN@$5I(2>H3foVrD._B5TP%%='-aCEXR\1UjU5q9,_S!:7[3@:$(*TNj)K-"/>c9[quKfU6@X=8"n?N/BSl$m>5@P$HOeU!<;KL@3IeMa%7#8R0BIZ][2>s$]X>j%AeDr8(EQr#"2MSg[e%D]>3-I\G;jkN>B-\W9c#K\JN+[50kr7$1_d5)4\8<KFs7/_?/BnihY1t64fj/3e6?kLF13p2X"ft_Dh``&%"/p?a/0!?_qr;YZR8lV[&_I[c8r8W8(#20#S4KTO%b<Ts5Ma"e_T'8+WA!g70(C;OB:BCDlOqRdYRZm#FU6l:HB<+U0CZ>P.+V68%k%[ao84IiT;Q'*<fn3\"'$-8*cid(RqB8:9-gfbd+KU>o"c_amKpla-?4!_],JuqZ46:6(2=uRB6m,Rha'ND'FDDc-$/UVf9N(9<%9;\4>btZ6dAm?Ym/(+Y:RZUOPOW=%*&\*&b@XVIKgbN]lS*.KWK\-BW,b42_93k$+=+"1<@()aCUINgmMC-!Q=,_T-GVBWMJB$"A%1PTSGBGW="l/^AhI5LeX,t\J_rJp<gE@9)%mQqTJBOMaMo&FL&Wq6eNhQY8*#H%B3FHDsekc54*1sg=6#3%Ui1a-[iRfM`-nj3bt%j2(SS<fP(qCK;3(EG*d%W_7tU7Iq*lMWg>N7gmRVXWJ@PB&;2'jiS9?d4?u&bp)1[(>bbLP>]M_?rhg^S&,/Al[J2s"E<"cQZB1t%h!7oe0GX#armWETa,sO8g3hBhbNEj'jp[\_Ke*_T,,fS\mCS-VGUV[pEQ=5RRb?OOqC,(#g]P.0A!2n`)UI]d3ZtGqe^i`RP-rY:%,skhkd7+WBScQ(f-!KNS-UsnmZJ!R3JReO"D&eQ9=O0!$1,QLt4?iJ28K-E]3[tO.SIeYEqEBBW"FeQ_+7UFKArZDThcN`^R^J:P%qmLu8Y9c\YDX&/2qfjm._MA3[II<>u_/)rFkf"0B?_;dCrLaWRoC*J?Sa?OuLT`F;&,fr6IqUZa.cpI,I,5:Pg<n[NE3!bQFJkRW%GI(ea@"-SQQpE!`^P"4'JQ7;gZflSc&^%P)0Qq/5DY`jR8aS!5=s!NUAd@<$]mHI"N/96ZSSEs;8jST0bB;O]''0LHj0TQ@;*,fo%.V^p5nldKb'u5\)?:s;MqE1:dCscb'g3$:-;a#OHL=jk+hhl%9?EV[qh@7a+)?0!i6F-%Cm1s0SHsC@0D@jfN/GW0H3hJO0KEUf/%)9":KfBTCI"&GgFgD]/R&rt+<BsN:-G5so>Q'8+3(G,J*Go=_!BOKeC=ZI@$-3PM],K"eA%c]h@Vf*Qpm+Q6)/r/+!0J[6"7qQkW%h7a/>'l.*b<0pGAqj3t0%C46"Y-:N/pa%E2qPI4-?90:&R`p,!@e?WU9de5Fpm;G)Gfth?<SO1D=<k:d&'V6pbB10h5Z+#:H"b.5%1!/!s&C4H`0U'+:a9BeY'u2%2A.$sfKFk`r\fX^%>c$uHbs)/_o+1UhYb<a!25AYE*aeFA^A=m!&@.BO8BuO)dLc7k0DQEY!9ZX"%<i:fZ*7-9k;4a5+0LA_/_:TFBVj59>i/r_lp_X8]C@bm[Na`0/*-A&3,k#p$d#RT=MQ.,Q;mQ.e%9r__kf!F\7f>GV]n'4QRgYR!%R60J;<XA5*f+Nb1D^O?`g7]h$18f1R-dL9iat`]/C7$Qop`B@mpY.$D(<)7*:B8rp%?`nG<r?MmbjUVTOX'PW@'h:Sr)A2hIn:aB%J%u!M^\A\KRGsoZN6D"pq!R$gpFlO+0E1Uahu,4Crq<s2s7V6:J,HKWrhms37rLsLAS;#&0>I:k^\dQQ5Q'o85Ph]NqpTK@IfJr)%^]!!_EpXruq&cdjs6&]d*$lSug@aCpF1(t&&^:)"$<"/t^:7J'I;f?%0oS1:fp"1SjB>p)"g;hJbn;"^APs>4Xi2rb*elZ.B!UgN%0GOe+>Ir<9T:+3];"]E).X?,.2^4)/V#AE2LU..Ao]Jl)UB*pi.!\h2J2Oeu_0?Hn51rI,co+>%*#:/(K>llj9%YbirhW"Xn2`[_%V+"7)AM;PDm^=[\BecJd*)-d%psaKV;R_:Um1VWK[0T32b2!5pT2;V+>(+iDN71Bt=b2EF%4<<]_?(>>%_o+lA>SC$R?1jm>GZq[%k-PDNV@(!*kesk7IYfR<ESO0-_>OjCI:LK!,$#?opheP5RS]](1t(0),=*K(-/%&F'hU'!:(A'6ZsFeMM3LhtK?a!Q2FT%o.H_i,%UBMZbd/6LMQ%c@dVrgiT=h\\C1oR]bIe*YO,Sl6;DNkB^F0%e,9g;++`)m]tq[:kS;Kuc@GGX]q&6VI76Er>D9qk%?821T7Rp#0W%X6Ms&%$#CE&'mCeqp)6kb]t65#9+C/YsC2rok(jQ=>e81r\uT\ACdD9X5aa=%-H6&%@+7t[n$L3`u/A@]WLHD7Q)NIEStgAE)RCK%K6!ho3ta=2rq<^!"+(MjGkV[bEO'sHA7\cV`";Q]X\DkqG-T;;73rV4KuUE%!cPk*XO1m@7*9G-p0!+:3sMmC1@<<o+$TtuC]GM<%E`l_50gI1hf%n8iB[p11*#%V+ErT[eXYP(oC4,f.`7PpB*&iJd\'(ACU.f(iLabf,s!NtKP]#)cFVFuKUT3OpqA2pFg1tSt,E<u2%"pRR(kMSK2C#&dMa1/#-"aHn<_qK?bip<?=`q,"tgWf)s;DPn<ihZq`U.2b'Z%3t8-nidW-PWM[1/aa92+9]&5Ce[QAlO^,`Z/I4%0(H(_8<0Lg;(JFQ:a*;^oG),94K@ubW6p37Z3/_.q0OC5ZQ5!QYZ0h/Z49d('^9:g&$'tBKA440<g)=QeHTQn>`!tMV&ddMggB9!%aDa?O9*6aa(f5`@I_J&HRJa$g&*N+k]L\p<Te<'cN5>\`8'PcWh5,.r:U=;o=((l`DCAK]Grg08\;kY^+H"7GEg2Fg/FiGBD+W&;%o7-c8S6S'@Fs+59q>'M#GLZ%W#6^NLkhS_[nD^RBX!=eY/R=>8nR)=iLOXBQn[kii[l6,/=m#X7n,DuE*2f<Vo:+WEs87eir_L<*%p:KemkYH^(gV<`QT5jk\pHO'*\%he0b?t2Bb?t5Ca$9N8?gJ<<IfGnpr;(>]r;If;map@ob('0?hu;aS?g<u-pt_:Or9`s&puO/H%0)af`Dc[V8og>n^oA<fNXLmd?0$QtjeL"VZi:.%XIde0Rq>9&3?E-`T>[J+)o*:c9->ND4rq4tEieQi(rS>B1?iTQkhu*G>J,AWR%?iTe+s5mCm<h"@0K-.l,pA<`pH2I0q^UjF6=$PR!5b#:ZdD,Rj?iTWE?2F0Ms3`s&9t\.*?iG$;q]BqH]l$W8OK8E3pHSZU2,rGn%qu?'@rH&;DcgS%q^]!jb^Qn-bSNY&t^]"+t?i9G\5N0t=(pZBtd!tS"Y9@fD9S]#5Q]+$)bPnq]9E5$i])%K"1C(#;\BA5Ba^7F8%P$@+!L)\1Sf,J)s=mS^aQbWHTJ+hXJ:G;Q;kA+DUs%,0KRGN$Z>s*)TB:d6&HN%Q'jB1mC`n,\&j6KD\p[/"@1]NsYiGO*NI=#5+%['ROBnf/Ul^\EE\aXHu((O^B#T0,\OpZg5Mpp+Pos0nTAo)#^smD!SKA>+M'Qfs:ka^39eFb9F`iMUjEo)+h]fXCb)gX0N3H26mj%J)>JE\=^J$eb\ahX2gc02pI[plY"iAW$mabs0a!J2m5*nroF)rmnLFJ8<Wr1pWkjI#MBrQ=[_WbS'fA*bU.LC,GYsnBX8KKpqHNQ%p*Y<O<EZ:9HH+di1Hfs-Fe_cDAn:6?R8kI%c[%hA6$Hr6T\91DaWDoG-;1=\K6g@f4STT;90)HUMGiOX6%lM3Bf4V#$Mdkrp+"(H%C<_Ds&C:q]q.b_k4DrMKY=-U&3[e;!f#l,jX_+D:lV50$T1Q+*QTDf7"6m#coTdpHJ2Z9LSHe0k-.N`XM;dF]'<aQ0@#PFe*)mU;%M4);6S-3C+Xdpee8M$BUKA;N\GuUaC]UiLt''`Ns.;f[`?YJe'[Fu(9d(H7e]Sh$MK(og_,tkX(a^40K+U"JS/.;qo/_57@i$H[N%O>`^8jE28BeSYmZZm%c1?>BOK,ZaZ.]u7dsB!4@S"[fnqnuVL(9P&ajJ(K`B+mqu9(20t38UgGC!M:C9$"rS`(F]+3S;ZA]8mmT-%JNg.<auZ`]X:S[Os*t(CP;;q$o8)K&X'E&)ra;JaU1!mkZ/MOSTpSSJPo;-?Z*aN)W+j]X%ouZc%`8PMB7b$\F^"f&gA1Kk:$Y#G%1HjLa')[n%$f"@#PP*E"2%'1EZ2Y!HDHW1aY5]]\oKTV\"iTi?"tEW:CDT*HV,%`9q;2jEnCuKsM+>J%VX$OSnh8K<4?hml:>9,U%Qc';mBDA)rrH4+B_[Ri>>H=%9`66JGeih-\rd3'Uj.@_drlDDF./%VK(&Bo(7/]4k[#OAXkeEo@n=l_aSQ7glp/J'!IN&k6^(XjJ%PgmM<hjK_<g8-Rn-KuE\lpoFe%E"c@ScAR0#.!>Re=4,,0jOHX&%Z\jNh$HJD+9b0SUZ@dh/^1BXtR<A0%CeHCCuDg;Wg%SMuYui%qje;61mbhFo"WB(]>*4Wc`H:.&X</8K"p6K_sK`Y2\Kc*C@<h.-N"N>o0:n1r;E5]YL2oo("sQr*o2"uph\.RTDqh,7UBiJ"e*@.%ci!ae0+hR4s5P,j2=0Q!J%MJ&h55\8S'*Z1>2:f+C[/=i?fEWt=(L6=;U2:VS0^2S5Q?auH*L:_G,q`?A&SB.2\XGC)>d%dO%cSj%N=7InFk(<%fl(D)m97m8T]So'EiC,HIa+5%]iHL;6:PnFR`DO6ZT!biTjZ&^)Qb+R`Gr(COKinHFY3BW%3@Ss\?Mh>/U\U\b(3Yb%DPRqFl]fS"NuN)4N`[/A?rnKoS>ar=Zl6@P)t`V^:SH>J`_q_:^XVV1,O"Dg.TQL*6a72%Fn&B_r6N-o<rO,ed^=k*V*5kNom`]8%0^8U6,DcAQI7OI^ar_3]c&i:3S=KP<)#BTFs8Ldun,NCR@^jj$[$j2mR9%"-H49c[l,E[;W*^6"IW=<m+*\5nMM*VEdj>%`^KWiE%Dnb'Sg4+E;p4p+=%/\YGl@5,Tc+g+1c+gmCS\M)Ts7YUCr[m7"rIJGXmnYIQFlV!GIOXe9_"2;ja0ZJ%2*\IJnO]9],t8eL3XJ7<%>=Zs\F'e\jD:?@3hRlR$g,AX(n86m(h]9/)iti+ODU\B5mPt2;]6*Q%;r4?2AWu8[\g[=A\g-9<_D67hFa(\\X^AETs.EEN.iIs!%#lj@[[f9L5bAuF[Fm5*dlMP9corh_Us&jp)E?,X9n_7sq`TmGXM"QgnlMp_6ItPVuQCt(']m$B=*+uZK].Qa:iQDX^Y8DO*h0N2B%*g9[h.E(^CNO`XII\cMQk9>s[oml=D-K=f/7Lu-$>duqnDnE[m^[L1mZFK2F$q"ZfbK=-,/tZml5QTjbH,Ni8N?TL!6XAUkV`kiV%533EgW?j=YfDK"Zh^5]7;"2&3JWdA\+l&mPW[OaF`@.GT#JQ413)3,46p(E3c\N?Mo;[mB%kpIgc]K^lA$1h@&"ARbOk6*Sa,n/S%X5%Urc!Ij./)eH"d:[p+bCJj(B?/#MYJb,pc&a%_IqY*.Q%XBe=&7b94FG>qMn#=N+u#i8!*["a-EHOb)Z@8<ar!L6Lp%)k9:__Y%r^dLK.YKBKa612%',MA?gP09aPDM%-&+tD@8lTB*0B1-f^;uS,J77T0:382D/ldX/fAJa0+Uc.;!ps$,#cgq.FTojG3*L%JP2Ra^%A(F[DjOQA*9VhNu<oUL9-#]gS3>.a_-]U8S2sC/F'#icN]gT#$l]iN+oigfsLht0B'=(TAZ_5og-OQ^4A"O/PESP='gL@t8m9rhj%oc&b:T\HL@6Ven5.Pu#]]Q'Y^1eDhWQsKhhF@<fU>U:<_gh`7J>Q#VbYn\iQ!OYBrP^3APL7CDh&8j#4rWPk7#2LZK-<=E+HniLf%#"BU*HYlr9qA@?=kL:Q,'\X9FGEM.;5.`J@*G=uZUmY5.7%tbg,p-B@3psAT[<cd'r/A&6)2CqX.B!Yb/(\#1OO*b6,a!JTg$>5=%PB)2M(d]W9#l(3&!jRSKn0=lmlC4*<8n#1Rc"m7`3c4Z$mdpPAHEBoML;<WrZH>[Hi!Uc#7EG?1M(Y]oh,-TYLYO+A#RrAop&WAI%97>nlJ9shDLJkh8/5IttePrGF&q?'5Sd"fC;NK>"AdpeJfe.anNZ=*_BU)55(kddI+r!\Gg/p6/C/mifL'S^CTSCs"2\P1-E&.gh%G=[rH3Ff6H7^"&Fn;*h_!V0I!'pS[J6fP&(n_M.:3'ZIOR]T[$&leQibcNKqMcY3>-=hu];,r9h1XN!mW(j1RZq9U;e;U_*C,CH@%*32;_,2C0&Ki";HW]1)%8RV"/8sL<B(^)!ee;teZj(reWB<UET5^j_`"R_2<)+5Fi)M.Kph?`b?R5:eq@askpm?%#bjaP%=@d^E4%cTAOiIP9ofFt0&#ZJ=pB=q/Ru?:I@52j0;!Cl)eY6A!-&7coUK;R[TZK2RMaUOocR>U(NR#NS*98@MYr<l@tMo8&Y$ZN<3VCW^@h%TXHA1<[F\'?VNl!o$X%[ZP%6tF5-*-J,mS@$Cl(_0S\l43:6n;[ors]i3=p3'="-\g>c*kR?#lb:-u$>.$%!OKBhcbH`]!nEVK^t%duc^H*No,lqEq;23AmDq^hp)sg?<Y?+[/Ui;V<m<WYRhtpu5gOBVT_T/?VAfj*YW*O=G?fO%lI6R=rZ8s+'On$SsO^-XO!l.s2qK%]geta*ED$>L:l/`R/qe&AtuH,GET2UknrM_'A$2\UeKGq0P*q-i/YT`geK0KlG0%,^ht8q.6p>2@cPmL(lQiJFfmIa_Q,jIVs7oN%o4'%A*ld2Th9fI\ir,7Ya)8Fn0E7R/WWZ)-fq##'K[Z^M+Y%dbmuO8D0=>0L6\m[Tp@`"V3>jZ9P>62=_!4C[[tu^A=Me^k-8Pgj%e@UM5fAX;SfT1)o5UA(EKOiFiN@0p5o&<]mS^nK2AX#*`eQT<5H3(.Co\*VT'O?KL;PuTFC@MeT.4X<<(!&OL9/#7I??"eSfP5AF%-DEFkS`fD`eZV5uKAt(a$Iu>q<iI-QOk"%s=fG2@ScYhGWOA8E4=ALe<-X2:RH$,s972jJp/i@";J\Ua3YeJ/4I0qHAh$](\776*%O.oj"qHS0Vb[$3j*.8*rqc'QuSR;ekJ/%X;"NMt\fOVNE;WSb=*>^O2d7t0Nnk@asXNkdhjmlq%k2S/X"M?F[`f5anqA&%IDT6eB%H>SO,,(s"/4N/$i6?e;0)55K.<>@PODL)B$L!;m\0ZHPi7M>A`pjC_I#T6]Bji5X0WJIh0/n@kP54*dP\O[HUPH$$)r'D#DlEbrG%4=t5$;Q8>cajs29P!p$0'd4p`k0=@BkG0*&6_:%$%9i[uoVn4V&50^9TpG:K]QV!<I%6pa5jLVcg6D@iT?$>;^\+g$naQ4`>I`Li%fD?O->Fi\s;<j0ant>2+S,XtpXHN%Z)Q?L#[oV\&0Knbr*1)+'\kO/iqEd<533YA"<(FjSLqeZ..DPrOkmL@:!;UicOFA@9%ME$)%e41VHO<`hr;9aOSQY2Y5S]MWZTn_s@U2kMOnt>2S,t5r76`F-8r=#E"D4F7WL5kHnrso&i6ns*C)Lg044i8NqG(p)BRO(mIMdrGa%'TjcGD_Q8.GQ_=?AhQ8]GT@)PkYdQK.R*ME&'\"S4s^5kRk8c0QbgR./bn_p"Z"/fZ`W,Rh%Dc=#IS/T=qmS_CeCmNE:dpAMX62[%?Z@t]@D@OB4N!!Xo!dX[]f*!qI*D]7CIF5Q/mNko<Cd:.eXFq3Hth!Mk<*5f\(;_I9IDqAF@k"U0=OHH!MNuk29TM_YN,$>6L'Yd%iY._eK)A99pCnmi7V%+P(DbXtr:Ug]'A_(ICnT9O^dp[t=;2?59;9qTGN-_V>"bH>-55QJSsTHDo!![ZJ%#312K:34g(amWB-P9a%O1:"#f>c:DK]3u;'==h\h^!-2kd<*?3CqZp(oNUsQ[%.YSCX"[D;)/>iGQF."D[\"=`1RbF,>%YC1Im(U:=3_WMt"RrT5mgi$9[3%_2-G!:9FIU4#uVlR[$c`C9)W3MSD:L"F$e:ItI:Ni?UJ0R>QXASC\Zt>ZXU'KVD\_*@9N??$*":;`V`*:OL($AihZ)Ucein,Bl<u%]%fjb9cJ?0C:;8\PTC!<rVR$+NZ0d&>>48=^'nM'V]$@Fp<[hU4g][VH0T15+-ZIDJR_2E%silp(lgZ+pGb-UG`1#a-U(2?%ic:5%[\m0ddj.+NmW=X&n$r=T4hik>2-=khp84muO@-&>MTiEZWAVJI0`G4Yik\_g:KrN2Y:MG/2RLfDWEm^KSP.#ZaU-eUiJh.n-UC]b%dT7WDc,b2`%$kmh'+!h$[_s2=iJRa%on-A\X6EeeBr902H[D?TV/!>ggRE98a.rIbV2`[CpZnZVjaD4LBI1@JfkERN4Z;3akMIgD%][,)"amM7RHoL64Y&0g"C`Q\$f*\/-+)Z<!AN-5;%_XmYZ=YtrS,JY$>h7bKYCB+rDJq)8]A)-D@s)C$HbJpG'-Zc;dZ;!fL$]="%36Tf0\'!B7o)7Ui;ME7NXlj<fF)13g:+uM3/oBFG/>jDg68u;repCTSEb>4EXS)!:rN6(uEb6q.eb1*):A3!+X7!sKmH7G'PJ!9q%W/A'-\%V=%^Y<)\-6#V2jgfhh@Ad"oR:BjjmjZ[rX*9nJ]"VIb>-"NmHC6/T7NZ$YrHu&T(VXg+I!gDmjroo"R4jV.>4gGEpZu3t%mnJ,Iqt;Xb[PHSO1gH:qrL#\GgVQiK=11m?1/HKQoo7Ik3PUgX[!]WqSU#^VcNO3cXc*/2VtG)@oSgP"9=\fr8Z]"/X!P5RH[!5*%qm'R#fB5?3?g0+im\^D)oA;k6L[Fd5-Z`nF=hhK$:,U5`)bZZUl`4p`o4H6i=1_HgeLBtO9@%CbS?\U?mp6R[h"QAHBkip@>%Y01%o$n70(KQiSFPT)tL`K_:k-d'm)mbmAA`)p=>kW'+fe#/3qQdJJ;7Tsg*bOkcg9'KWD.q*qS:sLOSP/.A#sN4&T0G:cTk[n5$CZE&%H^J(jD9V2#/DYEPMM!Rrn19MR1T*CKh6ZnFV60Ybpt*MsmQdFXQ?2e01?7*@,LsKUQF=5Bb=;3cj(:9sjlXR/jkH[d/4iDec$,D\%_c6sk]e9]%M[@`H2G\l<=:DOnUpFEreWcPO[%&)u><,^-ITsrq<tE%.8u;:Nda#c+ai85llW1%\<:6TChj"^N7DgD8VqeoM=W15L%a^*_Plq8*#XW:6e0@00!?9QupN<FF\b#Zi/($6l<>PbS227n;d,_VRuk&Oi%V2M^'[@c@EFIpd[[DU1K/0W?BFW;%Nipp!YjaS.[%jl"-Y^.3P`K#L\FF6cJgrIoX-Y,A[UH]A$Xd;!-^/a&h8]jC'=9bmDLrD?T*8Q+Mo,l"Fc)o.?la1`p:WF8!`:]2EN0]2kkH#cYu%EY$mD@Q*FlQF5XqF'TD&fHHY[fL^MIf3-id<poR`e:V:Tn!dMo[P%dKSUGDrUlN0b&+c4S^8L3#&!_O>d^WoP3CX37l+43H):.^B%$Ca!=h;[e`&.LF:6q)'Zh0GS"BW71)GSjA[Y$JJ*W?&u/dpL;3SbCeChd9Qr4q2LBIBVD*Anp.j")k_jHYe(sh:mp5[2uEo2oq.X%5<umlQT"SVp7k%u5Ed0Fl.`bci_JrXV3*gNhp8IVXLC2E61t2ZP:@W^*k*e[H_l,841UfJ><?(FPUR^W3smR;q>AhTDk=hng:`e&%;r5]XEb"qAj%dbqntqo)[eam#Q[;iJI@!!$rcfqAKO^UAA(Rf2^J[;O=IuX#V2E7fAL73:g-\+!^3P)VjjI8R?!Qbd!G-77>>:N:%iq_]F,lR60gf&C2ZZn\qHMPjs9HL^sC9cf0pHMoRmEFta>?_$t[Y\p,'Y>F`q,I0u8d8Vt:+/WaUcolcDeUk?WRJ<ba=m>6LYU$m%e]Oa"k80qX>$>.tjPIDEG86a7G^GqZalMq%N%:NXrc7OGAdbj1!E_N[hGP@=0]g)D7LnLoNd6R'/b/E&T1g=+SDp/WK];j@8j52<%'I,'un1*,=.:V;s&Y%I0)F78UB+_2?jYjRn;.gJ79U:gA*04N*C=8gqbT"AQbaA2c0R=\qDZ[?b:Q^g]gQIIB""Y#]r$5oH`HtGc%2,1H](W;CP`%&#7FsOCL'"0+^1rp03X8$1.DDsdJK31RbEbI,0&.+C4J)pnO<Bft'it^Tc[3uIM.TVfHS`Niu1/%*u4hqP=cY&H/%3bXeHI&tF7gPj..^Z6(reDuC,H>@IsSo7iS-"]Yr<2tOo)+e=5)fI3XmhiJ^NC%;i5*ipMp=66nV7nY,\&9c:Ef:^F1?L,+peRh3%lZ>a]IR^Jg,l]ohgL0#*M,`Qr;n"F>?E^SW[,'ukSYj^/F)M9c7Z0%tmXfN/a>GC3UGQY6or0h3B`#@/)7]O^CcR\n:stn`VSHEB%Q1@99WOt2]47=Uqqf&8T-,oi^OrEmj]Q;6l8gSh3Q)(9MRl<ruPLU16+"dRj$8,9(^=a@UO>a_!nU?$O9X[hPguYm9NA7et]7*]"%VsNg$oBbm3F#J/[IF]D5[e/8;SEuhaDlgHeZhmD%p-?Se`?c.u_$lXP6Bs:iLW=58Qn&U3<(T!6W$!O<:EAnPpmcc*,';$3UAX,3%H"KfJL3h#12G_dG\*UMd-VGO79&HCKegp\L\L_dE0Up$lB9[faAU:nVb1rb3^[X$/OpGUJ)tt<Ilp$o.@hkE'9+C!bKaFlqq`.kq%mT^s:IEq"tWW^WfhpD#H]]ME&#/h1q=d8a0E+Qjac-1m*'qBAp,PO2I1RI1po'3X%'rH"ak1oR?i#l5el(5$.Nc3C?d9tS'nb.-P%^%eUBna[XLaIuA!cTR%XLqs^4WP*bQ?`5"k;qa_2`q]&kb=7`cWI2iPY'g!m']d41hF\en?G.TT=^q'Gd9[M)9J7k067D`WVm:l\%maFuNbg4JWQ.Q*7kMRHb%s(iUb27^)o!@Stp%'"e;5QJ4k!'j;f@bK1.Xu<m=BQK02QeFeC-klkX5U?5m5A&9b$VOSkL-MQ^V4rO%DmcuFUTT`geG%X99s^mp]=iZ4rK_2eV`.NMCK)V1k<9r`c?:\p8B3VM`qK3I?PplT]@GZ\Kt\-qGr8qD?V"bk)HgERaS:C!hf'%;%Y'jQia"#>lN)oU-HXZN=Im',ZC8Z:)<^3_NbNE/FZZf"3S$ua&rqaHgr1Y#CVH`et>?hTDrS=sK`9lX6qSV$Nb:Co_NEc9]YDakV%edb]#\B/484O7W25/16)g=lB!F^XXu62LCrl.se=EAb2?2+ZXuqUsMK'7V_m-T`D>2L'<6.:!J4HD^Dup-#t9oLW)1pQWgcT>/^Y%2#M845G.sRc+VH$:A2cFn!o1p7l-[bI-@-)p<utE4nu(5Vk6nTfi3<HUDf?E,Kt)gR)rZK]t5f%8e_A7Y[>/:DcL.S]db16m7s_'%.UV)T*7TaV4Pm2IW.qaLY%=2B1M#[oiVhuI^#RakQaX'c(.5WG`n'kg3Io./gYY5]K1Lsiq^M!-rKu)Y0:&::7F^SRfkU);/blle%hs"m&[lYNa5ipSj9+OVQ6+<@[)D+rog>2[C)$?F9A,#Tl<&&H9Q;*rO<jpUD4kJ\L($hFSVp=b&?D/d]bq6C7q^I$&^)0W\2??[e%0,uj-k`FT$gf'_h32a=17NB$-b]JaWjNP9_*ZVQ<1\]40Mp_pp.(`Pe3[%U&%s*;@q;oi\;gsGKZ\>mFfm<NBpTUY\;KhT7H;e&F%oXJ5N4V[(o%jj&lk`chFhjrlDcH`'E^E0;!kZ'j+-iS,RRH3PG7JCkik0)HB\pL_N4ulAV6o]3F(:H:TIQqt\R'!5eeq3VBU2.@7%k#;8sol6%u-bU_=-nK3VI&^^-%=^BERJ++o5WY3,c!QVGDcd*K]mj46$GP:c;Zt7P,eom/A<iE5gY^KV3k6JV2Ri6(kmVK)ifWj>%F).nH3]NL_"I)(4qs(aIJl4h&bC=pe><KXUs-tThS@>g0HZ.4-j10+(mI#G^>M+Q;4j9i?ASQ/@3M@=njbSY5H[/^P_F'42VsTE-%Go@lEX4^o@(!1%McMau9Z?Pd2#'89jn6R\Pb'hANkGa[<b;gjT%Ya+"AG<^V3:_9V4**KU^S[G]kGA*rNkQ'#-1\=q;!F..D?&jA%W_Q$R4\VC^\%eu3G=^C:-*N$APl#_hZb:PX^#iXiArnL>=sGM0f[&I(p'6BDjA^2EnU#^0?g]DdZF/qaiNtk2&kr<"GsG"dmYt9Z%BD*q)&3OhlX`miWPp^W)B;N.DPj-\pR4;NjI,<`4C4AjHY9%N@*o>Wb;(a7.I-;aiVPH9T.sGXtRFL%;rNl';AhK]=4u>a,kUpe_%<f4M"2![rTAhe;'nk_TBjYm"(<nYRIT8;$%:U/-c-Qa$Y:Nl1d]6`@@9Rl@cC?jT@RheGKdr'&;dAa.f3W6;4rgNhlIIXJlMs2GM%D][^.rT!jG4(Z<K_WG+6iP_g`rU^.QgsfKq[[+&@n('Y6Z[U$:1$cZBj/4X.699i$[RVr_EB^!dqhn"q5#GXQlJtS3[gT3$bM3!^%j6YrE.R"Wj\[(g8,Gf8E2hlF(4ZGCCg&8h[/+TOK/#:Y'42eB)"'X_SX@TV==.cK\pJ-cibH(O,rhaDj^)T;kAZNd^17f7O+Wn8)%Ud2/m+!,l.W=XEtY^W:fmetX4X5*D5fjFJF,gB7[206a$l^p?Ng>Y&R#16dR1;Ug1Zd1),\!Tm\2@m.)L[*L9EN9Y6[GW-(/C@45%ji_LZfZ(;dnr7^3\lb[pk5Ei?#iWG@+3m4TRI'pBW]"9#qkej"H&A_F/!mP+<X\_WK,n<uS>KD'W:nUgdhH.Ihf"*?D=aOC-Q_Q0%e]O@oM7cA.7!Brh[tjlo2-nN4)dhHbLH.Q/q*\@_qG7WII]>]U_<&;5PR%dEDc13YmA`,Y1,adVJItM\ihMWC?[aMp)EpUN-ufr[%EA-U2+r]\6EaRRd.W\)h$*;T'T4d[_?!Ys*qj;96otDmJd.VASHXrC=Yn4'YBl90jool.\aq2jX;-.[[Z?qR72kLE)%AL)pjR3WB%r5isWBPldOAhJ.,.ElBfAM3V3\Us"R<m/%/f'^ZgGfBL%4#5s3\*:o\r)e<&eis*.l&)9?F!m/q>fi<-9R'691b"JXITS[:12g+1%inTCW>sn]@o-nnS(`!K`\bDUk%tonJ7APk1;r7(OApaLE]Zt5QAhG]`#VQqbY!2#i=kcY498.V%$b>BfE3A8*M`hEA\*]`sI'K6F%2d5'Gl;J^iqT->icS'.4No&[T<ZJRpr*8OZ9nsUm*r+iTn-I_#5@7SU]:"YgGk)WLr=3()R8;\]X+$ntr-:LSNdl#\'?fKjU<[3H%4jgca67LL_jn-^lqV!(@f4k$iReHT*)qP./LY1b]:JS)A%mF?\/8VAaAeuCJok';oSh$*!Htbe=g<n=rDc%P,?7+J]?B@8"*f#?+%bf=7::oT\;_Io9"o4DM.qYh[E?dXcnf3d;,K.\_G?IEi8E%7AXfS;a,F2$u>%LsAaoXF#G403Iah7l#**p=+UhmgZ&gqq'Os)ZH<%qS'J2/"_4A*9^6Tb3j".gJ?d)nf.1K-(?N'>t!M?!U3OYeJ@&J$hI-jR7$i:j#bDnRUML;3$[0ep0dpg4+#!"-&.W7^1>Sj#h!KM%^$h5AOmbAsP6'M\UgYaBfgdj))qW?YA(kJ%P$@d)1/G;iWZjO3%Tmk-qPBRjbWab+>Q9!G>@H97gUN29GQ,hpS<q*L/npigc'>Jb%g\'!+lW\NipMDOTo1jKET:A9"?VVU^m$>/9A8_e;l")CDm>Fpo<HX%YO(Y#A8FO"M]]-Q#'@.[DcccuIY(C]m>Q3qhl5'>nST.A?%RV_e^**d]MBP<0<>ZLX*_,2P*EIN,:;6!ZLiV9.kj*E)TZ_?#70[Indp;Y-p5Q@F`[khn'ci(Aa97^_>8\20I9ia:$:Npb)r]XEO%^TFUAS$NR7s#%3M(/ZXMWO:-&oeCQQbJnk@np7^X6e*\e>FB8)YIh1Rg-;HZGFl>kDt6&n[(D<HDjFjMmTo8(Zi3@1/cS#(DgoCB%hEB_0P.:6Kb=9LdDGV4aYRp25bILm!Y$MiE`FS>U8YFtH6/Gi`h!$]ocXD4#.6kRGBJ62oh`Me04nI%A^:R\"JiC`>p7':#:>,D[%2o#,rR63_0SZAUSNTEbgf:1[P6m?hfFfj4p523\pQTAt\<Va:HGQ5tdIp;L6X24+@G]R,3fl#l%X8(M&K.i[_,7)&p96lL<5MdUA%,T+4lht7Yoi?\mOn)q"X/Nh6.0J7grV9kakpE'!^?CDR<-l;[b/\\kfUj\f]&uh;<^@H;5rHJ1bQ(]L@f/=7rmNtY8EtSogdOi,c%eFXB-(h@sPVg!8Jl+!2$!6qt.K^L-,4iC_nH,`Q^[UUgIKc)7PBq"5(+?O<5Non@q90fk/GpWS1"L<F`o>Db7l1g!uLaG#2,O(RP%/6Z9[atnd9F>V%!6%p2?Ai*aK#+9ecp.V(0UEpPMO`Wb_Y5s5<)I/kRn>:?G:?],T4KpN!k9MptWR3DjUkq$T'?EmoL8W'JH!\oS%8aYS:^7M.J[S!6r)bHUqU6;J@Al<hp4bi44Q.-dXft@Fn=bO=PQm0Ne-KQ)h*Xa`t6'7s=lnqI8Q)&?I:0fd_q,Ypa$tX/[La<pi%Up?+PpdrfLVC_ShZRgX^Ui2Ve8Sj#i8-%,c'Wl@K)XdJPM70"/";D1pDePBs->gd8UHI$"&sf*\8X-TjRC"P%OVtQ]qFl$DnU.2E%"*9:QN^7Go#47tG^G4b.8`)>+(rXpn(9)fe&\t*20gN'><rkR6[L&K35otL<3h1m)Y"Qo,m_cj^>USLa8WWKt6#:Ujg5Bb*(U7Cb%HIAI)&h_:i#9$1k+bQHfg)`hU#+D]/bKi#^9tIL.@/*;tGBM-&q'9*=:MQ>Y'aTZt*_g@2^=-&g00A,)f/-/4dMRD0:!`kG-%a4/%()0Td%0Cc8bpN8J@6s*O"JC$RpJBG.bHN<p1R(`XmDe[]GpP^r3<H`:ItMoJL`n\DR67h]iK<pI:NS@3,/s('iW3btlg'--L.eO6%nh<0]Ddo1"OKObZ/;Npmh!uK/P+RTUGYp<f07lGRI+"a&#)>YZ\V-i,3[@:3k3F']b(=LkppG1!hBGT9\O<&Q]Fi`"KL]L-ghL*q%77sI*9oX<3X6$QDQ\DH'U?c=o^1Ve/_B^+!F9s.sIEd9f<=i:D6C^LTd;sSKUhgHI'8uq\8l!emXVdtO+Ph0L/6sVLGC1d0=97pN%QmW"cWhmMJ:!9Nt-KY*H[WR4u4hqD@Ni^#Q'EnTWZ?0Nq3qOL*?dj^dR3i.Dp+8K(e&WpE0h<TJL..o,IT#o'F[:W3[UT`-8tO0N%=$/_t_-B^B"o(tiF%p6>(a?(J_A&+^+MmkeDCM'2!(E]j(YuJn<MUrj\P9XaLJ_IOKE*U]2#+Cg;NN%dAiQ5PY'3:ulENOi\QPdQ%.;d!GQ)QJhg,;65>>s/XM"(3I;b:#El>R(=Z9?60#?!h]/TpIe&9BZ2.1D1ZJtLH'OtkqL$9KI>,>`eXDBg2;1F/K7LdSF%,F#a)%_u@P4I2`J6AO7XCQYABP%_@0nQ75K25F_h+N*FL-_k<Z5BEKm)TFB!9%9mD85tR;0@8n+9&6BD&,YoH`O9IX*:SkjCG[j"[7g[?n%anZ5KId]a(:?/!,E0s0B>d5+CFr5"ak(.E_<SM"2/TNTeDI7jg.EHT"YNJ:rRY)4tf60i!OGVkfiE:Ql-NNY255B>Zo1M%Ih\&DU%RtaJ(%7Csfp(7B<MhEqnU#9@7F+l<:e0ahi`$E5s\>g]rF6ipQBV]&2PmLG3)JMd=]AZ;$5F-/bZ]k9k6XQ^;VLrDm=E@r01`RbM%\t/=^IE=!+W?Mm_W^_gt/W=5YeZC!VD>9t2!C4g_Np5$(.R5eDAk8#;a/97O^k<XAK>b,DP*n_NZM7[*a:jY%$mAjhDm[Ns%LJ[=%C),eVF^67n$j+3gJ&chtKq)?K-pRIE@M($^"=f4%<_aVP[9Pif"bob!b.#o7#n['7%'qC@2)R=a=94)h5_9\gWPCi]-Dums,[+R*%0ZoY/4WCbQ,$fig`?P[uqI*PTAre+`@7hB9O\b6`:)/?4guR7QW_!795\<t9@negPeL;ln+a;gV9pMAR3\#rR#_;#N[U_/o\tSGI%FA1DWV^W600SmB?V$o/5X,SKe!MOT\8<Jo6$i)0JQ9:K!/(-.LiDEdW9#i3$VcdagUSNjKKMWHNISGHhNp"48OL(_oKt/VHE=L)_%pdhh&,/Kq"fHQ)<oq:9,-,op?.S$gj:^BCBDUDcaA61rgOc"=K%)=-t@Z`0o21*EM5rD(Hm$9oFB)>7YW<C3S8@'jV*:6(W(FC_/%27fbcmS/j?+=GblSJS2;6n40THVt<r]5e=@CE(R]5RcG$MfQrVRj9A:+**LkK,ci@)%R:BElnLb'FbpKf3CrL`%k:WQ=U&OieHkM%RUEY*mLWs@1S?cK`XH,j+>uTZ9iS1gm%?%n<!driYFO@Uj@OnggsV!`,64V9bkc7@Ve7')T/35h!pe5I=lg%NOl7I+0[VQC8;[ub%.oJ:!R5'LdLCSi)/%JWo97TeFle@Q?"UM4D#@rRq^_NNM_^eU"PCR[I:BW/+Or.E;L)i6Em4$%Q0oLbeD8:=K5*7leVO57J4kDj"%rd;'q9\\KS!7C8IjCk:65(7]M0Kt)M?D2P>CkK)P1eu@C.8j.o/5&<C'I9TE^4M&LcSLeJ8:bH=)B1(J-&e4&UCJjaJ93P"*lm^g%pJD']-3Gfip)F+O4GF?38fUPZOoT$e3Wg@k1`BhC>Uq)Rn3*'>H!T.)6^].sQTi#>J#7f<R8O1'(ensIin12I9IA@HaL5OX%5rGO%#pIlg*]Q]^8Cq-(at*e#PCuNlL^1Ie+Y4C\)NeHTN_$hdB5H0TTZr.",##nNO9Sf6q'?>4C2ODjPTUn0^ou.W*EYA"7uX6+KH(7D%9G%9s;A]Hk-&t]pFl/5X7KfAu8`ICG"Bc"4/4g/B*#'Ticg5f=Z[il&FH*WK#U%XCJC^b\2L90Bck/PDn257ZiN.W;7jk"ZAkD(1%EY8l(*h=M4(Arn57\@M&;tM\P'N,nb#t2Mh_UKl^Or;_Y^.8eq8&KNg7rudJP7o:koYdt2`jH/a3AO2WmP6V.O;]*K=;2_]iXZ5`%1/2g<3*I6>-:8kGNWJaV'a_3'@]F&kAY]BiWJcGK8V@F[#;,,!>e21G#m:j2EOdGU,9qcV(6Luno-n8pI8+J@Ydp2<L"$<X8?fO7%8J%#!TRWn5#X2Id_)aJ'8IY*A&XI&T8<JQ,Mg,u^*4%G)>nmLQ98s@&5S1@K&r(Y,bmCX1[fjWY#XK&jKbtHi,aqg&2-N*Dcn#t/%p9(*0-itjg<Brmb(;-H+,gn`JWeohQ=a8-"jsuQ8+IY$NYEYHF=97pNR8LN7J^/k"Zk25:GX7`!M&`sY_uQmeKVJRl2)RHJ70.C5%hi0/S!D$=Z/$Q8J7>Wa=E'VKN(cPD;Ha]SL'f,T!a&@m$5f?5^</OinL1SsrXRRk^2g@k)a_,l;\7d+Ag>Nfab?tkbBKb_Cn6CLJ%F-Z'R-IS^8!2[&kaOLtsD+Z?]DTYMG)W@ie%gk^FCB2@:"iTq9476S1>``00Xc3d9ZKpp_*d/boM?YOQTdU2NIdBl"fqMG<<BuG>%\ur+$3@KiE6m`rjC/@$2%#>U:=Na#74HFq7cUf[886fG\*_#A8^7k!VcDs(Q,B\kRY(?Re"@KN>_/CfL0hfW-LZ8XkRiM]%08_(8%E7-K:kXXgKgp"\K*UlgJE'e6s4:#Ri&;L?LZpZFmFtj^87,:,_2hH^r9[bj5/9j/1o=9Rt5qn%dVbXP[(30[*k>!`sck+)'@;i^p%p;>9=1/&4ski,]66I;(,8cSUN/;0]O9B=`Q0GTSS`!N=sHOL3p^g&$Va+4k`$4@3"(uXWgab<V&Wh/_cIV0PK,DBgiTHf8+9R7W&%'I4H_QT46G;(+B>@Yhmj#c@/>L.0T*`(+)GmuZ%R`9e$'L/N!H2S9(I:^RM1(Cqd(@G$U<9HHQ1ejM2UT/6^S&r&bI2#3lfq%1s&%E:=lG+<`QV]V"MW0s&/_n%+ggN0Ios-]\]],U"t`=Hos-eWaJQd>J>eK=$Sll_:9^NW[-''eoihg8K;Dj`<SU>;'M(L@$Ha1+\W0%F%nJLq0^\r66@U!BI0)+Ho&bdiL@Q\`r]'[`#-g>G[(NLOsJ.^D[IaPTZ,]HKmk\,*)<OC)eBN&1k]86a;;cs<%31&1C2B%$4;;c%2J9@N'tFCK8h?3UfJD&d#1Hs(RK,gf1nQ)k.+b+L,RP4"3j(a;A%q/m7hF(_VF[SE1W"cVk`n^^"bIj%!n"cC@'LoqYXhh<HV3cB%9gjW*oYXZd&]3V3[A&N)Go&>'4HdYBBni>*/g1f9Qn*h=G,rD&XbgYNV'"*XfWASTKrc5nh=?C)<BJ>oWS]b^5+M^F84.!J'e%m%%h4f.M$RQW=,[V'd(8>da_76m\_=Llc-sKCCcA[IP%>Yq#XQVQ%@0V7/#W*koGrgu,79%ZSdV4eiE!3pCM!.l\GnX\][.U)'W7uFU%1[6nnQrO9Pb!XWs5KLX3/=[C#@_Q\0&.kfI+"gudiJI7CfZF[,*?X%si1Z")!W"H?4a``-S0.kG*_6!65mt6uAdg*68.aF,?aVL7%+9Rrcd-\)+%1;.TdY;Qc8\QGST`7Gl%ulnuRY[]5Kn;$#LZiCib1%%8/l*.7+N8RN.+2unZa>6rH,XmPOYW$1/#Iqm.NTgW9?nJl%S+PU5)CW43+et-UY^dWHaN'?p/'O7GLtg3G&TR_Y30_f-oTbFt?:%20co8p8QUKj.$7^EjZr(=hMiLZeb)]pgDFBRF_F31KeLaDi%q-]#*D1%<jKL"d@MJ:!O8[`Jj%@#hbQ3Z/b`#I$Slb^%D:u7":L))[6\\mEqWbul,_C7ce!Q7&AH"i4kI^Q[t'KR[?GE]=r8b7n*%(;n,\EP@6!(+ofQ>D="nDA7PYGngCT*EuKFE)(=L%V=:E1g<BB&/'/a.0!>PU-;JV<>5UR<tctI^*S`e_G)o:k"L[q4DC6p(aa4L%*?/Eq3RT_C\`[rfAeVGVHp`J<SffhdNInfSlO%\Z"O&/jnklDXXGFES.;DT`!0.@C<t(!pUjea9Ui7BSTib$f>cbr.VAMtSmGmgP%(\C1?2lKoY-i(Cj^=L1F5XU*"C/+_HLQuNYUSOCs@c?6:F$r%(m7#_0,n*%q+D!1C2']][^fUeEDIB9"$WH,s@gJNA2IFdf@;,)e%1)_`[TGj/3Mrf<g4u$)U&>b:e)IZ'V,9jFm`XiT'$#EpCm`n=>jB2RHNq+be\2,N(-IhBuY=cN?_7@),!#A!=g^+)$&KLnZAj)7e%)-YZO+@h,T,7N;RWJIod\8=.o:qi6*M`uih"W$lH)_.."1OEC)K6^&pC.9[k\^M2-6HumYH7UlmA#i$K;FCoWbWlja#fKh535oBg%-&PGVG39gs0,Z8D>@%d%.gA$U"EQ!s8:XLk\4']"iU//)BgTid6qE%CMA.V@Z/P&E3ZRIqbu^@,,uH;P?l0td8m$XPSk,4o$kR[N%(r/(J3+J.tJPCI5iJXm$TZ:R6,n/i<OUBejOptXG;]Bph#E]u62rtUJ./:DBS:n]"EcF\2,V0G_0eA3g2XYpldFr3UZj\g@gZ5%f%m82fO9e!hJo]/P`XY`jG%Uqu!qSk4PZ=\&hNaY*k&!*N<fL%BN-6(qPGfB6:&9-.W%Xa3L8J'IJiAaAZTLlu_OtfYhN.ad^O]f6B%*GaLS$,E2JH%7b3e+M6`!BhPi3D^E_\"n'P*).JA@a7N3Oo[&:0MdTRQ^OA>5Y1u&V+M4GpCiUPqArA65XH)=A#plU$2>E$aWuEf%5`',;ddWBWRL$%VS2gsEi,d]k<o>g[_9G7P1F_=qE%`R6$!1YH:3cVcYbHtB$p@WZ7A>ch\]G^(V^E0ga@28-]d>;;`$lPA=Lc^e%R"h-r`shbLEK`=fO$!WE73P)JE`"tj!:DL%iqQm6$>9.p7qj/,8-AZ%\K1i#<0WaE(16GqL!*!@^,WhCQU[>GL**"&n6XaOj,P`%%:TlcgFY+:R<1RtOBTaN"+9>CY'HDSG+Na.nq3;aQY]Hgg33?_c$nj=bQjcQ*lsgXTl^%?(n,*:0rFRA'I4DXW7/RE^r+H5p"A(\&%#_Rg!UVB(dj.qDFkOW)'P^S[e38@Q4RZAXLNad!^!O2g+U4Q_aj9Hc.MF:-InTcF`8U,V;_.?A\'e^`iIKX:M0bua)")k86'E7&#%)nl[qi[e&!en%_gX,"6fNN31MJVC*n6["@i;H>/8KJGeTE_XbONoq$QAmq'k_^JW_C5s>VRea=7g9DqV6q[fFUF=2BEal*^If;_F%MF7dt[)-ApG;Rrs@QniM^_sK>+;+iP@t%!5F)9jS;e"uh)Bf?Z^#INtjteHX3$O9cCnciOE62dG;[o*j`+V9Li>Af)R*fTGM>SZ/%["4^]3;/LdV!NUeFjjA/%5W&;l=2@S/N-O9+bGQsa3l];d2TCdhLWT`@4<%A53%DMGE(CI)(@QiYRB/)<!])5*\N&,-Bm9F\ckMK%$I&]>M"G[AM2F?VaQ\*N&,d$p_M'#EZS-4Xcj!21dR2a-%re0DiSs.%"TcFkq6%6ZA,3VmDh_O14Lp&""<9.[UZ+0]F:[!8d+Ka9%jl6h5ni\8qkVNss$Z?FUk%M9ikFmXZD2,QFjFQ-MmgFZhpG34_LbV4-S<8A$$dCCD_V)$,"c2:q`5%$D^3h79<hTlnQ%Q.S`,"@a%.@q(>CgCk>]/@+>N6?P`hd]&.KMgEoaKipCMgK1u:j3A6V7=-Lq4'[tY$KG\ZVbh.U9SeO,2)Y,NZgYM/eLGp0aj$o?oFIcW.:".%qB/*Pl2#3"QImdRP10$,2iBI\P99<[4Q&l8-kj]73)l=Z]APOt#g<j*OPmG-3o[^R!`UQRp4P=-@>$[>+p2t*KS/X56Y@X4k6G@;%dkokMMH3*baMNWr8Wh-7Uq8,4\22)&Jp2u+WE@Om%ZHiDq,bNM7g'T:-d3&u`bdP;-IF]b\mQ)j[3Ys"^._?7!Ih9CE(H!S#-K8_%QFJ'tS&hN7_FN@Xkg0.Q,@I4i@c9!S/Mip\Br2/&,$i$%0uo+O)5bGda!m.l.L]N!FY3<<X8@8n`af`"fj!DOYRmeAX$uA@f>#/h%Gd\Ir_\%P(99Tot7V'%JqQU[V_^Q&PC%6o90\6_F&TNdn%U*)<;IGrO'$%u93\BD)*r@ZC?Tcjc+W7/6if=\hFPL0q$jGscG=)H9%M_pc]UITP'/,4;e0@/Rs#IWb3%B%9TSaB@75ioimYJFgED@XcI%f1T4FNo3*J/fGlT7"(\^mC4k!7KhC@-pK4EU:u5&+*"#?4KKs%m,S`eHu]k\3,J#_Gu:Br9BS:)kHb/.g!?RrMl:UT)n3P+9F<'GH+N2LUdiXd@BM%?WuA,e\N"uWaY)K@7t`ZHQ/M5O[eOStnG"1Y%QRlIMK^Nf0nSmsI(XWoZn.soFo0UKMm+9*SfVfNY9Ro&(bk&bY6e'mD]Y/5R:M"R@N:Ug(H%IAhfE;T(d)C:"BTVia'9FR(1IOM%%U#qXU0#:TjEKPi9?@b`h^+.?n.ti6>`EX\YBO(%D1?>=,K>lG&?n6tkeNN>\nWRu2-A/88o9;.J/M<C"ORYd.`/PlTXql%:L$/hO%r-SU`RU\BUZ^uLpI'@P[:`Stdkf@>Q*'GO"E?C]Z\e(-XM]ui)TlZ9B#nNtbI'e1/$BbD[rJo,h_0oYu+jrkjg_1KHE>OfO=VTa_%idutAKXP&DmI^0F%PC_r<?(+mFpJCm'Udt7GmNF?Pth(3V).^;>g=QSTX/2hRMfEe(>U'QE!@;iEq.e6LGIf4NUZ?^g5ZYH6\#Hb%9NsW#%"Z4-T^4SSSi5f:7%_oEWMF;jK.p"^qH6Y8C>t1Nd,F16*=Jr']a3b@RhUq"ff1"h&LHmPa2Lb?>`7aN"q/ftYtNH`='!^e%kD/.%*CpmT"`O2(!!lYTHo%QL*3"daXhlP9*C>>;$,%$,^.No&^T0)#"JL^@+?4tX*>P<,L:T?q$=Oh_C)fN(*n<*XTcpkc3N%]A%n!YSTBR$":_Lu?<"2mSt#;Hlqbr$M^@BSod$FoZ!?bdhKp!m4JBeC>FGT_0[VCg:5&9]t=A_.SCK/iLr1.u!]%H.C(f2EhP@'KEl%We=54CMKFr:55)#1#W=6;YU"dL_\7f:gmIk]?SF^@38/\f2KU#cIP:rX!?r]q;/P$DN_1>i&JfG?A4BiC1HP>EE1n0D)b]`N`;FV%5(LgY3)tXW32gV3jUY/1!M\nO3;4[6q5et>;Oj>Or6iLu=R=IDXb)<.#B44J5]hGnYrne33.?ZB#>bsJB4[YU]h<kb&0eoLCg%:o%D'CM[7S-aK\1Fa!Y6'nGY)JXKJ>pRh%(H^j496W>p"?NFSo6;+542mbn%l+Y_$<k>$Z;1AOcVCAF\V5DE5OpCiJPNO@+$dL6`'h$%$C(20$DrNP4#_h4/;,f;`$)Wb\Hi"Inr:)&+bN/:J605,>0l\,)t*SPhOgFBUpO0^&qIO(l`&9b@<g-G%Q]u;7jt'fh_B]J,m[r,%m0ZK&%kf'P;6h>$KY\CB'F_0X@M#]ZM$>RA'Hu#F"+kn<L6]RE7>E/+Rd+kX5_a+1=5eoDPfR_Z&XlAn!$VMgj"pctc:h)u#m9O9%pk9/b8Z4&A4g'r*EJ"tWGoU)-Z8f,@I<"Mlk4:%9i+'$;pgHjRP9GnG#KW.*$$8/@j/KR(oM20W8'Sm&9T[gR\Jj$A-Y02:*D1(=%PES!#6[?t$494E97TB4m(BWbd'N^)0U:NUu.IP598BYh-C#cQZlm+R%Vl$W4UC,[R;d@Pd:JiU@0OV=K/!)3diTT9s>=ks-")SHW%i.`17E27%0"s.]e_X-*q!AIoI\3#>U?T^-dHU;"GkW$o\n3-nL<!qEJa`'>Xa2PuJ,(kQ,-W?8n+QL6sR#Ent&`e^,')5POVa=S"%mjH_gnG@K3<bCLVn:Q81:8q8)3\uiQdZ5Ne5A4Eh"o+)P`+(1Yp0+#;Ao.DM#RuX;q%rtC.R,<XQ"Egnp4?$A^Q(s>K3fbs7o93b%"==^\WAPb(bF=+&^H9NOa%2$3'Z;nY-FM<M@F6h9TCRCnp^u#8M3H0.jc8mfs$$OQ%!V~>%AI9_PrivateDataEnd